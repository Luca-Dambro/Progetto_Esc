
Progetto_Esc_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d910  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  0810dbb0  0810dbb0  0001dbb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810e0ac  0810e0ac  0001e0ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810e0b4  0810e0b4  0001e0b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810e0b8  0810e0b8  0001e0b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000200  10000000  0810e0bc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000244  10000200  0810e2bc  00020200  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  10000444  0810e2bc  00020444  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001cce5  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002ccc  00000000  00000000  0003cf15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000015b8  00000000  00000000  0003fbe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000014b0  00000000  00000000  000411a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d73a  00000000  00000000  00042650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a890  00000000  00000000  0007fd8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0019df80  00000000  00000000  0009a61a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0023859a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007438  00000000  00000000  002385ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000200 	.word	0x10000200
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810db98 	.word	0x0810db98

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000204 	.word	0x10000204
 81002dc:	0810db98 	.word	0x0810db98

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8100dac:	f000 b9aa 	b.w	8101104 <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f83c 	bl	8100e34 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__aeabi_d2lz>:
 8100dc8:	b538      	push	{r3, r4, r5, lr}
 8100dca:	2200      	movs	r2, #0
 8100dcc:	2300      	movs	r3, #0
 8100dce:	4604      	mov	r4, r0
 8100dd0:	460d      	mov	r5, r1
 8100dd2:	f7ff ff0b 	bl	8100bec <__aeabi_dcmplt>
 8100dd6:	b928      	cbnz	r0, 8100de4 <__aeabi_d2lz+0x1c>
 8100dd8:	4620      	mov	r0, r4
 8100dda:	4629      	mov	r1, r5
 8100ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100de0:	f000 b80a 	b.w	8100df8 <__aeabi_d2ulz>
 8100de4:	4620      	mov	r0, r4
 8100de6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8100dea:	f000 f805 	bl	8100df8 <__aeabi_d2ulz>
 8100dee:	4240      	negs	r0, r0
 8100df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100df4:	bd38      	pop	{r3, r4, r5, pc}
 8100df6:	bf00      	nop

08100df8 <__aeabi_d2ulz>:
 8100df8:	b5d0      	push	{r4, r6, r7, lr}
 8100dfa:	4b0c      	ldr	r3, [pc, #48]	; (8100e2c <__aeabi_d2ulz+0x34>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	4606      	mov	r6, r0
 8100e00:	460f      	mov	r7, r1
 8100e02:	f7ff fc81 	bl	8100708 <__aeabi_dmul>
 8100e06:	f7ff ff57 	bl	8100cb8 <__aeabi_d2uiz>
 8100e0a:	4604      	mov	r4, r0
 8100e0c:	f7ff fc02 	bl	8100614 <__aeabi_ui2d>
 8100e10:	4b07      	ldr	r3, [pc, #28]	; (8100e30 <__aeabi_d2ulz+0x38>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	f7ff fc78 	bl	8100708 <__aeabi_dmul>
 8100e18:	4602      	mov	r2, r0
 8100e1a:	460b      	mov	r3, r1
 8100e1c:	4630      	mov	r0, r6
 8100e1e:	4639      	mov	r1, r7
 8100e20:	f7ff faba 	bl	8100398 <__aeabi_dsub>
 8100e24:	f7ff ff48 	bl	8100cb8 <__aeabi_d2uiz>
 8100e28:	4621      	mov	r1, r4
 8100e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e2c:	3df00000 	.word	0x3df00000
 8100e30:	41f00000 	.word	0x41f00000

08100e34 <__udivmoddi4>:
 8100e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e38:	9d08      	ldr	r5, [sp, #32]
 8100e3a:	4604      	mov	r4, r0
 8100e3c:	468e      	mov	lr, r1
 8100e3e:	2b00      	cmp	r3, #0
 8100e40:	d14d      	bne.n	8100ede <__udivmoddi4+0xaa>
 8100e42:	428a      	cmp	r2, r1
 8100e44:	4694      	mov	ip, r2
 8100e46:	d969      	bls.n	8100f1c <__udivmoddi4+0xe8>
 8100e48:	fab2 f282 	clz	r2, r2
 8100e4c:	b152      	cbz	r2, 8100e64 <__udivmoddi4+0x30>
 8100e4e:	fa01 f302 	lsl.w	r3, r1, r2
 8100e52:	f1c2 0120 	rsb	r1, r2, #32
 8100e56:	fa20 f101 	lsr.w	r1, r0, r1
 8100e5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8100e5e:	ea41 0e03 	orr.w	lr, r1, r3
 8100e62:	4094      	lsls	r4, r2
 8100e64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100e68:	0c21      	lsrs	r1, r4, #16
 8100e6a:	fbbe f6f8 	udiv	r6, lr, r8
 8100e6e:	fa1f f78c 	uxth.w	r7, ip
 8100e72:	fb08 e316 	mls	r3, r8, r6, lr
 8100e76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8100e7a:	fb06 f107 	mul.w	r1, r6, r7
 8100e7e:	4299      	cmp	r1, r3
 8100e80:	d90a      	bls.n	8100e98 <__udivmoddi4+0x64>
 8100e82:	eb1c 0303 	adds.w	r3, ip, r3
 8100e86:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8100e8a:	f080 811f 	bcs.w	81010cc <__udivmoddi4+0x298>
 8100e8e:	4299      	cmp	r1, r3
 8100e90:	f240 811c 	bls.w	81010cc <__udivmoddi4+0x298>
 8100e94:	3e02      	subs	r6, #2
 8100e96:	4463      	add	r3, ip
 8100e98:	1a5b      	subs	r3, r3, r1
 8100e9a:	b2a4      	uxth	r4, r4
 8100e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8100ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8100ea4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100ea8:	fb00 f707 	mul.w	r7, r0, r7
 8100eac:	42a7      	cmp	r7, r4
 8100eae:	d90a      	bls.n	8100ec6 <__udivmoddi4+0x92>
 8100eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8100eb4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8100eb8:	f080 810a 	bcs.w	81010d0 <__udivmoddi4+0x29c>
 8100ebc:	42a7      	cmp	r7, r4
 8100ebe:	f240 8107 	bls.w	81010d0 <__udivmoddi4+0x29c>
 8100ec2:	4464      	add	r4, ip
 8100ec4:	3802      	subs	r0, #2
 8100ec6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100eca:	1be4      	subs	r4, r4, r7
 8100ecc:	2600      	movs	r6, #0
 8100ece:	b11d      	cbz	r5, 8100ed8 <__udivmoddi4+0xa4>
 8100ed0:	40d4      	lsrs	r4, r2
 8100ed2:	2300      	movs	r3, #0
 8100ed4:	e9c5 4300 	strd	r4, r3, [r5]
 8100ed8:	4631      	mov	r1, r6
 8100eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ede:	428b      	cmp	r3, r1
 8100ee0:	d909      	bls.n	8100ef6 <__udivmoddi4+0xc2>
 8100ee2:	2d00      	cmp	r5, #0
 8100ee4:	f000 80ef 	beq.w	81010c6 <__udivmoddi4+0x292>
 8100ee8:	2600      	movs	r6, #0
 8100eea:	e9c5 0100 	strd	r0, r1, [r5]
 8100eee:	4630      	mov	r0, r6
 8100ef0:	4631      	mov	r1, r6
 8100ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ef6:	fab3 f683 	clz	r6, r3
 8100efa:	2e00      	cmp	r6, #0
 8100efc:	d14a      	bne.n	8100f94 <__udivmoddi4+0x160>
 8100efe:	428b      	cmp	r3, r1
 8100f00:	d302      	bcc.n	8100f08 <__udivmoddi4+0xd4>
 8100f02:	4282      	cmp	r2, r0
 8100f04:	f200 80f9 	bhi.w	81010fa <__udivmoddi4+0x2c6>
 8100f08:	1a84      	subs	r4, r0, r2
 8100f0a:	eb61 0303 	sbc.w	r3, r1, r3
 8100f0e:	2001      	movs	r0, #1
 8100f10:	469e      	mov	lr, r3
 8100f12:	2d00      	cmp	r5, #0
 8100f14:	d0e0      	beq.n	8100ed8 <__udivmoddi4+0xa4>
 8100f16:	e9c5 4e00 	strd	r4, lr, [r5]
 8100f1a:	e7dd      	b.n	8100ed8 <__udivmoddi4+0xa4>
 8100f1c:	b902      	cbnz	r2, 8100f20 <__udivmoddi4+0xec>
 8100f1e:	deff      	udf	#255	; 0xff
 8100f20:	fab2 f282 	clz	r2, r2
 8100f24:	2a00      	cmp	r2, #0
 8100f26:	f040 8092 	bne.w	810104e <__udivmoddi4+0x21a>
 8100f2a:	eba1 010c 	sub.w	r1, r1, ip
 8100f2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100f32:	fa1f fe8c 	uxth.w	lr, ip
 8100f36:	2601      	movs	r6, #1
 8100f38:	0c20      	lsrs	r0, r4, #16
 8100f3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8100f3e:	fb07 1113 	mls	r1, r7, r3, r1
 8100f42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100f46:	fb0e f003 	mul.w	r0, lr, r3
 8100f4a:	4288      	cmp	r0, r1
 8100f4c:	d908      	bls.n	8100f60 <__udivmoddi4+0x12c>
 8100f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8100f52:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8100f56:	d202      	bcs.n	8100f5e <__udivmoddi4+0x12a>
 8100f58:	4288      	cmp	r0, r1
 8100f5a:	f200 80cb 	bhi.w	81010f4 <__udivmoddi4+0x2c0>
 8100f5e:	4643      	mov	r3, r8
 8100f60:	1a09      	subs	r1, r1, r0
 8100f62:	b2a4      	uxth	r4, r4
 8100f64:	fbb1 f0f7 	udiv	r0, r1, r7
 8100f68:	fb07 1110 	mls	r1, r7, r0, r1
 8100f6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8100f70:	fb0e fe00 	mul.w	lr, lr, r0
 8100f74:	45a6      	cmp	lr, r4
 8100f76:	d908      	bls.n	8100f8a <__udivmoddi4+0x156>
 8100f78:	eb1c 0404 	adds.w	r4, ip, r4
 8100f7c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8100f80:	d202      	bcs.n	8100f88 <__udivmoddi4+0x154>
 8100f82:	45a6      	cmp	lr, r4
 8100f84:	f200 80bb 	bhi.w	81010fe <__udivmoddi4+0x2ca>
 8100f88:	4608      	mov	r0, r1
 8100f8a:	eba4 040e 	sub.w	r4, r4, lr
 8100f8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8100f92:	e79c      	b.n	8100ece <__udivmoddi4+0x9a>
 8100f94:	f1c6 0720 	rsb	r7, r6, #32
 8100f98:	40b3      	lsls	r3, r6
 8100f9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8100f9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8100fa2:	fa20 f407 	lsr.w	r4, r0, r7
 8100fa6:	fa01 f306 	lsl.w	r3, r1, r6
 8100faa:	431c      	orrs	r4, r3
 8100fac:	40f9      	lsrs	r1, r7
 8100fae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8100fb2:	fa00 f306 	lsl.w	r3, r0, r6
 8100fb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8100fba:	0c20      	lsrs	r0, r4, #16
 8100fbc:	fa1f fe8c 	uxth.w	lr, ip
 8100fc0:	fb09 1118 	mls	r1, r9, r8, r1
 8100fc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100fc8:	fb08 f00e 	mul.w	r0, r8, lr
 8100fcc:	4288      	cmp	r0, r1
 8100fce:	fa02 f206 	lsl.w	r2, r2, r6
 8100fd2:	d90b      	bls.n	8100fec <__udivmoddi4+0x1b8>
 8100fd4:	eb1c 0101 	adds.w	r1, ip, r1
 8100fd8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8100fdc:	f080 8088 	bcs.w	81010f0 <__udivmoddi4+0x2bc>
 8100fe0:	4288      	cmp	r0, r1
 8100fe2:	f240 8085 	bls.w	81010f0 <__udivmoddi4+0x2bc>
 8100fe6:	f1a8 0802 	sub.w	r8, r8, #2
 8100fea:	4461      	add	r1, ip
 8100fec:	1a09      	subs	r1, r1, r0
 8100fee:	b2a4      	uxth	r4, r4
 8100ff0:	fbb1 f0f9 	udiv	r0, r1, r9
 8100ff4:	fb09 1110 	mls	r1, r9, r0, r1
 8100ff8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8100ffc:	fb00 fe0e 	mul.w	lr, r0, lr
 8101000:	458e      	cmp	lr, r1
 8101002:	d908      	bls.n	8101016 <__udivmoddi4+0x1e2>
 8101004:	eb1c 0101 	adds.w	r1, ip, r1
 8101008:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 810100c:	d26c      	bcs.n	81010e8 <__udivmoddi4+0x2b4>
 810100e:	458e      	cmp	lr, r1
 8101010:	d96a      	bls.n	81010e8 <__udivmoddi4+0x2b4>
 8101012:	3802      	subs	r0, #2
 8101014:	4461      	add	r1, ip
 8101016:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 810101a:	fba0 9402 	umull	r9, r4, r0, r2
 810101e:	eba1 010e 	sub.w	r1, r1, lr
 8101022:	42a1      	cmp	r1, r4
 8101024:	46c8      	mov	r8, r9
 8101026:	46a6      	mov	lr, r4
 8101028:	d356      	bcc.n	81010d8 <__udivmoddi4+0x2a4>
 810102a:	d053      	beq.n	81010d4 <__udivmoddi4+0x2a0>
 810102c:	b15d      	cbz	r5, 8101046 <__udivmoddi4+0x212>
 810102e:	ebb3 0208 	subs.w	r2, r3, r8
 8101032:	eb61 010e 	sbc.w	r1, r1, lr
 8101036:	fa01 f707 	lsl.w	r7, r1, r7
 810103a:	fa22 f306 	lsr.w	r3, r2, r6
 810103e:	40f1      	lsrs	r1, r6
 8101040:	431f      	orrs	r7, r3
 8101042:	e9c5 7100 	strd	r7, r1, [r5]
 8101046:	2600      	movs	r6, #0
 8101048:	4631      	mov	r1, r6
 810104a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810104e:	f1c2 0320 	rsb	r3, r2, #32
 8101052:	40d8      	lsrs	r0, r3
 8101054:	fa0c fc02 	lsl.w	ip, ip, r2
 8101058:	fa21 f303 	lsr.w	r3, r1, r3
 810105c:	4091      	lsls	r1, r2
 810105e:	4301      	orrs	r1, r0
 8101060:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8101064:	fa1f fe8c 	uxth.w	lr, ip
 8101068:	fbb3 f0f7 	udiv	r0, r3, r7
 810106c:	fb07 3610 	mls	r6, r7, r0, r3
 8101070:	0c0b      	lsrs	r3, r1, #16
 8101072:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8101076:	fb00 f60e 	mul.w	r6, r0, lr
 810107a:	429e      	cmp	r6, r3
 810107c:	fa04 f402 	lsl.w	r4, r4, r2
 8101080:	d908      	bls.n	8101094 <__udivmoddi4+0x260>
 8101082:	eb1c 0303 	adds.w	r3, ip, r3
 8101086:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 810108a:	d22f      	bcs.n	81010ec <__udivmoddi4+0x2b8>
 810108c:	429e      	cmp	r6, r3
 810108e:	d92d      	bls.n	81010ec <__udivmoddi4+0x2b8>
 8101090:	3802      	subs	r0, #2
 8101092:	4463      	add	r3, ip
 8101094:	1b9b      	subs	r3, r3, r6
 8101096:	b289      	uxth	r1, r1
 8101098:	fbb3 f6f7 	udiv	r6, r3, r7
 810109c:	fb07 3316 	mls	r3, r7, r6, r3
 81010a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81010a4:	fb06 f30e 	mul.w	r3, r6, lr
 81010a8:	428b      	cmp	r3, r1
 81010aa:	d908      	bls.n	81010be <__udivmoddi4+0x28a>
 81010ac:	eb1c 0101 	adds.w	r1, ip, r1
 81010b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 81010b4:	d216      	bcs.n	81010e4 <__udivmoddi4+0x2b0>
 81010b6:	428b      	cmp	r3, r1
 81010b8:	d914      	bls.n	81010e4 <__udivmoddi4+0x2b0>
 81010ba:	3e02      	subs	r6, #2
 81010bc:	4461      	add	r1, ip
 81010be:	1ac9      	subs	r1, r1, r3
 81010c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 81010c4:	e738      	b.n	8100f38 <__udivmoddi4+0x104>
 81010c6:	462e      	mov	r6, r5
 81010c8:	4628      	mov	r0, r5
 81010ca:	e705      	b.n	8100ed8 <__udivmoddi4+0xa4>
 81010cc:	4606      	mov	r6, r0
 81010ce:	e6e3      	b.n	8100e98 <__udivmoddi4+0x64>
 81010d0:	4618      	mov	r0, r3
 81010d2:	e6f8      	b.n	8100ec6 <__udivmoddi4+0x92>
 81010d4:	454b      	cmp	r3, r9
 81010d6:	d2a9      	bcs.n	810102c <__udivmoddi4+0x1f8>
 81010d8:	ebb9 0802 	subs.w	r8, r9, r2
 81010dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 81010e0:	3801      	subs	r0, #1
 81010e2:	e7a3      	b.n	810102c <__udivmoddi4+0x1f8>
 81010e4:	4646      	mov	r6, r8
 81010e6:	e7ea      	b.n	81010be <__udivmoddi4+0x28a>
 81010e8:	4620      	mov	r0, r4
 81010ea:	e794      	b.n	8101016 <__udivmoddi4+0x1e2>
 81010ec:	4640      	mov	r0, r8
 81010ee:	e7d1      	b.n	8101094 <__udivmoddi4+0x260>
 81010f0:	46d0      	mov	r8, sl
 81010f2:	e77b      	b.n	8100fec <__udivmoddi4+0x1b8>
 81010f4:	3b02      	subs	r3, #2
 81010f6:	4461      	add	r1, ip
 81010f8:	e732      	b.n	8100f60 <__udivmoddi4+0x12c>
 81010fa:	4630      	mov	r0, r6
 81010fc:	e709      	b.n	8100f12 <__udivmoddi4+0xde>
 81010fe:	4464      	add	r4, ip
 8101100:	3802      	subs	r0, #2
 8101102:	e742      	b.n	8100f8a <__udivmoddi4+0x156>

08101104 <__aeabi_idiv0>:
 8101104:	4770      	bx	lr
 8101106:	bf00      	nop

08101108 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101108:	b480      	push	{r7}
 810110a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 810110c:	4b09      	ldr	r3, [pc, #36]	; (8101134 <SystemInit+0x2c>)
 810110e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8101112:	4a08      	ldr	r2, [pc, #32]	; (8101134 <SystemInit+0x2c>)
 8101114:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101118:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 810111c:	4b05      	ldr	r3, [pc, #20]	; (8101134 <SystemInit+0x2c>)
 810111e:	691b      	ldr	r3, [r3, #16]
 8101120:	4a04      	ldr	r2, [pc, #16]	; (8101134 <SystemInit+0x2c>)
 8101122:	f043 0310 	orr.w	r3, r3, #16
 8101126:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8101128:	bf00      	nop
 810112a:	46bd      	mov	sp, r7
 810112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101130:	4770      	bx	lr
 8101132:	bf00      	nop
 8101134:	e000ed00 	.word	0xe000ed00

08101138 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101138:	b5b0      	push	{r4, r5, r7, lr}
 810113a:	b086      	sub	sp, #24
 810113c:	af02      	add	r7, sp, #8

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810113e:	4bb6      	ldr	r3, [pc, #728]	; (8101418 <main+0x2e0>)
 8101140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101144:	4ab4      	ldr	r2, [pc, #720]	; (8101418 <main+0x2e0>)
 8101146:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810114a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810114e:	4bb2      	ldr	r3, [pc, #712]	; (8101418 <main+0x2e0>)
 8101150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101158:	603b      	str	r3, [r7, #0]
 810115a:	683b      	ldr	r3, [r7, #0]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810115c:	2001      	movs	r0, #1
 810115e:	f002 fe55 	bl	8103e0c <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8101162:	f002 fedf 	bl	8103f24 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8101166:	2201      	movs	r2, #1
 8101168:	2102      	movs	r1, #2
 810116a:	2000      	movs	r0, #0
 810116c:	f002 fe60 	bl	8103e30 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101170:	4baa      	ldr	r3, [pc, #680]	; (810141c <main+0x2e4>)
 8101172:	681b      	ldr	r3, [r3, #0]
 8101174:	091b      	lsrs	r3, r3, #4
 8101176:	f003 030f 	and.w	r3, r3, #15
 810117a:	2b07      	cmp	r3, #7
 810117c:	d108      	bne.n	8101190 <main+0x58>
 810117e:	4ba8      	ldr	r3, [pc, #672]	; (8101420 <main+0x2e8>)
 8101180:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8101184:	4aa6      	ldr	r2, [pc, #664]	; (8101420 <main+0x2e8>)
 8101186:	f043 0301 	orr.w	r3, r3, #1
 810118a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810118e:	e007      	b.n	81011a0 <main+0x68>
 8101190:	4ba3      	ldr	r3, [pc, #652]	; (8101420 <main+0x2e8>)
 8101192:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8101196:	4aa2      	ldr	r2, [pc, #648]	; (8101420 <main+0x2e8>)
 8101198:	f043 0301 	orr.w	r3, r3, #1
 810119c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81011a0:	f000 ff3e 	bl	8102020 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81011a4:	f000 fb8a 	bl	81018bc <MX_GPIO_Init>
  MX_ADC1_Init();
 81011a8:	f000 f9b6 	bl	8101518 <MX_ADC1_Init>
  MX_TIM3_Init();
 81011ac:	f000 fa84 	bl	81016b8 <MX_TIM3_Init>
  MX_TIM2_Init();
 81011b0:	f000 fa2e 	bl	8101610 <MX_TIM2_Init>
  MX_TIM4_Init();
 81011b4:	f000 fada 	bl	810176c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  int timeout=50;
 81011b8:	2332      	movs	r3, #50	; 0x32
 81011ba:	60fb      	str	r3, [r7, #12]
  uint32_t CountValue;

 /* max_duty = 10.00;*/
  MX_USART3_UART_Init();
 81011bc:	f000 fb32 	bl	8101824 <MX_USART3_UART_Init>
  /*HAL_TIM_Base_Start_IT(&htim2);*/
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 81011c0:	213c      	movs	r1, #60	; 0x3c
 81011c2:	4898      	ldr	r0, [pc, #608]	; (8101424 <main+0x2ec>)
 81011c4:	f005 ff9e 	bl	8107104 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 81011c8:	2108      	movs	r1, #8
 81011ca:	4897      	ldr	r0, [pc, #604]	; (8101428 <main+0x2f0>)
 81011cc:	f005 fde6 	bl	8106d9c <HAL_TIM_PWM_Start>
  TIM3->CCR3 = (max_duty/100)*TIM3->ARR;
 81011d0:	4b96      	ldr	r3, [pc, #600]	; (810142c <main+0x2f4>)
 81011d2:	edd3 7a00 	vldr	s15, [r3]
 81011d6:	eddf 6a96 	vldr	s13, [pc, #600]	; 8101430 <main+0x2f8>
 81011da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 81011de:	4b95      	ldr	r3, [pc, #596]	; (8101434 <main+0x2fc>)
 81011e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81011e2:	ee07 3a90 	vmov	s15, r3
 81011e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81011ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 81011ee:	4b91      	ldr	r3, [pc, #580]	; (8101434 <main+0x2fc>)
 81011f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81011f4:	ee17 2a90 	vmov	r2, s15
 81011f8:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_Delay(2000);
 81011fa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 81011fe:	f000 ffc3 	bl	8102188 <HAL_Delay>
  TIM3->CCR3 = (min_duty/100)*TIM3->ARR;
 8101202:	4b8d      	ldr	r3, [pc, #564]	; (8101438 <main+0x300>)
 8101204:	edd3 7a00 	vldr	s15, [r3]
 8101208:	eddf 6a89 	vldr	s13, [pc, #548]	; 8101430 <main+0x2f8>
 810120c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8101210:	4b88      	ldr	r3, [pc, #544]	; (8101434 <main+0x2fc>)
 8101212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101214:	ee07 3a90 	vmov	s15, r3
 8101218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810121c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101220:	4b84      	ldr	r3, [pc, #528]	; (8101434 <main+0x2fc>)
 8101222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101226:	ee17 2a90 	vmov	r2, s15
 810122a:	63da      	str	r2, [r3, #60]	; 0x3c
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_Delay(1);
 810122c:	2001      	movs	r0, #1
 810122e:	f000 ffab 	bl	8102188 <HAL_Delay>

	  HAL_ADC_Start(&hadc1);
 8101232:	4882      	ldr	r0, [pc, #520]	; (810143c <main+0x304>)
 8101234:	f001 fb5c 	bl	81028f0 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,timeout);
 8101238:	68fb      	ldr	r3, [r7, #12]
 810123a:	4619      	mov	r1, r3
 810123c:	487f      	ldr	r0, [pc, #508]	; (810143c <main+0x304>)
 810123e:	f001 fc21 	bl	8102a84 <HAL_ADC_PollForConversion>
	  CountValue = HAL_ADC_GetValue(&hadc1);
 8101242:	487e      	ldr	r0, [pc, #504]	; (810143c <main+0x304>)
 8101244:	f001 fd12 	bl	8102c6c <HAL_ADC_GetValue>
 8101248:	60b8      	str	r0, [r7, #8]
	  Volt = CountValue*3.3/(65536-1);
 810124a:	68b8      	ldr	r0, [r7, #8]
 810124c:	f7ff f9e2 	bl	8100614 <__aeabi_ui2d>
 8101250:	a36d      	add	r3, pc, #436	; (adr r3, 8101408 <main+0x2d0>)
 8101252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101256:	f7ff fa57 	bl	8100708 <__aeabi_dmul>
 810125a:	4602      	mov	r2, r0
 810125c:	460b      	mov	r3, r1
 810125e:	4610      	mov	r0, r2
 8101260:	4619      	mov	r1, r3
 8101262:	a36b      	add	r3, pc, #428	; (adr r3, 8101410 <main+0x2d8>)
 8101264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101268:	f7ff fb78 	bl	810095c <__aeabi_ddiv>
 810126c:	4602      	mov	r2, r0
 810126e:	460b      	mov	r3, r1
 8101270:	4610      	mov	r0, r2
 8101272:	4619      	mov	r1, r3
 8101274:	f7ff fd40 	bl	8100cf8 <__aeabi_d2f>
 8101278:	4603      	mov	r3, r0
 810127a:	4a71      	ldr	r2, [pc, #452]	; (8101440 <main+0x308>)
 810127c:	6013      	str	r3, [r2, #0]


	  float duty = ((Volt/3.3)*((max_duty-min_duty)/100))+(min_duty/100);
 810127e:	4b70      	ldr	r3, [pc, #448]	; (8101440 <main+0x308>)
 8101280:	681b      	ldr	r3, [r3, #0]
 8101282:	4618      	mov	r0, r3
 8101284:	f7ff f9e8 	bl	8100658 <__aeabi_f2d>
 8101288:	a35f      	add	r3, pc, #380	; (adr r3, 8101408 <main+0x2d0>)
 810128a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810128e:	f7ff fb65 	bl	810095c <__aeabi_ddiv>
 8101292:	4602      	mov	r2, r0
 8101294:	460b      	mov	r3, r1
 8101296:	4614      	mov	r4, r2
 8101298:	461d      	mov	r5, r3
 810129a:	4b64      	ldr	r3, [pc, #400]	; (810142c <main+0x2f4>)
 810129c:	ed93 7a00 	vldr	s14, [r3]
 81012a0:	4b65      	ldr	r3, [pc, #404]	; (8101438 <main+0x300>)
 81012a2:	edd3 7a00 	vldr	s15, [r3]
 81012a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 81012aa:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8101430 <main+0x2f8>
 81012ae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 81012b2:	ee16 0a90 	vmov	r0, s13
 81012b6:	f7ff f9cf 	bl	8100658 <__aeabi_f2d>
 81012ba:	4602      	mov	r2, r0
 81012bc:	460b      	mov	r3, r1
 81012be:	4620      	mov	r0, r4
 81012c0:	4629      	mov	r1, r5
 81012c2:	f7ff fa21 	bl	8100708 <__aeabi_dmul>
 81012c6:	4602      	mov	r2, r0
 81012c8:	460b      	mov	r3, r1
 81012ca:	4614      	mov	r4, r2
 81012cc:	461d      	mov	r5, r3
 81012ce:	4b5a      	ldr	r3, [pc, #360]	; (8101438 <main+0x300>)
 81012d0:	edd3 7a00 	vldr	s15, [r3]
 81012d4:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8101430 <main+0x2f8>
 81012d8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 81012dc:	ee16 0a90 	vmov	r0, s13
 81012e0:	f7ff f9ba 	bl	8100658 <__aeabi_f2d>
 81012e4:	4602      	mov	r2, r0
 81012e6:	460b      	mov	r3, r1
 81012e8:	4620      	mov	r0, r4
 81012ea:	4629      	mov	r1, r5
 81012ec:	f7ff f856 	bl	810039c <__adddf3>
 81012f0:	4602      	mov	r2, r0
 81012f2:	460b      	mov	r3, r1
 81012f4:	4610      	mov	r0, r2
 81012f6:	4619      	mov	r1, r3
 81012f8:	f7ff fcfe 	bl	8100cf8 <__aeabi_d2f>
 81012fc:	4603      	mov	r3, r0
 81012fe:	607b      	str	r3, [r7, #4]

	  TIM3->CCR3=TIM3->ARR*duty;
 8101300:	4b4c      	ldr	r3, [pc, #304]	; (8101434 <main+0x2fc>)
 8101302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101304:	ee07 3a90 	vmov	s15, r3
 8101308:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810130c:	edd7 7a01 	vldr	s15, [r7, #4]
 8101310:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101314:	4b47      	ldr	r3, [pc, #284]	; (8101434 <main+0x2fc>)
 8101316:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810131a:	ee17 2a90 	vmov	r2, s15
 810131e:	63da      	str	r2, [r3, #60]	; 0x3c
	  HAL_Delay(10);
 8101320:	200a      	movs	r0, #10
 8101322:	f000 ff31 	bl	8102188 <HAL_Delay>



	  if(flag_100ms == 1){
 8101326:	4b47      	ldr	r3, [pc, #284]	; (8101444 <main+0x30c>)
 8101328:	681b      	ldr	r3, [r3, #0]
 810132a:	2b01      	cmp	r3, #1
 810132c:	f47f af7e 	bne.w	810122c <main+0xf4>
	 		  flag_100ms = 0;
 8101330:	4b44      	ldr	r3, [pc, #272]	; (8101444 <main+0x30c>)
 8101332:	2200      	movs	r2, #0
 8101334:	601a      	str	r2, [r3, #0]
	 		  counts = TIM2->CNT;
 8101336:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 810133a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810133c:	4a42      	ldr	r2, [pc, #264]	; (8101448 <main+0x310>)
 810133e:	6013      	str	r3, [r2, #0]

	 		  delta_angle = (double)counts * 360 / (ENCODER_PPR * ENCODER_COUNTING_MODE * GEARBOX_RATIO);
 8101340:	4b41      	ldr	r3, [pc, #260]	; (8101448 <main+0x310>)
 8101342:	681b      	ldr	r3, [r3, #0]
 8101344:	4618      	mov	r0, r3
 8101346:	f7ff f965 	bl	8100614 <__aeabi_ui2d>
 810134a:	f04f 0200 	mov.w	r2, #0
 810134e:	4b3f      	ldr	r3, [pc, #252]	; (810144c <main+0x314>)
 8101350:	f7ff f9da 	bl	8100708 <__aeabi_dmul>
 8101354:	4602      	mov	r2, r0
 8101356:	460b      	mov	r3, r1
 8101358:	4614      	mov	r4, r2
 810135a:	461d      	mov	r5, r3
 810135c:	4b3c      	ldr	r3, [pc, #240]	; (8101450 <main+0x318>)
 810135e:	681b      	ldr	r3, [r3, #0]
 8101360:	4a3c      	ldr	r2, [pc, #240]	; (8101454 <main+0x31c>)
 8101362:	6812      	ldr	r2, [r2, #0]
 8101364:	fb02 f303 	mul.w	r3, r2, r3
 8101368:	4a3b      	ldr	r2, [pc, #236]	; (8101458 <main+0x320>)
 810136a:	6812      	ldr	r2, [r2, #0]
 810136c:	fb02 f303 	mul.w	r3, r2, r3
 8101370:	4618      	mov	r0, r3
 8101372:	f7ff f95f 	bl	8100634 <__aeabi_i2d>
 8101376:	4602      	mov	r2, r0
 8101378:	460b      	mov	r3, r1
 810137a:	4620      	mov	r0, r4
 810137c:	4629      	mov	r1, r5
 810137e:	f7ff faed 	bl	810095c <__aeabi_ddiv>
 8101382:	4602      	mov	r2, r0
 8101384:	460b      	mov	r3, r1
 8101386:	4935      	ldr	r1, [pc, #212]	; (810145c <main+0x324>)
 8101388:	e9c1 2300 	strd	r2, r3, [r1]

	 		  diff_angle = delta_angle - old_delta_angle;
 810138c:	4b33      	ldr	r3, [pc, #204]	; (810145c <main+0x324>)
 810138e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8101392:	4b33      	ldr	r3, [pc, #204]	; (8101460 <main+0x328>)
 8101394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101398:	f7fe fffe 	bl	8100398 <__aeabi_dsub>
 810139c:	4602      	mov	r2, r0
 810139e:	460b      	mov	r3, r1
 81013a0:	4930      	ldr	r1, [pc, #192]	; (8101464 <main+0x32c>)
 81013a2:	e9c1 2300 	strd	r2, r3, [r1]
	 		  dir = (TIM2->CR1 & 0X0010)>>4;
 81013a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 81013aa:	681b      	ldr	r3, [r3, #0]
 81013ac:	091b      	lsrs	r3, r3, #4
 81013ae:	b2db      	uxtb	r3, r3
 81013b0:	f003 0301 	and.w	r3, r3, #1
 81013b4:	b2da      	uxtb	r2, r3
 81013b6:	4b2c      	ldr	r3, [pc, #176]	; (8101468 <main+0x330>)
 81013b8:	701a      	strb	r2, [r3, #0]
	 		  if(dir == old_dir){
 81013ba:	4b2b      	ldr	r3, [pc, #172]	; (8101468 <main+0x330>)
 81013bc:	781a      	ldrb	r2, [r3, #0]
 81013be:	4b2b      	ldr	r3, [pc, #172]	; (810146c <main+0x334>)
 81013c0:	781b      	ldrb	r3, [r3, #0]
 81013c2:	429a      	cmp	r2, r3
 81013c4:	d171      	bne.n	81014aa <main+0x372>
	 			  if(dir == 0 && diff_angle < 0){
 81013c6:	4b28      	ldr	r3, [pc, #160]	; (8101468 <main+0x330>)
 81013c8:	781b      	ldrb	r3, [r3, #0]
 81013ca:	2b00      	cmp	r3, #0
 81013cc:	d150      	bne.n	8101470 <main+0x338>
 81013ce:	4b25      	ldr	r3, [pc, #148]	; (8101464 <main+0x32c>)
 81013d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 81013d4:	f04f 0200 	mov.w	r2, #0
 81013d8:	f04f 0300 	mov.w	r3, #0
 81013dc:	f7ff fc06 	bl	8100bec <__aeabi_dcmplt>
 81013e0:	4603      	mov	r3, r0
 81013e2:	2b00      	cmp	r3, #0
 81013e4:	d044      	beq.n	8101470 <main+0x338>
	 				  diff_angle = 360 + diff_angle;
 81013e6:	4b1f      	ldr	r3, [pc, #124]	; (8101464 <main+0x32c>)
 81013e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 81013ec:	f04f 0200 	mov.w	r2, #0
 81013f0:	4b16      	ldr	r3, [pc, #88]	; (810144c <main+0x314>)
 81013f2:	f7fe ffd3 	bl	810039c <__adddf3>
 81013f6:	4602      	mov	r2, r0
 81013f8:	460b      	mov	r3, r1
 81013fa:	491a      	ldr	r1, [pc, #104]	; (8101464 <main+0x32c>)
 81013fc:	e9c1 2300 	strd	r2, r3, [r1]
 8101400:	e053      	b.n	81014aa <main+0x372>
 8101402:	bf00      	nop
 8101404:	f3af 8000 	nop.w
 8101408:	66666666 	.word	0x66666666
 810140c:	400a6666 	.word	0x400a6666
 8101410:	00000000 	.word	0x00000000
 8101414:	40efffe0 	.word	0x40efffe0
 8101418:	58024400 	.word	0x58024400
 810141c:	e000ed00 	.word	0xe000ed00
 8101420:	58026400 	.word	0x58026400
 8101424:	10000280 	.word	0x10000280
 8101428:	100002cc 	.word	0x100002cc
 810142c:	1000000c 	.word	0x1000000c
 8101430:	42c80000 	.word	0x42c80000
 8101434:	40000400 	.word	0x40000400
 8101438:	10000008 	.word	0x10000008
 810143c:	1000021c 	.word	0x1000021c
 8101440:	100003f8 	.word	0x100003f8
 8101444:	10000420 	.word	0x10000420
 8101448:	10000424 	.word	0x10000424
 810144c:	40768000 	.word	0x40768000
 8101450:	10000018 	.word	0x10000018
 8101454:	1000001c 	.word	0x1000001c
 8101458:	10000020 	.word	0x10000020
 810145c:	10000400 	.word	0x10000400
 8101460:	10000408 	.word	0x10000408
 8101464:	10000418 	.word	0x10000418
 8101468:	10000428 	.word	0x10000428
 810146c:	10000429 	.word	0x10000429
	 			  } else if (dir == 1 && diff_angle > 0){
 8101470:	4b20      	ldr	r3, [pc, #128]	; (81014f4 <main+0x3bc>)
 8101472:	781b      	ldrb	r3, [r3, #0]
 8101474:	2b01      	cmp	r3, #1
 8101476:	d118      	bne.n	81014aa <main+0x372>
 8101478:	4b1f      	ldr	r3, [pc, #124]	; (81014f8 <main+0x3c0>)
 810147a:	e9d3 0100 	ldrd	r0, r1, [r3]
 810147e:	f04f 0200 	mov.w	r2, #0
 8101482:	f04f 0300 	mov.w	r3, #0
 8101486:	f7ff fbcf 	bl	8100c28 <__aeabi_dcmpgt>
 810148a:	4603      	mov	r3, r0
 810148c:	2b00      	cmp	r3, #0
 810148e:	d00c      	beq.n	81014aa <main+0x372>
	 				  diff_angle =diff_angle - 360;
 8101490:	4b19      	ldr	r3, [pc, #100]	; (81014f8 <main+0x3c0>)
 8101492:	e9d3 0100 	ldrd	r0, r1, [r3]
 8101496:	f04f 0200 	mov.w	r2, #0
 810149a:	4b18      	ldr	r3, [pc, #96]	; (81014fc <main+0x3c4>)
 810149c:	f7fe ff7c 	bl	8100398 <__aeabi_dsub>
 81014a0:	4602      	mov	r2, r0
 81014a2:	460b      	mov	r3, r1
 81014a4:	4914      	ldr	r1, [pc, #80]	; (81014f8 <main+0x3c0>)
 81014a6:	e9c1 2300 	strd	r2, r3, [r1]
	 			  }

	 		  }
	 		  speed = diff_angle/dt;
 81014aa:	4b13      	ldr	r3, [pc, #76]	; (81014f8 <main+0x3c0>)
 81014ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 81014b0:	4b13      	ldr	r3, [pc, #76]	; (8101500 <main+0x3c8>)
 81014b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81014b6:	f7ff fa51 	bl	810095c <__aeabi_ddiv>
 81014ba:	4602      	mov	r2, r0
 81014bc:	460b      	mov	r3, r1
 81014be:	4911      	ldr	r1, [pc, #68]	; (8101504 <main+0x3cc>)
 81014c0:	e9c1 2300 	strd	r2, r3, [r1]

	 		  old_delta_angle = delta_angle;
 81014c4:	4b10      	ldr	r3, [pc, #64]	; (8101508 <main+0x3d0>)
 81014c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81014ca:	4910      	ldr	r1, [pc, #64]	; (810150c <main+0x3d4>)
 81014cc:	e9c1 2300 	strd	r2, r3, [r1]
	 		  old_dir = dir;
 81014d0:	4b08      	ldr	r3, [pc, #32]	; (81014f4 <main+0x3bc>)
 81014d2:	781a      	ldrb	r2, [r3, #0]
 81014d4:	4b0e      	ldr	r3, [pc, #56]	; (8101510 <main+0x3d8>)
 81014d6:	701a      	strb	r2, [r3, #0]
	 		  printf("%f;%f\r\n", delta_angle, speed);
 81014d8:	4b0b      	ldr	r3, [pc, #44]	; (8101508 <main+0x3d0>)
 81014da:	e9d3 0100 	ldrd	r0, r1, [r3]
 81014de:	4b09      	ldr	r3, [pc, #36]	; (8101504 <main+0x3cc>)
 81014e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81014e4:	e9cd 2300 	strd	r2, r3, [sp]
 81014e8:	4602      	mov	r2, r0
 81014ea:	460b      	mov	r3, r1
 81014ec:	4809      	ldr	r0, [pc, #36]	; (8101514 <main+0x3dc>)
 81014ee:	f008 fd43 	bl	8109f78 <iprintf>
  {
 81014f2:	e69b      	b.n	810122c <main+0xf4>
 81014f4:	10000428 	.word	0x10000428
 81014f8:	10000418 	.word	0x10000418
 81014fc:	40768000 	.word	0x40768000
 8101500:	10000010 	.word	0x10000010
 8101504:	10000410 	.word	0x10000410
 8101508:	10000400 	.word	0x10000400
 810150c:	10000408 	.word	0x10000408
 8101510:	10000429 	.word	0x10000429
 8101514:	0810dbb0 	.word	0x0810dbb0

08101518 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8101518:	b580      	push	{r7, lr}
 810151a:	b08a      	sub	sp, #40	; 0x28
 810151c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 810151e:	f107 031c 	add.w	r3, r7, #28
 8101522:	2200      	movs	r2, #0
 8101524:	601a      	str	r2, [r3, #0]
 8101526:	605a      	str	r2, [r3, #4]
 8101528:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 810152a:	463b      	mov	r3, r7
 810152c:	2200      	movs	r2, #0
 810152e:	601a      	str	r2, [r3, #0]
 8101530:	605a      	str	r2, [r3, #4]
 8101532:	609a      	str	r2, [r3, #8]
 8101534:	60da      	str	r2, [r3, #12]
 8101536:	611a      	str	r2, [r3, #16]
 8101538:	615a      	str	r2, [r3, #20]
 810153a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 810153c:	4b31      	ldr	r3, [pc, #196]	; (8101604 <MX_ADC1_Init+0xec>)
 810153e:	4a32      	ldr	r2, [pc, #200]	; (8101608 <MX_ADC1_Init+0xf0>)
 8101540:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8101542:	4b30      	ldr	r3, [pc, #192]	; (8101604 <MX_ADC1_Init+0xec>)
 8101544:	2200      	movs	r2, #0
 8101546:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8101548:	4b2e      	ldr	r3, [pc, #184]	; (8101604 <MX_ADC1_Init+0xec>)
 810154a:	2200      	movs	r2, #0
 810154c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 810154e:	4b2d      	ldr	r3, [pc, #180]	; (8101604 <MX_ADC1_Init+0xec>)
 8101550:	2200      	movs	r2, #0
 8101552:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8101554:	4b2b      	ldr	r3, [pc, #172]	; (8101604 <MX_ADC1_Init+0xec>)
 8101556:	2204      	movs	r2, #4
 8101558:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 810155a:	4b2a      	ldr	r3, [pc, #168]	; (8101604 <MX_ADC1_Init+0xec>)
 810155c:	2200      	movs	r2, #0
 810155e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8101560:	4b28      	ldr	r3, [pc, #160]	; (8101604 <MX_ADC1_Init+0xec>)
 8101562:	2200      	movs	r2, #0
 8101564:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8101566:	4b27      	ldr	r3, [pc, #156]	; (8101604 <MX_ADC1_Init+0xec>)
 8101568:	2201      	movs	r2, #1
 810156a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 810156c:	4b25      	ldr	r3, [pc, #148]	; (8101604 <MX_ADC1_Init+0xec>)
 810156e:	2201      	movs	r2, #1
 8101570:	771a      	strb	r2, [r3, #28]
  hadc1.Init.NbrOfDiscConversion = 1;
 8101572:	4b24      	ldr	r3, [pc, #144]	; (8101604 <MX_ADC1_Init+0xec>)
 8101574:	2201      	movs	r2, #1
 8101576:	621a      	str	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8101578:	4b22      	ldr	r3, [pc, #136]	; (8101604 <MX_ADC1_Init+0xec>)
 810157a:	2200      	movs	r2, #0
 810157c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 810157e:	4b21      	ldr	r3, [pc, #132]	; (8101604 <MX_ADC1_Init+0xec>)
 8101580:	2200      	movs	r2, #0
 8101582:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8101584:	4b1f      	ldr	r3, [pc, #124]	; (8101604 <MX_ADC1_Init+0xec>)
 8101586:	2200      	movs	r2, #0
 8101588:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 810158a:	4b1e      	ldr	r3, [pc, #120]	; (8101604 <MX_ADC1_Init+0xec>)
 810158c:	2200      	movs	r2, #0
 810158e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8101590:	4b1c      	ldr	r3, [pc, #112]	; (8101604 <MX_ADC1_Init+0xec>)
 8101592:	2200      	movs	r2, #0
 8101594:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8101596:	4b1b      	ldr	r3, [pc, #108]	; (8101604 <MX_ADC1_Init+0xec>)
 8101598:	2200      	movs	r2, #0
 810159a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 810159e:	4819      	ldr	r0, [pc, #100]	; (8101604 <MX_ADC1_Init+0xec>)
 81015a0:	f001 f804 	bl	81025ac <HAL_ADC_Init>
 81015a4:	4603      	mov	r3, r0
 81015a6:	2b00      	cmp	r3, #0
 81015a8:	d001      	beq.n	81015ae <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 81015aa:	f000 fa0d 	bl	81019c8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 81015ae:	2300      	movs	r3, #0
 81015b0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 81015b2:	f107 031c 	add.w	r3, r7, #28
 81015b6:	4619      	mov	r1, r3
 81015b8:	4812      	ldr	r0, [pc, #72]	; (8101604 <MX_ADC1_Init+0xec>)
 81015ba:	f002 f871 	bl	81036a0 <HAL_ADCEx_MultiModeConfigChannel>
 81015be:	4603      	mov	r3, r0
 81015c0:	2b00      	cmp	r3, #0
 81015c2:	d001      	beq.n	81015c8 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 81015c4:	f000 fa00 	bl	81019c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 81015c8:	4b10      	ldr	r3, [pc, #64]	; (810160c <MX_ADC1_Init+0xf4>)
 81015ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 81015cc:	2306      	movs	r3, #6
 81015ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 81015d0:	2300      	movs	r3, #0
 81015d2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 81015d4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 81015d8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 81015da:	2304      	movs	r3, #4
 81015dc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 81015de:	2300      	movs	r3, #0
 81015e0:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 81015e2:	2300      	movs	r3, #0
 81015e4:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81015e6:	463b      	mov	r3, r7
 81015e8:	4619      	mov	r1, r3
 81015ea:	4806      	ldr	r0, [pc, #24]	; (8101604 <MX_ADC1_Init+0xec>)
 81015ec:	f001 fb4c 	bl	8102c88 <HAL_ADC_ConfigChannel>
 81015f0:	4603      	mov	r3, r0
 81015f2:	2b00      	cmp	r3, #0
 81015f4:	d001      	beq.n	81015fa <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 81015f6:	f000 f9e7 	bl	81019c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 81015fa:	bf00      	nop
 81015fc:	3728      	adds	r7, #40	; 0x28
 81015fe:	46bd      	mov	sp, r7
 8101600:	bd80      	pop	{r7, pc}
 8101602:	bf00      	nop
 8101604:	1000021c 	.word	0x1000021c
 8101608:	40022000 	.word	0x40022000
 810160c:	3ef08000 	.word	0x3ef08000

08101610 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8101610:	b580      	push	{r7, lr}
 8101612:	b08c      	sub	sp, #48	; 0x30
 8101614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8101616:	f107 030c 	add.w	r3, r7, #12
 810161a:	2224      	movs	r2, #36	; 0x24
 810161c:	2100      	movs	r1, #0
 810161e:	4618      	mov	r0, r3
 8101620:	f007 fe28 	bl	8109274 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8101624:	463b      	mov	r3, r7
 8101626:	2200      	movs	r2, #0
 8101628:	601a      	str	r2, [r3, #0]
 810162a:	605a      	str	r2, [r3, #4]
 810162c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 810162e:	4b21      	ldr	r3, [pc, #132]	; (81016b4 <MX_TIM2_Init+0xa4>)
 8101630:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8101634:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8101636:	4b1f      	ldr	r3, [pc, #124]	; (81016b4 <MX_TIM2_Init+0xa4>)
 8101638:	2200      	movs	r2, #0
 810163a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 810163c:	4b1d      	ldr	r3, [pc, #116]	; (81016b4 <MX_TIM2_Init+0xa4>)
 810163e:	2200      	movs	r2, #0
 8101640:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2652-1;
 8101642:	4b1c      	ldr	r3, [pc, #112]	; (81016b4 <MX_TIM2_Init+0xa4>)
 8101644:	f640 225b 	movw	r2, #2651	; 0xa5b
 8101648:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 810164a:	4b1a      	ldr	r3, [pc, #104]	; (81016b4 <MX_TIM2_Init+0xa4>)
 810164c:	2200      	movs	r2, #0
 810164e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8101650:	4b18      	ldr	r3, [pc, #96]	; (81016b4 <MX_TIM2_Init+0xa4>)
 8101652:	2200      	movs	r2, #0
 8101654:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8101656:	2303      	movs	r3, #3
 8101658:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 810165a:	2300      	movs	r3, #0
 810165c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 810165e:	2301      	movs	r3, #1
 8101660:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8101662:	2300      	movs	r3, #0
 8101664:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8101666:	230a      	movs	r3, #10
 8101668:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 810166a:	2300      	movs	r3, #0
 810166c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 810166e:	2301      	movs	r3, #1
 8101670:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8101672:	2300      	movs	r3, #0
 8101674:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8101676:	2300      	movs	r3, #0
 8101678:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 810167a:	f107 030c 	add.w	r3, r7, #12
 810167e:	4619      	mov	r1, r3
 8101680:	480c      	ldr	r0, [pc, #48]	; (81016b4 <MX_TIM2_Init+0xa4>)
 8101682:	f005 fc99 	bl	8106fb8 <HAL_TIM_Encoder_Init>
 8101686:	4603      	mov	r3, r0
 8101688:	2b00      	cmp	r3, #0
 810168a:	d001      	beq.n	8101690 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 810168c:	f000 f99c 	bl	81019c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8101690:	2300      	movs	r3, #0
 8101692:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8101694:	2300      	movs	r3, #0
 8101696:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8101698:	463b      	mov	r3, r7
 810169a:	4619      	mov	r1, r3
 810169c:	4805      	ldr	r0, [pc, #20]	; (81016b4 <MX_TIM2_Init+0xa4>)
 810169e:	f006 fbb1 	bl	8107e04 <HAL_TIMEx_MasterConfigSynchronization>
 81016a2:	4603      	mov	r3, r0
 81016a4:	2b00      	cmp	r3, #0
 81016a6:	d001      	beq.n	81016ac <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 81016a8:	f000 f98e 	bl	81019c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 81016ac:	bf00      	nop
 81016ae:	3730      	adds	r7, #48	; 0x30
 81016b0:	46bd      	mov	sp, r7
 81016b2:	bd80      	pop	{r7, pc}
 81016b4:	10000280 	.word	0x10000280

081016b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 81016b8:	b580      	push	{r7, lr}
 81016ba:	b08a      	sub	sp, #40	; 0x28
 81016bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81016be:	f107 031c 	add.w	r3, r7, #28
 81016c2:	2200      	movs	r2, #0
 81016c4:	601a      	str	r2, [r3, #0]
 81016c6:	605a      	str	r2, [r3, #4]
 81016c8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 81016ca:	463b      	mov	r3, r7
 81016cc:	2200      	movs	r2, #0
 81016ce:	601a      	str	r2, [r3, #0]
 81016d0:	605a      	str	r2, [r3, #4]
 81016d2:	609a      	str	r2, [r3, #8]
 81016d4:	60da      	str	r2, [r3, #12]
 81016d6:	611a      	str	r2, [r3, #16]
 81016d8:	615a      	str	r2, [r3, #20]
 81016da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 81016dc:	4b21      	ldr	r3, [pc, #132]	; (8101764 <MX_TIM3_Init+0xac>)
 81016de:	4a22      	ldr	r2, [pc, #136]	; (8101768 <MX_TIM3_Init+0xb0>)
 81016e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 81016e2:	4b20      	ldr	r3, [pc, #128]	; (8101764 <MX_TIM3_Init+0xac>)
 81016e4:	22c7      	movs	r2, #199	; 0xc7
 81016e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 81016e8:	4b1e      	ldr	r3, [pc, #120]	; (8101764 <MX_TIM3_Init+0xac>)
 81016ea:	2200      	movs	r2, #0
 81016ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 81016ee:	4b1d      	ldr	r3, [pc, #116]	; (8101764 <MX_TIM3_Init+0xac>)
 81016f0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 81016f4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81016f6:	4b1b      	ldr	r3, [pc, #108]	; (8101764 <MX_TIM3_Init+0xac>)
 81016f8:	2200      	movs	r2, #0
 81016fa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81016fc:	4b19      	ldr	r3, [pc, #100]	; (8101764 <MX_TIM3_Init+0xac>)
 81016fe:	2200      	movs	r2, #0
 8101700:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8101702:	4818      	ldr	r0, [pc, #96]	; (8101764 <MX_TIM3_Init+0xac>)
 8101704:	f005 faf2 	bl	8106cec <HAL_TIM_PWM_Init>
 8101708:	4603      	mov	r3, r0
 810170a:	2b00      	cmp	r3, #0
 810170c:	d001      	beq.n	8101712 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 810170e:	f000 f95b 	bl	81019c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8101712:	2300      	movs	r3, #0
 8101714:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8101716:	2300      	movs	r3, #0
 8101718:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 810171a:	f107 031c 	add.w	r3, r7, #28
 810171e:	4619      	mov	r1, r3
 8101720:	4810      	ldr	r0, [pc, #64]	; (8101764 <MX_TIM3_Init+0xac>)
 8101722:	f006 fb6f 	bl	8107e04 <HAL_TIMEx_MasterConfigSynchronization>
 8101726:	4603      	mov	r3, r0
 8101728:	2b00      	cmp	r3, #0
 810172a:	d001      	beq.n	8101730 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 810172c:	f000 f94c 	bl	81019c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8101730:	2360      	movs	r3, #96	; 0x60
 8101732:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8101734:	2300      	movs	r3, #0
 8101736:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8101738:	2300      	movs	r3, #0
 810173a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 810173c:	2300      	movs	r3, #0
 810173e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8101740:	463b      	mov	r3, r7
 8101742:	2208      	movs	r2, #8
 8101744:	4619      	mov	r1, r3
 8101746:	4807      	ldr	r0, [pc, #28]	; (8101764 <MX_TIM3_Init+0xac>)
 8101748:	f005 fe8a 	bl	8107460 <HAL_TIM_PWM_ConfigChannel>
 810174c:	4603      	mov	r3, r0
 810174e:	2b00      	cmp	r3, #0
 8101750:	d001      	beq.n	8101756 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8101752:	f000 f939 	bl	81019c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8101756:	4803      	ldr	r0, [pc, #12]	; (8101764 <MX_TIM3_Init+0xac>)
 8101758:	f000 fa70 	bl	8101c3c <HAL_TIM_MspPostInit>

}
 810175c:	bf00      	nop
 810175e:	3728      	adds	r7, #40	; 0x28
 8101760:	46bd      	mov	sp, r7
 8101762:	bd80      	pop	{r7, pc}
 8101764:	100002cc 	.word	0x100002cc
 8101768:	40000400 	.word	0x40000400

0810176c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 810176c:	b580      	push	{r7, lr}
 810176e:	b08a      	sub	sp, #40	; 0x28
 8101770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8101772:	f107 031c 	add.w	r3, r7, #28
 8101776:	2200      	movs	r2, #0
 8101778:	601a      	str	r2, [r3, #0]
 810177a:	605a      	str	r2, [r3, #4]
 810177c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 810177e:	463b      	mov	r3, r7
 8101780:	2200      	movs	r2, #0
 8101782:	601a      	str	r2, [r3, #0]
 8101784:	605a      	str	r2, [r3, #4]
 8101786:	609a      	str	r2, [r3, #8]
 8101788:	60da      	str	r2, [r3, #12]
 810178a:	611a      	str	r2, [r3, #16]
 810178c:	615a      	str	r2, [r3, #20]
 810178e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8101790:	4b22      	ldr	r3, [pc, #136]	; (810181c <MX_TIM4_Init+0xb0>)
 8101792:	4a23      	ldr	r2, [pc, #140]	; (8101820 <MX_TIM4_Init+0xb4>)
 8101794:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2000-1;
 8101796:	4b21      	ldr	r3, [pc, #132]	; (810181c <MX_TIM4_Init+0xb0>)
 8101798:	f240 72cf 	movw	r2, #1999	; 0x7cf
 810179c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 810179e:	4b1f      	ldr	r3, [pc, #124]	; (810181c <MX_TIM4_Init+0xb0>)
 81017a0:	2200      	movs	r2, #0
 81017a2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 81017a4:	4b1d      	ldr	r3, [pc, #116]	; (810181c <MX_TIM4_Init+0xb0>)
 81017a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 81017aa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81017ac:	4b1b      	ldr	r3, [pc, #108]	; (810181c <MX_TIM4_Init+0xb0>)
 81017ae:	2200      	movs	r2, #0
 81017b0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81017b2:	4b1a      	ldr	r3, [pc, #104]	; (810181c <MX_TIM4_Init+0xb0>)
 81017b4:	2200      	movs	r2, #0
 81017b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 81017b8:	4818      	ldr	r0, [pc, #96]	; (810181c <MX_TIM4_Init+0xb0>)
 81017ba:	f005 fa97 	bl	8106cec <HAL_TIM_PWM_Init>
 81017be:	4603      	mov	r3, r0
 81017c0:	2b00      	cmp	r3, #0
 81017c2:	d001      	beq.n	81017c8 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 81017c4:	f000 f900 	bl	81019c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81017c8:	2300      	movs	r3, #0
 81017ca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81017cc:	2300      	movs	r3, #0
 81017ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 81017d0:	f107 031c 	add.w	r3, r7, #28
 81017d4:	4619      	mov	r1, r3
 81017d6:	4811      	ldr	r0, [pc, #68]	; (810181c <MX_TIM4_Init+0xb0>)
 81017d8:	f006 fb14 	bl	8107e04 <HAL_TIMEx_MasterConfigSynchronization>
 81017dc:	4603      	mov	r3, r0
 81017de:	2b00      	cmp	r3, #0
 81017e0:	d001      	beq.n	81017e6 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 81017e2:	f000 f8f1 	bl	81019c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 81017e6:	2360      	movs	r3, #96	; 0x60
 81017e8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 81017ea:	2300      	movs	r3, #0
 81017ec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 81017ee:	2300      	movs	r3, #0
 81017f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 81017f2:	2300      	movs	r3, #0
 81017f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 81017f6:	463b      	mov	r3, r7
 81017f8:	220c      	movs	r2, #12
 81017fa:	4619      	mov	r1, r3
 81017fc:	4807      	ldr	r0, [pc, #28]	; (810181c <MX_TIM4_Init+0xb0>)
 81017fe:	f005 fe2f 	bl	8107460 <HAL_TIM_PWM_ConfigChannel>
 8101802:	4603      	mov	r3, r0
 8101804:	2b00      	cmp	r3, #0
 8101806:	d001      	beq.n	810180c <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8101808:	f000 f8de 	bl	81019c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 810180c:	4803      	ldr	r0, [pc, #12]	; (810181c <MX_TIM4_Init+0xb0>)
 810180e:	f000 fa15 	bl	8101c3c <HAL_TIM_MspPostInit>

}
 8101812:	bf00      	nop
 8101814:	3728      	adds	r7, #40	; 0x28
 8101816:	46bd      	mov	sp, r7
 8101818:	bd80      	pop	{r7, pc}
 810181a:	bf00      	nop
 810181c:	10000318 	.word	0x10000318
 8101820:	40000800 	.word	0x40000800

08101824 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 8101824:	b580      	push	{r7, lr}
 8101826:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8101828:	4b22      	ldr	r3, [pc, #136]	; (81018b4 <MX_USART3_UART_Init+0x90>)
 810182a:	4a23      	ldr	r2, [pc, #140]	; (81018b8 <MX_USART3_UART_Init+0x94>)
 810182c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 810182e:	4b21      	ldr	r3, [pc, #132]	; (81018b4 <MX_USART3_UART_Init+0x90>)
 8101830:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8101834:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8101836:	4b1f      	ldr	r3, [pc, #124]	; (81018b4 <MX_USART3_UART_Init+0x90>)
 8101838:	2200      	movs	r2, #0
 810183a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 810183c:	4b1d      	ldr	r3, [pc, #116]	; (81018b4 <MX_USART3_UART_Init+0x90>)
 810183e:	2200      	movs	r2, #0
 8101840:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8101842:	4b1c      	ldr	r3, [pc, #112]	; (81018b4 <MX_USART3_UART_Init+0x90>)
 8101844:	2200      	movs	r2, #0
 8101846:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8101848:	4b1a      	ldr	r3, [pc, #104]	; (81018b4 <MX_USART3_UART_Init+0x90>)
 810184a:	220c      	movs	r2, #12
 810184c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 810184e:	4b19      	ldr	r3, [pc, #100]	; (81018b4 <MX_USART3_UART_Init+0x90>)
 8101850:	2200      	movs	r2, #0
 8101852:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8101854:	4b17      	ldr	r3, [pc, #92]	; (81018b4 <MX_USART3_UART_Init+0x90>)
 8101856:	2200      	movs	r2, #0
 8101858:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 810185a:	4b16      	ldr	r3, [pc, #88]	; (81018b4 <MX_USART3_UART_Init+0x90>)
 810185c:	2200      	movs	r2, #0
 810185e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8101860:	4b14      	ldr	r3, [pc, #80]	; (81018b4 <MX_USART3_UART_Init+0x90>)
 8101862:	2200      	movs	r2, #0
 8101864:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8101866:	4b13      	ldr	r3, [pc, #76]	; (81018b4 <MX_USART3_UART_Init+0x90>)
 8101868:	2200      	movs	r2, #0
 810186a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 810186c:	4811      	ldr	r0, [pc, #68]	; (81018b4 <MX_USART3_UART_Init+0x90>)
 810186e:	f006 fb75 	bl	8107f5c <HAL_UART_Init>
 8101872:	4603      	mov	r3, r0
 8101874:	2b00      	cmp	r3, #0
 8101876:	d001      	beq.n	810187c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8101878:	f000 f8a6 	bl	81019c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 810187c:	2100      	movs	r1, #0
 810187e:	480d      	ldr	r0, [pc, #52]	; (81018b4 <MX_USART3_UART_Init+0x90>)
 8101880:	f007 fc04 	bl	810908c <HAL_UARTEx_SetTxFifoThreshold>
 8101884:	4603      	mov	r3, r0
 8101886:	2b00      	cmp	r3, #0
 8101888:	d001      	beq.n	810188e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 810188a:	f000 f89d 	bl	81019c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 810188e:	2100      	movs	r1, #0
 8101890:	4808      	ldr	r0, [pc, #32]	; (81018b4 <MX_USART3_UART_Init+0x90>)
 8101892:	f007 fc39 	bl	8109108 <HAL_UARTEx_SetRxFifoThreshold>
 8101896:	4603      	mov	r3, r0
 8101898:	2b00      	cmp	r3, #0
 810189a:	d001      	beq.n	81018a0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 810189c:	f000 f894 	bl	81019c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 81018a0:	4804      	ldr	r0, [pc, #16]	; (81018b4 <MX_USART3_UART_Init+0x90>)
 81018a2:	f007 fbba 	bl	810901a <HAL_UARTEx_DisableFifoMode>
 81018a6:	4603      	mov	r3, r0
 81018a8:	2b00      	cmp	r3, #0
 81018aa:	d001      	beq.n	81018b0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 81018ac:	f000 f88c 	bl	81019c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 81018b0:	bf00      	nop
 81018b2:	bd80      	pop	{r7, pc}
 81018b4:	10000364 	.word	0x10000364
 81018b8:	40004800 	.word	0x40004800

081018bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81018bc:	b580      	push	{r7, lr}
 81018be:	b08a      	sub	sp, #40	; 0x28
 81018c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81018c2:	f107 0314 	add.w	r3, r7, #20
 81018c6:	2200      	movs	r2, #0
 81018c8:	601a      	str	r2, [r3, #0]
 81018ca:	605a      	str	r2, [r3, #4]
 81018cc:	609a      	str	r2, [r3, #8]
 81018ce:	60da      	str	r2, [r3, #12]
 81018d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 81018d2:	4b27      	ldr	r3, [pc, #156]	; (8101970 <MX_GPIO_Init+0xb4>)
 81018d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81018d8:	4a25      	ldr	r2, [pc, #148]	; (8101970 <MX_GPIO_Init+0xb4>)
 81018da:	f043 0304 	orr.w	r3, r3, #4
 81018de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81018e2:	4b23      	ldr	r3, [pc, #140]	; (8101970 <MX_GPIO_Init+0xb4>)
 81018e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81018e8:	f003 0304 	and.w	r3, r3, #4
 81018ec:	613b      	str	r3, [r7, #16]
 81018ee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81018f0:	4b1f      	ldr	r3, [pc, #124]	; (8101970 <MX_GPIO_Init+0xb4>)
 81018f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81018f6:	4a1e      	ldr	r2, [pc, #120]	; (8101970 <MX_GPIO_Init+0xb4>)
 81018f8:	f043 0301 	orr.w	r3, r3, #1
 81018fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101900:	4b1b      	ldr	r3, [pc, #108]	; (8101970 <MX_GPIO_Init+0xb4>)
 8101902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101906:	f003 0301 	and.w	r3, r3, #1
 810190a:	60fb      	str	r3, [r7, #12]
 810190c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 810190e:	4b18      	ldr	r3, [pc, #96]	; (8101970 <MX_GPIO_Init+0xb4>)
 8101910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101914:	4a16      	ldr	r2, [pc, #88]	; (8101970 <MX_GPIO_Init+0xb4>)
 8101916:	f043 0302 	orr.w	r3, r3, #2
 810191a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810191e:	4b14      	ldr	r3, [pc, #80]	; (8101970 <MX_GPIO_Init+0xb4>)
 8101920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101924:	f003 0302 	and.w	r3, r3, #2
 8101928:	60bb      	str	r3, [r7, #8]
 810192a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 810192c:	4b10      	ldr	r3, [pc, #64]	; (8101970 <MX_GPIO_Init+0xb4>)
 810192e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101932:	4a0f      	ldr	r2, [pc, #60]	; (8101970 <MX_GPIO_Init+0xb4>)
 8101934:	f043 0308 	orr.w	r3, r3, #8
 8101938:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810193c:	4b0c      	ldr	r3, [pc, #48]	; (8101970 <MX_GPIO_Init+0xb4>)
 810193e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101942:	f003 0308 	and.w	r3, r3, #8
 8101946:	607b      	str	r3, [r7, #4]
 8101948:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 810194a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 810194e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8101950:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8101954:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101956:	2300      	movs	r3, #0
 8101958:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 810195a:	f107 0314 	add.w	r3, r7, #20
 810195e:	4619      	mov	r1, r3
 8101960:	4804      	ldr	r0, [pc, #16]	; (8101974 <MX_GPIO_Init+0xb8>)
 8101962:	f002 f8a3 	bl	8103aac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8101966:	bf00      	nop
 8101968:	3728      	adds	r7, #40	; 0x28
 810196a:	46bd      	mov	sp, r7
 810196c:	bd80      	pop	{r7, pc}
 810196e:	bf00      	nop
 8101970:	58024400 	.word	0x58024400
 8101974:	58020800 	.word	0x58020800

08101978 <HAL_TIM_PeriodElapsedCallback>:

	}
}
*/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8101978:	b480      	push	{r7}
 810197a:	b083      	sub	sp, #12
 810197c:	af00      	add	r7, sp, #0
 810197e:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8101980:	687b      	ldr	r3, [r7, #4]
 8101982:	4a06      	ldr	r2, [pc, #24]	; (810199c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8101984:	4293      	cmp	r3, r2
 8101986:	d102      	bne.n	810198e <HAL_TIM_PeriodElapsedCallback+0x16>

		flag_100ms = 1;
 8101988:	4b05      	ldr	r3, [pc, #20]	; (81019a0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 810198a:	2201      	movs	r2, #1
 810198c:	601a      	str	r2, [r3, #0]
	}

}
 810198e:	bf00      	nop
 8101990:	370c      	adds	r7, #12
 8101992:	46bd      	mov	sp, r7
 8101994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101998:	4770      	bx	lr
 810199a:	bf00      	nop
 810199c:	10000280 	.word	0x10000280
 81019a0:	10000420 	.word	0x10000420

081019a4 <__io_putchar>:
	}
}



int __io_putchar(int ch){
 81019a4:	b580      	push	{r7, lr}
 81019a6:	b082      	sub	sp, #8
 81019a8:	af00      	add	r7, sp, #0
 81019aa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, 0xFFFF);
 81019ac:	1d39      	adds	r1, r7, #4
 81019ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 81019b2:	2201      	movs	r2, #1
 81019b4:	4803      	ldr	r0, [pc, #12]	; (81019c4 <__io_putchar+0x20>)
 81019b6:	f006 fb21 	bl	8107ffc <HAL_UART_Transmit>
	return ch;
 81019ba:	687b      	ldr	r3, [r7, #4]
}
 81019bc:	4618      	mov	r0, r3
 81019be:	3708      	adds	r7, #8
 81019c0:	46bd      	mov	sp, r7
 81019c2:	bd80      	pop	{r7, pc}
 81019c4:	10000364 	.word	0x10000364

081019c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81019c8:	b480      	push	{r7}
 81019ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81019cc:	b672      	cpsid	i
}
 81019ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81019d0:	e7fe      	b.n	81019d0 <Error_Handler+0x8>
	...

081019d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81019d4:	b480      	push	{r7}
 81019d6:	b083      	sub	sp, #12
 81019d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81019da:	4b0a      	ldr	r3, [pc, #40]	; (8101a04 <HAL_MspInit+0x30>)
 81019dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81019e0:	4a08      	ldr	r2, [pc, #32]	; (8101a04 <HAL_MspInit+0x30>)
 81019e2:	f043 0302 	orr.w	r3, r3, #2
 81019e6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81019ea:	4b06      	ldr	r3, [pc, #24]	; (8101a04 <HAL_MspInit+0x30>)
 81019ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81019f0:	f003 0302 	and.w	r3, r3, #2
 81019f4:	607b      	str	r3, [r7, #4]
 81019f6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81019f8:	bf00      	nop
 81019fa:	370c      	adds	r7, #12
 81019fc:	46bd      	mov	sp, r7
 81019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a02:	4770      	bx	lr
 8101a04:	58024400 	.word	0x58024400

08101a08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8101a08:	b580      	push	{r7, lr}
 8101a0a:	b0ba      	sub	sp, #232	; 0xe8
 8101a0c:	af00      	add	r7, sp, #0
 8101a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101a10:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101a14:	2200      	movs	r2, #0
 8101a16:	601a      	str	r2, [r3, #0]
 8101a18:	605a      	str	r2, [r3, #4]
 8101a1a:	609a      	str	r2, [r3, #8]
 8101a1c:	60da      	str	r2, [r3, #12]
 8101a1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101a20:	f107 0310 	add.w	r3, r7, #16
 8101a24:	22c0      	movs	r2, #192	; 0xc0
 8101a26:	2100      	movs	r1, #0
 8101a28:	4618      	mov	r0, r3
 8101a2a:	f007 fc23 	bl	8109274 <memset>
  if(hadc->Instance==ADC1)
 8101a2e:	687b      	ldr	r3, [r7, #4]
 8101a30:	681b      	ldr	r3, [r3, #0]
 8101a32:	4a2b      	ldr	r2, [pc, #172]	; (8101ae0 <HAL_ADC_MspInit+0xd8>)
 8101a34:	4293      	cmp	r3, r2
 8101a36:	d14f      	bne.n	8101ad8 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8101a38:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8101a3c:	f04f 0300 	mov.w	r3, #0
 8101a40:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8101a44:	2301      	movs	r3, #1
 8101a46:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 8101a48:	2313      	movs	r3, #19
 8101a4a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8101a4c:	2302      	movs	r3, #2
 8101a4e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8101a50:	2302      	movs	r3, #2
 8101a52:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8101a54:	2302      	movs	r3, #2
 8101a56:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8101a58:	23c0      	movs	r3, #192	; 0xc0
 8101a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8101a5c:	2320      	movs	r3, #32
 8101a5e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8101a60:	2300      	movs	r3, #0
 8101a62:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8101a64:	2300      	movs	r3, #0
 8101a66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101a6a:	f107 0310 	add.w	r3, r7, #16
 8101a6e:	4618      	mov	r0, r3
 8101a70:	f002 fc3e 	bl	81042f0 <HAL_RCCEx_PeriphCLKConfig>
 8101a74:	4603      	mov	r3, r0
 8101a76:	2b00      	cmp	r3, #0
 8101a78:	d001      	beq.n	8101a7e <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8101a7a:	f7ff ffa5 	bl	81019c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8101a7e:	4b19      	ldr	r3, [pc, #100]	; (8101ae4 <HAL_ADC_MspInit+0xdc>)
 8101a80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101a84:	4a17      	ldr	r2, [pc, #92]	; (8101ae4 <HAL_ADC_MspInit+0xdc>)
 8101a86:	f043 0320 	orr.w	r3, r3, #32
 8101a8a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101a8e:	4b15      	ldr	r3, [pc, #84]	; (8101ae4 <HAL_ADC_MspInit+0xdc>)
 8101a90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101a94:	f003 0320 	and.w	r3, r3, #32
 8101a98:	60fb      	str	r3, [r7, #12]
 8101a9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101a9c:	4b11      	ldr	r3, [pc, #68]	; (8101ae4 <HAL_ADC_MspInit+0xdc>)
 8101a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101aa2:	4a10      	ldr	r2, [pc, #64]	; (8101ae4 <HAL_ADC_MspInit+0xdc>)
 8101aa4:	f043 0301 	orr.w	r3, r3, #1
 8101aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101aac:	4b0d      	ldr	r3, [pc, #52]	; (8101ae4 <HAL_ADC_MspInit+0xdc>)
 8101aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ab2:	f003 0301 	and.w	r3, r3, #1
 8101ab6:	60bb      	str	r3, [r7, #8]
 8101ab8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8101aba:	2308      	movs	r3, #8
 8101abc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8101ac0:	2303      	movs	r3, #3
 8101ac2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101ac6:	2300      	movs	r3, #0
 8101ac8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101acc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101ad0:	4619      	mov	r1, r3
 8101ad2:	4805      	ldr	r0, [pc, #20]	; (8101ae8 <HAL_ADC_MspInit+0xe0>)
 8101ad4:	f001 ffea 	bl	8103aac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8101ad8:	bf00      	nop
 8101ada:	37e8      	adds	r7, #232	; 0xe8
 8101adc:	46bd      	mov	sp, r7
 8101ade:	bd80      	pop	{r7, pc}
 8101ae0:	40022000 	.word	0x40022000
 8101ae4:	58024400 	.word	0x58024400
 8101ae8:	58020000 	.word	0x58020000

08101aec <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8101aec:	b580      	push	{r7, lr}
 8101aee:	b08a      	sub	sp, #40	; 0x28
 8101af0:	af00      	add	r7, sp, #0
 8101af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101af4:	f107 0314 	add.w	r3, r7, #20
 8101af8:	2200      	movs	r2, #0
 8101afa:	601a      	str	r2, [r3, #0]
 8101afc:	605a      	str	r2, [r3, #4]
 8101afe:	609a      	str	r2, [r3, #8]
 8101b00:	60da      	str	r2, [r3, #12]
 8101b02:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8101b04:	687b      	ldr	r3, [r7, #4]
 8101b06:	681b      	ldr	r3, [r3, #0]
 8101b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101b0c:	d14c      	bne.n	8101ba8 <HAL_TIM_Encoder_MspInit+0xbc>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8101b0e:	4b28      	ldr	r3, [pc, #160]	; (8101bb0 <HAL_TIM_Encoder_MspInit+0xc4>)
 8101b10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101b14:	4a26      	ldr	r2, [pc, #152]	; (8101bb0 <HAL_TIM_Encoder_MspInit+0xc4>)
 8101b16:	f043 0301 	orr.w	r3, r3, #1
 8101b1a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101b1e:	4b24      	ldr	r3, [pc, #144]	; (8101bb0 <HAL_TIM_Encoder_MspInit+0xc4>)
 8101b20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101b24:	f003 0301 	and.w	r3, r3, #1
 8101b28:	613b      	str	r3, [r7, #16]
 8101b2a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101b2c:	4b20      	ldr	r3, [pc, #128]	; (8101bb0 <HAL_TIM_Encoder_MspInit+0xc4>)
 8101b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b32:	4a1f      	ldr	r2, [pc, #124]	; (8101bb0 <HAL_TIM_Encoder_MspInit+0xc4>)
 8101b34:	f043 0301 	orr.w	r3, r3, #1
 8101b38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101b3c:	4b1c      	ldr	r3, [pc, #112]	; (8101bb0 <HAL_TIM_Encoder_MspInit+0xc4>)
 8101b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b42:	f003 0301 	and.w	r3, r3, #1
 8101b46:	60fb      	str	r3, [r7, #12]
 8101b48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101b4a:	4b19      	ldr	r3, [pc, #100]	; (8101bb0 <HAL_TIM_Encoder_MspInit+0xc4>)
 8101b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b50:	4a17      	ldr	r2, [pc, #92]	; (8101bb0 <HAL_TIM_Encoder_MspInit+0xc4>)
 8101b52:	f043 0302 	orr.w	r3, r3, #2
 8101b56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101b5a:	4b15      	ldr	r3, [pc, #84]	; (8101bb0 <HAL_TIM_Encoder_MspInit+0xc4>)
 8101b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b60:	f003 0302 	and.w	r3, r3, #2
 8101b64:	60bb      	str	r3, [r7, #8]
 8101b66:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8101b68:	2301      	movs	r3, #1
 8101b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101b6c:	2302      	movs	r3, #2
 8101b6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101b70:	2300      	movs	r3, #0
 8101b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101b74:	2300      	movs	r3, #0
 8101b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8101b78:	2301      	movs	r3, #1
 8101b7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101b7c:	f107 0314 	add.w	r3, r7, #20
 8101b80:	4619      	mov	r1, r3
 8101b82:	480c      	ldr	r0, [pc, #48]	; (8101bb4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8101b84:	f001 ff92 	bl	8103aac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8101b88:	2308      	movs	r3, #8
 8101b8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101b8c:	2302      	movs	r3, #2
 8101b8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101b90:	2300      	movs	r3, #0
 8101b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101b94:	2300      	movs	r3, #0
 8101b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8101b98:	2301      	movs	r3, #1
 8101b9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101b9c:	f107 0314 	add.w	r3, r7, #20
 8101ba0:	4619      	mov	r1, r3
 8101ba2:	4805      	ldr	r0, [pc, #20]	; (8101bb8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8101ba4:	f001 ff82 	bl	8103aac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8101ba8:	bf00      	nop
 8101baa:	3728      	adds	r7, #40	; 0x28
 8101bac:	46bd      	mov	sp, r7
 8101bae:	bd80      	pop	{r7, pc}
 8101bb0:	58024400 	.word	0x58024400
 8101bb4:	58020000 	.word	0x58020000
 8101bb8:	58020400 	.word	0x58020400

08101bbc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8101bbc:	b580      	push	{r7, lr}
 8101bbe:	b084      	sub	sp, #16
 8101bc0:	af00      	add	r7, sp, #0
 8101bc2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8101bc4:	687b      	ldr	r3, [r7, #4]
 8101bc6:	681b      	ldr	r3, [r3, #0]
 8101bc8:	4a19      	ldr	r2, [pc, #100]	; (8101c30 <HAL_TIM_PWM_MspInit+0x74>)
 8101bca:	4293      	cmp	r3, r2
 8101bcc:	d117      	bne.n	8101bfe <HAL_TIM_PWM_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8101bce:	4b19      	ldr	r3, [pc, #100]	; (8101c34 <HAL_TIM_PWM_MspInit+0x78>)
 8101bd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101bd4:	4a17      	ldr	r2, [pc, #92]	; (8101c34 <HAL_TIM_PWM_MspInit+0x78>)
 8101bd6:	f043 0302 	orr.w	r3, r3, #2
 8101bda:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101bde:	4b15      	ldr	r3, [pc, #84]	; (8101c34 <HAL_TIM_PWM_MspInit+0x78>)
 8101be0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101be4:	f003 0302 	and.w	r3, r3, #2
 8101be8:	60fb      	str	r3, [r7, #12]
 8101bea:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8101bec:	2200      	movs	r2, #0
 8101bee:	2100      	movs	r1, #0
 8101bf0:	201d      	movs	r0, #29
 8101bf2:	f001 ff12 	bl	8103a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8101bf6:	201d      	movs	r0, #29
 8101bf8:	f001 ff29 	bl	8103a4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8101bfc:	e013      	b.n	8101c26 <HAL_TIM_PWM_MspInit+0x6a>
  else if(htim_pwm->Instance==TIM4)
 8101bfe:	687b      	ldr	r3, [r7, #4]
 8101c00:	681b      	ldr	r3, [r3, #0]
 8101c02:	4a0d      	ldr	r2, [pc, #52]	; (8101c38 <HAL_TIM_PWM_MspInit+0x7c>)
 8101c04:	4293      	cmp	r3, r2
 8101c06:	d10e      	bne.n	8101c26 <HAL_TIM_PWM_MspInit+0x6a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8101c08:	4b0a      	ldr	r3, [pc, #40]	; (8101c34 <HAL_TIM_PWM_MspInit+0x78>)
 8101c0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101c0e:	4a09      	ldr	r2, [pc, #36]	; (8101c34 <HAL_TIM_PWM_MspInit+0x78>)
 8101c10:	f043 0304 	orr.w	r3, r3, #4
 8101c14:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101c18:	4b06      	ldr	r3, [pc, #24]	; (8101c34 <HAL_TIM_PWM_MspInit+0x78>)
 8101c1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101c1e:	f003 0304 	and.w	r3, r3, #4
 8101c22:	60bb      	str	r3, [r7, #8]
 8101c24:	68bb      	ldr	r3, [r7, #8]
}
 8101c26:	bf00      	nop
 8101c28:	3710      	adds	r7, #16
 8101c2a:	46bd      	mov	sp, r7
 8101c2c:	bd80      	pop	{r7, pc}
 8101c2e:	bf00      	nop
 8101c30:	40000400 	.word	0x40000400
 8101c34:	58024400 	.word	0x58024400
 8101c38:	40000800 	.word	0x40000800

08101c3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8101c3c:	b580      	push	{r7, lr}
 8101c3e:	b08a      	sub	sp, #40	; 0x28
 8101c40:	af00      	add	r7, sp, #0
 8101c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101c44:	f107 0314 	add.w	r3, r7, #20
 8101c48:	2200      	movs	r2, #0
 8101c4a:	601a      	str	r2, [r3, #0]
 8101c4c:	605a      	str	r2, [r3, #4]
 8101c4e:	609a      	str	r2, [r3, #8]
 8101c50:	60da      	str	r2, [r3, #12]
 8101c52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8101c54:	687b      	ldr	r3, [r7, #4]
 8101c56:	681b      	ldr	r3, [r3, #0]
 8101c58:	4a25      	ldr	r2, [pc, #148]	; (8101cf0 <HAL_TIM_MspPostInit+0xb4>)
 8101c5a:	4293      	cmp	r3, r2
 8101c5c:	d11f      	bne.n	8101c9e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101c5e:	4b25      	ldr	r3, [pc, #148]	; (8101cf4 <HAL_TIM_MspPostInit+0xb8>)
 8101c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c64:	4a23      	ldr	r2, [pc, #140]	; (8101cf4 <HAL_TIM_MspPostInit+0xb8>)
 8101c66:	f043 0302 	orr.w	r3, r3, #2
 8101c6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101c6e:	4b21      	ldr	r3, [pc, #132]	; (8101cf4 <HAL_TIM_MspPostInit+0xb8>)
 8101c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c74:	f003 0302 	and.w	r3, r3, #2
 8101c78:	613b      	str	r3, [r7, #16]
 8101c7a:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8101c7c:	2301      	movs	r3, #1
 8101c7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101c80:	2302      	movs	r3, #2
 8101c82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101c84:	2300      	movs	r3, #0
 8101c86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101c88:	2300      	movs	r3, #0
 8101c8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8101c8c:	2302      	movs	r3, #2
 8101c8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101c90:	f107 0314 	add.w	r3, r7, #20
 8101c94:	4619      	mov	r1, r3
 8101c96:	4818      	ldr	r0, [pc, #96]	; (8101cf8 <HAL_TIM_MspPostInit+0xbc>)
 8101c98:	f001 ff08 	bl	8103aac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8101c9c:	e024      	b.n	8101ce8 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM4)
 8101c9e:	687b      	ldr	r3, [r7, #4]
 8101ca0:	681b      	ldr	r3, [r3, #0]
 8101ca2:	4a16      	ldr	r2, [pc, #88]	; (8101cfc <HAL_TIM_MspPostInit+0xc0>)
 8101ca4:	4293      	cmp	r3, r2
 8101ca6:	d11f      	bne.n	8101ce8 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101ca8:	4b12      	ldr	r3, [pc, #72]	; (8101cf4 <HAL_TIM_MspPostInit+0xb8>)
 8101caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101cae:	4a11      	ldr	r2, [pc, #68]	; (8101cf4 <HAL_TIM_MspPostInit+0xb8>)
 8101cb0:	f043 0308 	orr.w	r3, r3, #8
 8101cb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101cb8:	4b0e      	ldr	r3, [pc, #56]	; (8101cf4 <HAL_TIM_MspPostInit+0xb8>)
 8101cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101cbe:	f003 0308 	and.w	r3, r3, #8
 8101cc2:	60fb      	str	r3, [r7, #12]
 8101cc4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8101cc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8101cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101ccc:	2302      	movs	r3, #2
 8101cce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101cd0:	2300      	movs	r3, #0
 8101cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101cd4:	2300      	movs	r3, #0
 8101cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8101cd8:	2302      	movs	r3, #2
 8101cda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101cdc:	f107 0314 	add.w	r3, r7, #20
 8101ce0:	4619      	mov	r1, r3
 8101ce2:	4807      	ldr	r0, [pc, #28]	; (8101d00 <HAL_TIM_MspPostInit+0xc4>)
 8101ce4:	f001 fee2 	bl	8103aac <HAL_GPIO_Init>
}
 8101ce8:	bf00      	nop
 8101cea:	3728      	adds	r7, #40	; 0x28
 8101cec:	46bd      	mov	sp, r7
 8101cee:	bd80      	pop	{r7, pc}
 8101cf0:	40000400 	.word	0x40000400
 8101cf4:	58024400 	.word	0x58024400
 8101cf8:	58020400 	.word	0x58020400
 8101cfc:	40000800 	.word	0x40000800
 8101d00:	58020c00 	.word	0x58020c00

08101d04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8101d04:	b580      	push	{r7, lr}
 8101d06:	b0ba      	sub	sp, #232	; 0xe8
 8101d08:	af00      	add	r7, sp, #0
 8101d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101d0c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101d10:	2200      	movs	r2, #0
 8101d12:	601a      	str	r2, [r3, #0]
 8101d14:	605a      	str	r2, [r3, #4]
 8101d16:	609a      	str	r2, [r3, #8]
 8101d18:	60da      	str	r2, [r3, #12]
 8101d1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101d1c:	f107 0310 	add.w	r3, r7, #16
 8101d20:	22c0      	movs	r2, #192	; 0xc0
 8101d22:	2100      	movs	r1, #0
 8101d24:	4618      	mov	r0, r3
 8101d26:	f007 faa5 	bl	8109274 <memset>
  if(huart->Instance==USART3)
 8101d2a:	687b      	ldr	r3, [r7, #4]
 8101d2c:	681b      	ldr	r3, [r3, #0]
 8101d2e:	4a27      	ldr	r2, [pc, #156]	; (8101dcc <HAL_UART_MspInit+0xc8>)
 8101d30:	4293      	cmp	r3, r2
 8101d32:	d146      	bne.n	8101dc2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8101d34:	f04f 0202 	mov.w	r2, #2
 8101d38:	f04f 0300 	mov.w	r3, #0
 8101d3c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8101d40:	2300      	movs	r3, #0
 8101d42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101d46:	f107 0310 	add.w	r3, r7, #16
 8101d4a:	4618      	mov	r0, r3
 8101d4c:	f002 fad0 	bl	81042f0 <HAL_RCCEx_PeriphCLKConfig>
 8101d50:	4603      	mov	r3, r0
 8101d52:	2b00      	cmp	r3, #0
 8101d54:	d001      	beq.n	8101d5a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8101d56:	f7ff fe37 	bl	81019c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8101d5a:	4b1d      	ldr	r3, [pc, #116]	; (8101dd0 <HAL_UART_MspInit+0xcc>)
 8101d5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101d60:	4a1b      	ldr	r2, [pc, #108]	; (8101dd0 <HAL_UART_MspInit+0xcc>)
 8101d62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8101d66:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101d6a:	4b19      	ldr	r3, [pc, #100]	; (8101dd0 <HAL_UART_MspInit+0xcc>)
 8101d6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101d70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8101d74:	60fb      	str	r3, [r7, #12]
 8101d76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101d78:	4b15      	ldr	r3, [pc, #84]	; (8101dd0 <HAL_UART_MspInit+0xcc>)
 8101d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d7e:	4a14      	ldr	r2, [pc, #80]	; (8101dd0 <HAL_UART_MspInit+0xcc>)
 8101d80:	f043 0308 	orr.w	r3, r3, #8
 8101d84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101d88:	4b11      	ldr	r3, [pc, #68]	; (8101dd0 <HAL_UART_MspInit+0xcc>)
 8101d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d8e:	f003 0308 	and.w	r3, r3, #8
 8101d92:	60bb      	str	r3, [r7, #8]
 8101d94:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8101d96:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101d9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101d9e:	2302      	movs	r3, #2
 8101da0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101da4:	2300      	movs	r3, #0
 8101da6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101daa:	2300      	movs	r3, #0
 8101dac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8101db0:	2307      	movs	r3, #7
 8101db2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101db6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101dba:	4619      	mov	r1, r3
 8101dbc:	4805      	ldr	r0, [pc, #20]	; (8101dd4 <HAL_UART_MspInit+0xd0>)
 8101dbe:	f001 fe75 	bl	8103aac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8101dc2:	bf00      	nop
 8101dc4:	37e8      	adds	r7, #232	; 0xe8
 8101dc6:	46bd      	mov	sp, r7
 8101dc8:	bd80      	pop	{r7, pc}
 8101dca:	bf00      	nop
 8101dcc:	40004800 	.word	0x40004800
 8101dd0:	58024400 	.word	0x58024400
 8101dd4:	58020c00 	.word	0x58020c00

08101dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101dd8:	b480      	push	{r7}
 8101dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101ddc:	e7fe      	b.n	8101ddc <NMI_Handler+0x4>

08101dde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101dde:	b480      	push	{r7}
 8101de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101de2:	e7fe      	b.n	8101de2 <HardFault_Handler+0x4>

08101de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101de4:	b480      	push	{r7}
 8101de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101de8:	e7fe      	b.n	8101de8 <MemManage_Handler+0x4>

08101dea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101dea:	b480      	push	{r7}
 8101dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101dee:	e7fe      	b.n	8101dee <BusFault_Handler+0x4>

08101df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101df0:	b480      	push	{r7}
 8101df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101df4:	e7fe      	b.n	8101df4 <UsageFault_Handler+0x4>

08101df6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8101df6:	b480      	push	{r7}
 8101df8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8101dfa:	bf00      	nop
 8101dfc:	46bd      	mov	sp, r7
 8101dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e02:	4770      	bx	lr

08101e04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101e04:	b480      	push	{r7}
 8101e06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101e08:	bf00      	nop
 8101e0a:	46bd      	mov	sp, r7
 8101e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e10:	4770      	bx	lr

08101e12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101e12:	b480      	push	{r7}
 8101e14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8101e16:	bf00      	nop
 8101e18:	46bd      	mov	sp, r7
 8101e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e1e:	4770      	bx	lr

08101e20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101e20:	b580      	push	{r7, lr}
 8101e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101e24:	f000 f990 	bl	8102148 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8101e28:	bf00      	nop
 8101e2a:	bd80      	pop	{r7, pc}

08101e2c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8101e2c:	b580      	push	{r7, lr}
 8101e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8101e30:	4802      	ldr	r0, [pc, #8]	; (8101e3c <TIM3_IRQHandler+0x10>)
 8101e32:	f005 f9f5 	bl	8107220 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8101e36:	bf00      	nop
 8101e38:	bd80      	pop	{r7, pc}
 8101e3a:	bf00      	nop
 8101e3c:	100002cc 	.word	0x100002cc

08101e40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8101e40:	b480      	push	{r7}
 8101e42:	af00      	add	r7, sp, #0
  return 1;
 8101e44:	2301      	movs	r3, #1
}
 8101e46:	4618      	mov	r0, r3
 8101e48:	46bd      	mov	sp, r7
 8101e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e4e:	4770      	bx	lr

08101e50 <_kill>:

int _kill(int pid, int sig)
{
 8101e50:	b580      	push	{r7, lr}
 8101e52:	b082      	sub	sp, #8
 8101e54:	af00      	add	r7, sp, #0
 8101e56:	6078      	str	r0, [r7, #4]
 8101e58:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8101e5a:	f007 f9e1 	bl	8109220 <__errno>
 8101e5e:	4603      	mov	r3, r0
 8101e60:	2216      	movs	r2, #22
 8101e62:	601a      	str	r2, [r3, #0]
  return -1;
 8101e64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8101e68:	4618      	mov	r0, r3
 8101e6a:	3708      	adds	r7, #8
 8101e6c:	46bd      	mov	sp, r7
 8101e6e:	bd80      	pop	{r7, pc}

08101e70 <_exit>:

void _exit (int status)
{
 8101e70:	b580      	push	{r7, lr}
 8101e72:	b082      	sub	sp, #8
 8101e74:	af00      	add	r7, sp, #0
 8101e76:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8101e78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8101e7c:	6878      	ldr	r0, [r7, #4]
 8101e7e:	f7ff ffe7 	bl	8101e50 <_kill>
  while (1) {}    /* Make sure we hang here */
 8101e82:	e7fe      	b.n	8101e82 <_exit+0x12>

08101e84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8101e84:	b580      	push	{r7, lr}
 8101e86:	b086      	sub	sp, #24
 8101e88:	af00      	add	r7, sp, #0
 8101e8a:	60f8      	str	r0, [r7, #12]
 8101e8c:	60b9      	str	r1, [r7, #8]
 8101e8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101e90:	2300      	movs	r3, #0
 8101e92:	617b      	str	r3, [r7, #20]
 8101e94:	e00a      	b.n	8101eac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8101e96:	f3af 8000 	nop.w
 8101e9a:	4601      	mov	r1, r0
 8101e9c:	68bb      	ldr	r3, [r7, #8]
 8101e9e:	1c5a      	adds	r2, r3, #1
 8101ea0:	60ba      	str	r2, [r7, #8]
 8101ea2:	b2ca      	uxtb	r2, r1
 8101ea4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101ea6:	697b      	ldr	r3, [r7, #20]
 8101ea8:	3301      	adds	r3, #1
 8101eaa:	617b      	str	r3, [r7, #20]
 8101eac:	697a      	ldr	r2, [r7, #20]
 8101eae:	687b      	ldr	r3, [r7, #4]
 8101eb0:	429a      	cmp	r2, r3
 8101eb2:	dbf0      	blt.n	8101e96 <_read+0x12>
  }

  return len;
 8101eb4:	687b      	ldr	r3, [r7, #4]
}
 8101eb6:	4618      	mov	r0, r3
 8101eb8:	3718      	adds	r7, #24
 8101eba:	46bd      	mov	sp, r7
 8101ebc:	bd80      	pop	{r7, pc}

08101ebe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8101ebe:	b580      	push	{r7, lr}
 8101ec0:	b086      	sub	sp, #24
 8101ec2:	af00      	add	r7, sp, #0
 8101ec4:	60f8      	str	r0, [r7, #12]
 8101ec6:	60b9      	str	r1, [r7, #8]
 8101ec8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101eca:	2300      	movs	r3, #0
 8101ecc:	617b      	str	r3, [r7, #20]
 8101ece:	e009      	b.n	8101ee4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8101ed0:	68bb      	ldr	r3, [r7, #8]
 8101ed2:	1c5a      	adds	r2, r3, #1
 8101ed4:	60ba      	str	r2, [r7, #8]
 8101ed6:	781b      	ldrb	r3, [r3, #0]
 8101ed8:	4618      	mov	r0, r3
 8101eda:	f7ff fd63 	bl	81019a4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101ede:	697b      	ldr	r3, [r7, #20]
 8101ee0:	3301      	adds	r3, #1
 8101ee2:	617b      	str	r3, [r7, #20]
 8101ee4:	697a      	ldr	r2, [r7, #20]
 8101ee6:	687b      	ldr	r3, [r7, #4]
 8101ee8:	429a      	cmp	r2, r3
 8101eea:	dbf1      	blt.n	8101ed0 <_write+0x12>
  }
  return len;
 8101eec:	687b      	ldr	r3, [r7, #4]
}
 8101eee:	4618      	mov	r0, r3
 8101ef0:	3718      	adds	r7, #24
 8101ef2:	46bd      	mov	sp, r7
 8101ef4:	bd80      	pop	{r7, pc}

08101ef6 <_close>:

int _close(int file)
{
 8101ef6:	b480      	push	{r7}
 8101ef8:	b083      	sub	sp, #12
 8101efa:	af00      	add	r7, sp, #0
 8101efc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8101efe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8101f02:	4618      	mov	r0, r3
 8101f04:	370c      	adds	r7, #12
 8101f06:	46bd      	mov	sp, r7
 8101f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f0c:	4770      	bx	lr

08101f0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8101f0e:	b480      	push	{r7}
 8101f10:	b083      	sub	sp, #12
 8101f12:	af00      	add	r7, sp, #0
 8101f14:	6078      	str	r0, [r7, #4]
 8101f16:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8101f18:	683b      	ldr	r3, [r7, #0]
 8101f1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8101f1e:	605a      	str	r2, [r3, #4]
  return 0;
 8101f20:	2300      	movs	r3, #0
}
 8101f22:	4618      	mov	r0, r3
 8101f24:	370c      	adds	r7, #12
 8101f26:	46bd      	mov	sp, r7
 8101f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f2c:	4770      	bx	lr

08101f2e <_isatty>:

int _isatty(int file)
{
 8101f2e:	b480      	push	{r7}
 8101f30:	b083      	sub	sp, #12
 8101f32:	af00      	add	r7, sp, #0
 8101f34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8101f36:	2301      	movs	r3, #1
}
 8101f38:	4618      	mov	r0, r3
 8101f3a:	370c      	adds	r7, #12
 8101f3c:	46bd      	mov	sp, r7
 8101f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f42:	4770      	bx	lr

08101f44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8101f44:	b480      	push	{r7}
 8101f46:	b085      	sub	sp, #20
 8101f48:	af00      	add	r7, sp, #0
 8101f4a:	60f8      	str	r0, [r7, #12]
 8101f4c:	60b9      	str	r1, [r7, #8]
 8101f4e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8101f50:	2300      	movs	r3, #0
}
 8101f52:	4618      	mov	r0, r3
 8101f54:	3714      	adds	r7, #20
 8101f56:	46bd      	mov	sp, r7
 8101f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f5c:	4770      	bx	lr
	...

08101f60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8101f60:	b580      	push	{r7, lr}
 8101f62:	b086      	sub	sp, #24
 8101f64:	af00      	add	r7, sp, #0
 8101f66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8101f68:	4a14      	ldr	r2, [pc, #80]	; (8101fbc <_sbrk+0x5c>)
 8101f6a:	4b15      	ldr	r3, [pc, #84]	; (8101fc0 <_sbrk+0x60>)
 8101f6c:	1ad3      	subs	r3, r2, r3
 8101f6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8101f70:	697b      	ldr	r3, [r7, #20]
 8101f72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8101f74:	4b13      	ldr	r3, [pc, #76]	; (8101fc4 <_sbrk+0x64>)
 8101f76:	681b      	ldr	r3, [r3, #0]
 8101f78:	2b00      	cmp	r3, #0
 8101f7a:	d102      	bne.n	8101f82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8101f7c:	4b11      	ldr	r3, [pc, #68]	; (8101fc4 <_sbrk+0x64>)
 8101f7e:	4a12      	ldr	r2, [pc, #72]	; (8101fc8 <_sbrk+0x68>)
 8101f80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8101f82:	4b10      	ldr	r3, [pc, #64]	; (8101fc4 <_sbrk+0x64>)
 8101f84:	681a      	ldr	r2, [r3, #0]
 8101f86:	687b      	ldr	r3, [r7, #4]
 8101f88:	4413      	add	r3, r2
 8101f8a:	693a      	ldr	r2, [r7, #16]
 8101f8c:	429a      	cmp	r2, r3
 8101f8e:	d207      	bcs.n	8101fa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8101f90:	f007 f946 	bl	8109220 <__errno>
 8101f94:	4603      	mov	r3, r0
 8101f96:	220c      	movs	r2, #12
 8101f98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8101f9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8101f9e:	e009      	b.n	8101fb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8101fa0:	4b08      	ldr	r3, [pc, #32]	; (8101fc4 <_sbrk+0x64>)
 8101fa2:	681b      	ldr	r3, [r3, #0]
 8101fa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8101fa6:	4b07      	ldr	r3, [pc, #28]	; (8101fc4 <_sbrk+0x64>)
 8101fa8:	681a      	ldr	r2, [r3, #0]
 8101faa:	687b      	ldr	r3, [r7, #4]
 8101fac:	4413      	add	r3, r2
 8101fae:	4a05      	ldr	r2, [pc, #20]	; (8101fc4 <_sbrk+0x64>)
 8101fb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8101fb2:	68fb      	ldr	r3, [r7, #12]
}
 8101fb4:	4618      	mov	r0, r3
 8101fb6:	3718      	adds	r7, #24
 8101fb8:	46bd      	mov	sp, r7
 8101fba:	bd80      	pop	{r7, pc}
 8101fbc:	10048000 	.word	0x10048000
 8101fc0:	00000400 	.word	0x00000400
 8101fc4:	1000042c 	.word	0x1000042c
 8101fc8:	10000448 	.word	0x10000448

08101fcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101fcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8102004 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8101fd0:	f7ff f89a 	bl	8101108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101fd4:	480c      	ldr	r0, [pc, #48]	; (8102008 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8101fd6:	490d      	ldr	r1, [pc, #52]	; (810200c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101fd8:	4a0d      	ldr	r2, [pc, #52]	; (8102010 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101fdc:	e002      	b.n	8101fe4 <LoopCopyDataInit>

08101fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8101fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8101fe2:	3304      	adds	r3, #4

08101fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101fe8:	d3f9      	bcc.n	8101fde <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101fea:	4a0a      	ldr	r2, [pc, #40]	; (8102014 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101fec:	4c0a      	ldr	r4, [pc, #40]	; (8102018 <LoopFillZerobss+0x22>)
  movs r3, #0
 8101fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101ff0:	e001      	b.n	8101ff6 <LoopFillZerobss>

08101ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8101ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101ff4:	3204      	adds	r2, #4

08101ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8101ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101ff8:	d3fb      	bcc.n	8101ff2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101ffa:	f007 f917 	bl	810922c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101ffe:	f7ff f89b 	bl	8101138 <main>
  bx  lr
 8102002:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8102004:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8102008:	10000000 	.word	0x10000000
  ldr r1, =_edata
 810200c:	10000200 	.word	0x10000200
  ldr r2, =_sidata
 8102010:	0810e0bc 	.word	0x0810e0bc
  ldr r2, =_sbss
 8102014:	10000200 	.word	0x10000200
  ldr r4, =_ebss
 8102018:	10000444 	.word	0x10000444

0810201c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 810201c:	e7fe      	b.n	810201c <ADC3_IRQHandler>
	...

08102020 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8102020:	b580      	push	{r7, lr}
 8102022:	b082      	sub	sp, #8
 8102024:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8102026:	4b28      	ldr	r3, [pc, #160]	; (81020c8 <HAL_Init+0xa8>)
 8102028:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810202c:	4a26      	ldr	r2, [pc, #152]	; (81020c8 <HAL_Init+0xa8>)
 810202e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8102032:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8102036:	4b24      	ldr	r3, [pc, #144]	; (81020c8 <HAL_Init+0xa8>)
 8102038:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810203c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102040:	603b      	str	r3, [r7, #0]
 8102042:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102044:	4b21      	ldr	r3, [pc, #132]	; (81020cc <HAL_Init+0xac>)
 8102046:	681b      	ldr	r3, [r3, #0]
 8102048:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 810204c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102050:	4a1e      	ldr	r2, [pc, #120]	; (81020cc <HAL_Init+0xac>)
 8102052:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8102056:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102058:	4b1c      	ldr	r3, [pc, #112]	; (81020cc <HAL_Init+0xac>)
 810205a:	681b      	ldr	r3, [r3, #0]
 810205c:	4a1b      	ldr	r2, [pc, #108]	; (81020cc <HAL_Init+0xac>)
 810205e:	f043 0301 	orr.w	r3, r3, #1
 8102062:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8102064:	2003      	movs	r0, #3
 8102066:	f001 fccd 	bl	8103a04 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810206a:	f001 ff69 	bl	8103f40 <HAL_RCC_GetSysClockFreq>
 810206e:	4602      	mov	r2, r0
 8102070:	4b15      	ldr	r3, [pc, #84]	; (81020c8 <HAL_Init+0xa8>)
 8102072:	699b      	ldr	r3, [r3, #24]
 8102074:	0a1b      	lsrs	r3, r3, #8
 8102076:	f003 030f 	and.w	r3, r3, #15
 810207a:	4915      	ldr	r1, [pc, #84]	; (81020d0 <HAL_Init+0xb0>)
 810207c:	5ccb      	ldrb	r3, [r1, r3]
 810207e:	f003 031f 	and.w	r3, r3, #31
 8102082:	fa22 f303 	lsr.w	r3, r2, r3
 8102086:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102088:	4b0f      	ldr	r3, [pc, #60]	; (81020c8 <HAL_Init+0xa8>)
 810208a:	699b      	ldr	r3, [r3, #24]
 810208c:	f003 030f 	and.w	r3, r3, #15
 8102090:	4a0f      	ldr	r2, [pc, #60]	; (81020d0 <HAL_Init+0xb0>)
 8102092:	5cd3      	ldrb	r3, [r2, r3]
 8102094:	f003 031f 	and.w	r3, r3, #31
 8102098:	687a      	ldr	r2, [r7, #4]
 810209a:	fa22 f303 	lsr.w	r3, r2, r3
 810209e:	4a0d      	ldr	r2, [pc, #52]	; (81020d4 <HAL_Init+0xb4>)
 81020a0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81020a2:	4b0c      	ldr	r3, [pc, #48]	; (81020d4 <HAL_Init+0xb4>)
 81020a4:	681b      	ldr	r3, [r3, #0]
 81020a6:	4a0c      	ldr	r2, [pc, #48]	; (81020d8 <HAL_Init+0xb8>)
 81020a8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81020aa:	2000      	movs	r0, #0
 81020ac:	f000 f816 	bl	81020dc <HAL_InitTick>
 81020b0:	4603      	mov	r3, r0
 81020b2:	2b00      	cmp	r3, #0
 81020b4:	d001      	beq.n	81020ba <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81020b6:	2301      	movs	r3, #1
 81020b8:	e002      	b.n	81020c0 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81020ba:	f7ff fc8b 	bl	81019d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81020be:	2300      	movs	r3, #0
}
 81020c0:	4618      	mov	r0, r3
 81020c2:	3708      	adds	r7, #8
 81020c4:	46bd      	mov	sp, r7
 81020c6:	bd80      	pop	{r7, pc}
 81020c8:	58024400 	.word	0x58024400
 81020cc:	40024400 	.word	0x40024400
 81020d0:	0810dbc4 	.word	0x0810dbc4
 81020d4:	10000004 	.word	0x10000004
 81020d8:	10000000 	.word	0x10000000

081020dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81020dc:	b580      	push	{r7, lr}
 81020de:	b082      	sub	sp, #8
 81020e0:	af00      	add	r7, sp, #0
 81020e2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81020e4:	4b15      	ldr	r3, [pc, #84]	; (810213c <HAL_InitTick+0x60>)
 81020e6:	781b      	ldrb	r3, [r3, #0]
 81020e8:	2b00      	cmp	r3, #0
 81020ea:	d101      	bne.n	81020f0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81020ec:	2301      	movs	r3, #1
 81020ee:	e021      	b.n	8102134 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81020f0:	4b13      	ldr	r3, [pc, #76]	; (8102140 <HAL_InitTick+0x64>)
 81020f2:	681a      	ldr	r2, [r3, #0]
 81020f4:	4b11      	ldr	r3, [pc, #68]	; (810213c <HAL_InitTick+0x60>)
 81020f6:	781b      	ldrb	r3, [r3, #0]
 81020f8:	4619      	mov	r1, r3
 81020fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81020fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8102102:	fbb2 f3f3 	udiv	r3, r2, r3
 8102106:	4618      	mov	r0, r3
 8102108:	f001 fcaf 	bl	8103a6a <HAL_SYSTICK_Config>
 810210c:	4603      	mov	r3, r0
 810210e:	2b00      	cmp	r3, #0
 8102110:	d001      	beq.n	8102116 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8102112:	2301      	movs	r3, #1
 8102114:	e00e      	b.n	8102134 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8102116:	687b      	ldr	r3, [r7, #4]
 8102118:	2b0f      	cmp	r3, #15
 810211a:	d80a      	bhi.n	8102132 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 810211c:	2200      	movs	r2, #0
 810211e:	6879      	ldr	r1, [r7, #4]
 8102120:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8102124:	f001 fc79 	bl	8103a1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8102128:	4a06      	ldr	r2, [pc, #24]	; (8102144 <HAL_InitTick+0x68>)
 810212a:	687b      	ldr	r3, [r7, #4]
 810212c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 810212e:	2300      	movs	r3, #0
 8102130:	e000      	b.n	8102134 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8102132:	2301      	movs	r3, #1
}
 8102134:	4618      	mov	r0, r3
 8102136:	3708      	adds	r7, #8
 8102138:	46bd      	mov	sp, r7
 810213a:	bd80      	pop	{r7, pc}
 810213c:	10000028 	.word	0x10000028
 8102140:	10000000 	.word	0x10000000
 8102144:	10000024 	.word	0x10000024

08102148 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8102148:	b480      	push	{r7}
 810214a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 810214c:	4b06      	ldr	r3, [pc, #24]	; (8102168 <HAL_IncTick+0x20>)
 810214e:	781b      	ldrb	r3, [r3, #0]
 8102150:	461a      	mov	r2, r3
 8102152:	4b06      	ldr	r3, [pc, #24]	; (810216c <HAL_IncTick+0x24>)
 8102154:	681b      	ldr	r3, [r3, #0]
 8102156:	4413      	add	r3, r2
 8102158:	4a04      	ldr	r2, [pc, #16]	; (810216c <HAL_IncTick+0x24>)
 810215a:	6013      	str	r3, [r2, #0]
}
 810215c:	bf00      	nop
 810215e:	46bd      	mov	sp, r7
 8102160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102164:	4770      	bx	lr
 8102166:	bf00      	nop
 8102168:	10000028 	.word	0x10000028
 810216c:	10000430 	.word	0x10000430

08102170 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8102170:	b480      	push	{r7}
 8102172:	af00      	add	r7, sp, #0
  return uwTick;
 8102174:	4b03      	ldr	r3, [pc, #12]	; (8102184 <HAL_GetTick+0x14>)
 8102176:	681b      	ldr	r3, [r3, #0]
}
 8102178:	4618      	mov	r0, r3
 810217a:	46bd      	mov	sp, r7
 810217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102180:	4770      	bx	lr
 8102182:	bf00      	nop
 8102184:	10000430 	.word	0x10000430

08102188 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8102188:	b580      	push	{r7, lr}
 810218a:	b084      	sub	sp, #16
 810218c:	af00      	add	r7, sp, #0
 810218e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8102190:	f7ff ffee 	bl	8102170 <HAL_GetTick>
 8102194:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8102196:	687b      	ldr	r3, [r7, #4]
 8102198:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 810219a:	68fb      	ldr	r3, [r7, #12]
 810219c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 81021a0:	d005      	beq.n	81021ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 81021a2:	4b0a      	ldr	r3, [pc, #40]	; (81021cc <HAL_Delay+0x44>)
 81021a4:	781b      	ldrb	r3, [r3, #0]
 81021a6:	461a      	mov	r2, r3
 81021a8:	68fb      	ldr	r3, [r7, #12]
 81021aa:	4413      	add	r3, r2
 81021ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 81021ae:	bf00      	nop
 81021b0:	f7ff ffde 	bl	8102170 <HAL_GetTick>
 81021b4:	4602      	mov	r2, r0
 81021b6:	68bb      	ldr	r3, [r7, #8]
 81021b8:	1ad3      	subs	r3, r2, r3
 81021ba:	68fa      	ldr	r2, [r7, #12]
 81021bc:	429a      	cmp	r2, r3
 81021be:	d8f7      	bhi.n	81021b0 <HAL_Delay+0x28>
  {
  }
}
 81021c0:	bf00      	nop
 81021c2:	bf00      	nop
 81021c4:	3710      	adds	r7, #16
 81021c6:	46bd      	mov	sp, r7
 81021c8:	bd80      	pop	{r7, pc}
 81021ca:	bf00      	nop
 81021cc:	10000028 	.word	0x10000028

081021d0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 81021d0:	b480      	push	{r7}
 81021d2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 81021d4:	4b03      	ldr	r3, [pc, #12]	; (81021e4 <HAL_GetREVID+0x14>)
 81021d6:	681b      	ldr	r3, [r3, #0]
 81021d8:	0c1b      	lsrs	r3, r3, #16
}
 81021da:	4618      	mov	r0, r3
 81021dc:	46bd      	mov	sp, r7
 81021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021e2:	4770      	bx	lr
 81021e4:	5c001000 	.word	0x5c001000

081021e8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 81021e8:	b480      	push	{r7}
 81021ea:	b083      	sub	sp, #12
 81021ec:	af00      	add	r7, sp, #0
 81021ee:	6078      	str	r0, [r7, #4]
 81021f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 81021f2:	687b      	ldr	r3, [r7, #4]
 81021f4:	689b      	ldr	r3, [r3, #8]
 81021f6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 81021fa:	683b      	ldr	r3, [r7, #0]
 81021fc:	431a      	orrs	r2, r3
 81021fe:	687b      	ldr	r3, [r7, #4]
 8102200:	609a      	str	r2, [r3, #8]
}
 8102202:	bf00      	nop
 8102204:	370c      	adds	r7, #12
 8102206:	46bd      	mov	sp, r7
 8102208:	f85d 7b04 	ldr.w	r7, [sp], #4
 810220c:	4770      	bx	lr

0810220e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 810220e:	b480      	push	{r7}
 8102210:	b083      	sub	sp, #12
 8102212:	af00      	add	r7, sp, #0
 8102214:	6078      	str	r0, [r7, #4]
 8102216:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8102218:	687b      	ldr	r3, [r7, #4]
 810221a:	689b      	ldr	r3, [r3, #8]
 810221c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8102220:	683b      	ldr	r3, [r7, #0]
 8102222:	431a      	orrs	r2, r3
 8102224:	687b      	ldr	r3, [r7, #4]
 8102226:	609a      	str	r2, [r3, #8]
}
 8102228:	bf00      	nop
 810222a:	370c      	adds	r7, #12
 810222c:	46bd      	mov	sp, r7
 810222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102232:	4770      	bx	lr

08102234 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8102234:	b480      	push	{r7}
 8102236:	b083      	sub	sp, #12
 8102238:	af00      	add	r7, sp, #0
 810223a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 810223c:	687b      	ldr	r3, [r7, #4]
 810223e:	689b      	ldr	r3, [r3, #8]
 8102240:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8102244:	4618      	mov	r0, r3
 8102246:	370c      	adds	r7, #12
 8102248:	46bd      	mov	sp, r7
 810224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810224e:	4770      	bx	lr

08102250 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8102250:	b480      	push	{r7}
 8102252:	b087      	sub	sp, #28
 8102254:	af00      	add	r7, sp, #0
 8102256:	60f8      	str	r0, [r7, #12]
 8102258:	60b9      	str	r1, [r7, #8]
 810225a:	607a      	str	r2, [r7, #4]
 810225c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 810225e:	68fb      	ldr	r3, [r7, #12]
 8102260:	3360      	adds	r3, #96	; 0x60
 8102262:	461a      	mov	r2, r3
 8102264:	68bb      	ldr	r3, [r7, #8]
 8102266:	009b      	lsls	r3, r3, #2
 8102268:	4413      	add	r3, r2
 810226a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 810226c:	697b      	ldr	r3, [r7, #20]
 810226e:	681b      	ldr	r3, [r3, #0]
 8102270:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8102274:	687b      	ldr	r3, [r7, #4]
 8102276:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 810227a:	683b      	ldr	r3, [r7, #0]
 810227c:	430b      	orrs	r3, r1
 810227e:	431a      	orrs	r2, r3
 8102280:	697b      	ldr	r3, [r7, #20]
 8102282:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8102284:	bf00      	nop
 8102286:	371c      	adds	r7, #28
 8102288:	46bd      	mov	sp, r7
 810228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810228e:	4770      	bx	lr

08102290 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8102290:	b480      	push	{r7}
 8102292:	b085      	sub	sp, #20
 8102294:	af00      	add	r7, sp, #0
 8102296:	60f8      	str	r0, [r7, #12]
 8102298:	60b9      	str	r1, [r7, #8]
 810229a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 810229c:	68fb      	ldr	r3, [r7, #12]
 810229e:	691b      	ldr	r3, [r3, #16]
 81022a0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 81022a4:	68bb      	ldr	r3, [r7, #8]
 81022a6:	f003 031f 	and.w	r3, r3, #31
 81022aa:	6879      	ldr	r1, [r7, #4]
 81022ac:	fa01 f303 	lsl.w	r3, r1, r3
 81022b0:	431a      	orrs	r2, r3
 81022b2:	68fb      	ldr	r3, [r7, #12]
 81022b4:	611a      	str	r2, [r3, #16]
}
 81022b6:	bf00      	nop
 81022b8:	3714      	adds	r7, #20
 81022ba:	46bd      	mov	sp, r7
 81022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022c0:	4770      	bx	lr

081022c2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 81022c2:	b480      	push	{r7}
 81022c4:	b087      	sub	sp, #28
 81022c6:	af00      	add	r7, sp, #0
 81022c8:	60f8      	str	r0, [r7, #12]
 81022ca:	60b9      	str	r1, [r7, #8]
 81022cc:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 81022ce:	68fb      	ldr	r3, [r7, #12]
 81022d0:	3360      	adds	r3, #96	; 0x60
 81022d2:	461a      	mov	r2, r3
 81022d4:	68bb      	ldr	r3, [r7, #8]
 81022d6:	009b      	lsls	r3, r3, #2
 81022d8:	4413      	add	r3, r2
 81022da:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 81022dc:	697b      	ldr	r3, [r7, #20]
 81022de:	681b      	ldr	r3, [r3, #0]
 81022e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 81022e4:	687b      	ldr	r3, [r7, #4]
 81022e6:	431a      	orrs	r2, r3
 81022e8:	697b      	ldr	r3, [r7, #20]
 81022ea:	601a      	str	r2, [r3, #0]
  }
}
 81022ec:	bf00      	nop
 81022ee:	371c      	adds	r7, #28
 81022f0:	46bd      	mov	sp, r7
 81022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022f6:	4770      	bx	lr

081022f8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 81022f8:	b480      	push	{r7}
 81022fa:	b083      	sub	sp, #12
 81022fc:	af00      	add	r7, sp, #0
 81022fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8102300:	687b      	ldr	r3, [r7, #4]
 8102302:	68db      	ldr	r3, [r3, #12]
 8102304:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8102308:	2b00      	cmp	r3, #0
 810230a:	d101      	bne.n	8102310 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 810230c:	2301      	movs	r3, #1
 810230e:	e000      	b.n	8102312 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8102310:	2300      	movs	r3, #0
}
 8102312:	4618      	mov	r0, r3
 8102314:	370c      	adds	r7, #12
 8102316:	46bd      	mov	sp, r7
 8102318:	f85d 7b04 	ldr.w	r7, [sp], #4
 810231c:	4770      	bx	lr

0810231e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 810231e:	b480      	push	{r7}
 8102320:	b087      	sub	sp, #28
 8102322:	af00      	add	r7, sp, #0
 8102324:	60f8      	str	r0, [r7, #12]
 8102326:	60b9      	str	r1, [r7, #8]
 8102328:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 810232a:	68fb      	ldr	r3, [r7, #12]
 810232c:	3330      	adds	r3, #48	; 0x30
 810232e:	461a      	mov	r2, r3
 8102330:	68bb      	ldr	r3, [r7, #8]
 8102332:	0a1b      	lsrs	r3, r3, #8
 8102334:	009b      	lsls	r3, r3, #2
 8102336:	f003 030c 	and.w	r3, r3, #12
 810233a:	4413      	add	r3, r2
 810233c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 810233e:	697b      	ldr	r3, [r7, #20]
 8102340:	681a      	ldr	r2, [r3, #0]
 8102342:	68bb      	ldr	r3, [r7, #8]
 8102344:	f003 031f 	and.w	r3, r3, #31
 8102348:	211f      	movs	r1, #31
 810234a:	fa01 f303 	lsl.w	r3, r1, r3
 810234e:	43db      	mvns	r3, r3
 8102350:	401a      	ands	r2, r3
 8102352:	687b      	ldr	r3, [r7, #4]
 8102354:	0e9b      	lsrs	r3, r3, #26
 8102356:	f003 011f 	and.w	r1, r3, #31
 810235a:	68bb      	ldr	r3, [r7, #8]
 810235c:	f003 031f 	and.w	r3, r3, #31
 8102360:	fa01 f303 	lsl.w	r3, r1, r3
 8102364:	431a      	orrs	r2, r3
 8102366:	697b      	ldr	r3, [r7, #20]
 8102368:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 810236a:	bf00      	nop
 810236c:	371c      	adds	r7, #28
 810236e:	46bd      	mov	sp, r7
 8102370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102374:	4770      	bx	lr

08102376 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8102376:	b480      	push	{r7}
 8102378:	b087      	sub	sp, #28
 810237a:	af00      	add	r7, sp, #0
 810237c:	60f8      	str	r0, [r7, #12]
 810237e:	60b9      	str	r1, [r7, #8]
 8102380:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8102382:	68fb      	ldr	r3, [r7, #12]
 8102384:	3314      	adds	r3, #20
 8102386:	461a      	mov	r2, r3
 8102388:	68bb      	ldr	r3, [r7, #8]
 810238a:	0e5b      	lsrs	r3, r3, #25
 810238c:	009b      	lsls	r3, r3, #2
 810238e:	f003 0304 	and.w	r3, r3, #4
 8102392:	4413      	add	r3, r2
 8102394:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8102396:	697b      	ldr	r3, [r7, #20]
 8102398:	681a      	ldr	r2, [r3, #0]
 810239a:	68bb      	ldr	r3, [r7, #8]
 810239c:	0d1b      	lsrs	r3, r3, #20
 810239e:	f003 031f 	and.w	r3, r3, #31
 81023a2:	2107      	movs	r1, #7
 81023a4:	fa01 f303 	lsl.w	r3, r1, r3
 81023a8:	43db      	mvns	r3, r3
 81023aa:	401a      	ands	r2, r3
 81023ac:	68bb      	ldr	r3, [r7, #8]
 81023ae:	0d1b      	lsrs	r3, r3, #20
 81023b0:	f003 031f 	and.w	r3, r3, #31
 81023b4:	6879      	ldr	r1, [r7, #4]
 81023b6:	fa01 f303 	lsl.w	r3, r1, r3
 81023ba:	431a      	orrs	r2, r3
 81023bc:	697b      	ldr	r3, [r7, #20]
 81023be:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 81023c0:	bf00      	nop
 81023c2:	371c      	adds	r7, #28
 81023c4:	46bd      	mov	sp, r7
 81023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023ca:	4770      	bx	lr

081023cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 81023cc:	b480      	push	{r7}
 81023ce:	b085      	sub	sp, #20
 81023d0:	af00      	add	r7, sp, #0
 81023d2:	60f8      	str	r0, [r7, #12]
 81023d4:	60b9      	str	r1, [r7, #8]
 81023d6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 81023d8:	68fb      	ldr	r3, [r7, #12]
 81023da:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 81023de:	68bb      	ldr	r3, [r7, #8]
 81023e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81023e4:	43db      	mvns	r3, r3
 81023e6:	401a      	ands	r2, r3
 81023e8:	687b      	ldr	r3, [r7, #4]
 81023ea:	f003 0318 	and.w	r3, r3, #24
 81023ee:	4908      	ldr	r1, [pc, #32]	; (8102410 <LL_ADC_SetChannelSingleDiff+0x44>)
 81023f0:	40d9      	lsrs	r1, r3
 81023f2:	68bb      	ldr	r3, [r7, #8]
 81023f4:	400b      	ands	r3, r1
 81023f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81023fa:	431a      	orrs	r2, r3
 81023fc:	68fb      	ldr	r3, [r7, #12]
 81023fe:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8102402:	bf00      	nop
 8102404:	3714      	adds	r7, #20
 8102406:	46bd      	mov	sp, r7
 8102408:	f85d 7b04 	ldr.w	r7, [sp], #4
 810240c:	4770      	bx	lr
 810240e:	bf00      	nop
 8102410:	000fffff 	.word	0x000fffff

08102414 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8102414:	b480      	push	{r7}
 8102416:	b083      	sub	sp, #12
 8102418:	af00      	add	r7, sp, #0
 810241a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 810241c:	687b      	ldr	r3, [r7, #4]
 810241e:	689b      	ldr	r3, [r3, #8]
 8102420:	f003 031f 	and.w	r3, r3, #31
}
 8102424:	4618      	mov	r0, r3
 8102426:	370c      	adds	r7, #12
 8102428:	46bd      	mov	sp, r7
 810242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810242e:	4770      	bx	lr

08102430 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8102430:	b480      	push	{r7}
 8102432:	b083      	sub	sp, #12
 8102434:	af00      	add	r7, sp, #0
 8102436:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8102438:	687b      	ldr	r3, [r7, #4]
 810243a:	689b      	ldr	r3, [r3, #8]
 810243c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8102440:	4618      	mov	r0, r3
 8102442:	370c      	adds	r7, #12
 8102444:	46bd      	mov	sp, r7
 8102446:	f85d 7b04 	ldr.w	r7, [sp], #4
 810244a:	4770      	bx	lr

0810244c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 810244c:	b480      	push	{r7}
 810244e:	b083      	sub	sp, #12
 8102450:	af00      	add	r7, sp, #0
 8102452:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8102454:	687b      	ldr	r3, [r7, #4]
 8102456:	689b      	ldr	r3, [r3, #8]
 8102458:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 810245c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8102460:	687a      	ldr	r2, [r7, #4]
 8102462:	6093      	str	r3, [r2, #8]
}
 8102464:	bf00      	nop
 8102466:	370c      	adds	r7, #12
 8102468:	46bd      	mov	sp, r7
 810246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810246e:	4770      	bx	lr

08102470 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8102470:	b480      	push	{r7}
 8102472:	b083      	sub	sp, #12
 8102474:	af00      	add	r7, sp, #0
 8102476:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8102478:	687b      	ldr	r3, [r7, #4]
 810247a:	689b      	ldr	r3, [r3, #8]
 810247c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8102480:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102484:	d101      	bne.n	810248a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8102486:	2301      	movs	r3, #1
 8102488:	e000      	b.n	810248c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 810248a:	2300      	movs	r3, #0
}
 810248c:	4618      	mov	r0, r3
 810248e:	370c      	adds	r7, #12
 8102490:	46bd      	mov	sp, r7
 8102492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102496:	4770      	bx	lr

08102498 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8102498:	b480      	push	{r7}
 810249a:	b083      	sub	sp, #12
 810249c:	af00      	add	r7, sp, #0
 810249e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 81024a0:	687b      	ldr	r3, [r7, #4]
 81024a2:	689b      	ldr	r3, [r3, #8]
 81024a4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 81024a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 81024ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 81024b0:	687b      	ldr	r3, [r7, #4]
 81024b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 81024b4:	bf00      	nop
 81024b6:	370c      	adds	r7, #12
 81024b8:	46bd      	mov	sp, r7
 81024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024be:	4770      	bx	lr

081024c0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 81024c0:	b480      	push	{r7}
 81024c2:	b083      	sub	sp, #12
 81024c4:	af00      	add	r7, sp, #0
 81024c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 81024c8:	687b      	ldr	r3, [r7, #4]
 81024ca:	689b      	ldr	r3, [r3, #8]
 81024cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81024d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81024d4:	d101      	bne.n	81024da <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 81024d6:	2301      	movs	r3, #1
 81024d8:	e000      	b.n	81024dc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 81024da:	2300      	movs	r3, #0
}
 81024dc:	4618      	mov	r0, r3
 81024de:	370c      	adds	r7, #12
 81024e0:	46bd      	mov	sp, r7
 81024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024e6:	4770      	bx	lr

081024e8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 81024e8:	b480      	push	{r7}
 81024ea:	b083      	sub	sp, #12
 81024ec:	af00      	add	r7, sp, #0
 81024ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 81024f0:	687b      	ldr	r3, [r7, #4]
 81024f2:	689b      	ldr	r3, [r3, #8]
 81024f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 81024f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 81024fc:	f043 0201 	orr.w	r2, r3, #1
 8102500:	687b      	ldr	r3, [r7, #4]
 8102502:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8102504:	bf00      	nop
 8102506:	370c      	adds	r7, #12
 8102508:	46bd      	mov	sp, r7
 810250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810250e:	4770      	bx	lr

08102510 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8102510:	b480      	push	{r7}
 8102512:	b083      	sub	sp, #12
 8102514:	af00      	add	r7, sp, #0
 8102516:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8102518:	687b      	ldr	r3, [r7, #4]
 810251a:	689b      	ldr	r3, [r3, #8]
 810251c:	f003 0301 	and.w	r3, r3, #1
 8102520:	2b01      	cmp	r3, #1
 8102522:	d101      	bne.n	8102528 <LL_ADC_IsEnabled+0x18>
 8102524:	2301      	movs	r3, #1
 8102526:	e000      	b.n	810252a <LL_ADC_IsEnabled+0x1a>
 8102528:	2300      	movs	r3, #0
}
 810252a:	4618      	mov	r0, r3
 810252c:	370c      	adds	r7, #12
 810252e:	46bd      	mov	sp, r7
 8102530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102534:	4770      	bx	lr

08102536 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8102536:	b480      	push	{r7}
 8102538:	b083      	sub	sp, #12
 810253a:	af00      	add	r7, sp, #0
 810253c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 810253e:	687b      	ldr	r3, [r7, #4]
 8102540:	689b      	ldr	r3, [r3, #8]
 8102542:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8102546:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 810254a:	f043 0204 	orr.w	r2, r3, #4
 810254e:	687b      	ldr	r3, [r7, #4]
 8102550:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8102552:	bf00      	nop
 8102554:	370c      	adds	r7, #12
 8102556:	46bd      	mov	sp, r7
 8102558:	f85d 7b04 	ldr.w	r7, [sp], #4
 810255c:	4770      	bx	lr

0810255e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 810255e:	b480      	push	{r7}
 8102560:	b083      	sub	sp, #12
 8102562:	af00      	add	r7, sp, #0
 8102564:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8102566:	687b      	ldr	r3, [r7, #4]
 8102568:	689b      	ldr	r3, [r3, #8]
 810256a:	f003 0304 	and.w	r3, r3, #4
 810256e:	2b04      	cmp	r3, #4
 8102570:	d101      	bne.n	8102576 <LL_ADC_REG_IsConversionOngoing+0x18>
 8102572:	2301      	movs	r3, #1
 8102574:	e000      	b.n	8102578 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8102576:	2300      	movs	r3, #0
}
 8102578:	4618      	mov	r0, r3
 810257a:	370c      	adds	r7, #12
 810257c:	46bd      	mov	sp, r7
 810257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102582:	4770      	bx	lr

08102584 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8102584:	b480      	push	{r7}
 8102586:	b083      	sub	sp, #12
 8102588:	af00      	add	r7, sp, #0
 810258a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 810258c:	687b      	ldr	r3, [r7, #4]
 810258e:	689b      	ldr	r3, [r3, #8]
 8102590:	f003 0308 	and.w	r3, r3, #8
 8102594:	2b08      	cmp	r3, #8
 8102596:	d101      	bne.n	810259c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8102598:	2301      	movs	r3, #1
 810259a:	e000      	b.n	810259e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 810259c:	2300      	movs	r3, #0
}
 810259e:	4618      	mov	r0, r3
 81025a0:	370c      	adds	r7, #12
 81025a2:	46bd      	mov	sp, r7
 81025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025a8:	4770      	bx	lr
	...

081025ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 81025ac:	b590      	push	{r4, r7, lr}
 81025ae:	b089      	sub	sp, #36	; 0x24
 81025b0:	af00      	add	r7, sp, #0
 81025b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 81025b4:	2300      	movs	r3, #0
 81025b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 81025b8:	2300      	movs	r3, #0
 81025ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 81025bc:	687b      	ldr	r3, [r7, #4]
 81025be:	2b00      	cmp	r3, #0
 81025c0:	d101      	bne.n	81025c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 81025c2:	2301      	movs	r3, #1
 81025c4:	e18f      	b.n	81028e6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 81025c6:	687b      	ldr	r3, [r7, #4]
 81025c8:	68db      	ldr	r3, [r3, #12]
 81025ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 81025cc:	687b      	ldr	r3, [r7, #4]
 81025ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81025d0:	2b00      	cmp	r3, #0
 81025d2:	d109      	bne.n	81025e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 81025d4:	6878      	ldr	r0, [r7, #4]
 81025d6:	f7ff fa17 	bl	8101a08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 81025da:	687b      	ldr	r3, [r7, #4]
 81025dc:	2200      	movs	r2, #0
 81025de:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 81025e0:	687b      	ldr	r3, [r7, #4]
 81025e2:	2200      	movs	r2, #0
 81025e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 81025e8:	687b      	ldr	r3, [r7, #4]
 81025ea:	681b      	ldr	r3, [r3, #0]
 81025ec:	4618      	mov	r0, r3
 81025ee:	f7ff ff3f 	bl	8102470 <LL_ADC_IsDeepPowerDownEnabled>
 81025f2:	4603      	mov	r3, r0
 81025f4:	2b00      	cmp	r3, #0
 81025f6:	d004      	beq.n	8102602 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 81025f8:	687b      	ldr	r3, [r7, #4]
 81025fa:	681b      	ldr	r3, [r3, #0]
 81025fc:	4618      	mov	r0, r3
 81025fe:	f7ff ff25 	bl	810244c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8102602:	687b      	ldr	r3, [r7, #4]
 8102604:	681b      	ldr	r3, [r3, #0]
 8102606:	4618      	mov	r0, r3
 8102608:	f7ff ff5a 	bl	81024c0 <LL_ADC_IsInternalRegulatorEnabled>
 810260c:	4603      	mov	r3, r0
 810260e:	2b00      	cmp	r3, #0
 8102610:	d114      	bne.n	810263c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8102612:	687b      	ldr	r3, [r7, #4]
 8102614:	681b      	ldr	r3, [r3, #0]
 8102616:	4618      	mov	r0, r3
 8102618:	f7ff ff3e 	bl	8102498 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 810261c:	4b88      	ldr	r3, [pc, #544]	; (8102840 <HAL_ADC_Init+0x294>)
 810261e:	681b      	ldr	r3, [r3, #0]
 8102620:	099b      	lsrs	r3, r3, #6
 8102622:	4a88      	ldr	r2, [pc, #544]	; (8102844 <HAL_ADC_Init+0x298>)
 8102624:	fba2 2303 	umull	r2, r3, r2, r3
 8102628:	099b      	lsrs	r3, r3, #6
 810262a:	3301      	adds	r3, #1
 810262c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 810262e:	e002      	b.n	8102636 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8102630:	68bb      	ldr	r3, [r7, #8]
 8102632:	3b01      	subs	r3, #1
 8102634:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8102636:	68bb      	ldr	r3, [r7, #8]
 8102638:	2b00      	cmp	r3, #0
 810263a:	d1f9      	bne.n	8102630 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 810263c:	687b      	ldr	r3, [r7, #4]
 810263e:	681b      	ldr	r3, [r3, #0]
 8102640:	4618      	mov	r0, r3
 8102642:	f7ff ff3d 	bl	81024c0 <LL_ADC_IsInternalRegulatorEnabled>
 8102646:	4603      	mov	r3, r0
 8102648:	2b00      	cmp	r3, #0
 810264a:	d10d      	bne.n	8102668 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 810264c:	687b      	ldr	r3, [r7, #4]
 810264e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102650:	f043 0210 	orr.w	r2, r3, #16
 8102654:	687b      	ldr	r3, [r7, #4]
 8102656:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8102658:	687b      	ldr	r3, [r7, #4]
 810265a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810265c:	f043 0201 	orr.w	r2, r3, #1
 8102660:	687b      	ldr	r3, [r7, #4]
 8102662:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8102664:	2301      	movs	r3, #1
 8102666:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8102668:	687b      	ldr	r3, [r7, #4]
 810266a:	681b      	ldr	r3, [r3, #0]
 810266c:	4618      	mov	r0, r3
 810266e:	f7ff ff76 	bl	810255e <LL_ADC_REG_IsConversionOngoing>
 8102672:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8102674:	687b      	ldr	r3, [r7, #4]
 8102676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102678:	f003 0310 	and.w	r3, r3, #16
 810267c:	2b00      	cmp	r3, #0
 810267e:	f040 8129 	bne.w	81028d4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8102682:	697b      	ldr	r3, [r7, #20]
 8102684:	2b00      	cmp	r3, #0
 8102686:	f040 8125 	bne.w	81028d4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 810268a:	687b      	ldr	r3, [r7, #4]
 810268c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810268e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8102692:	f043 0202 	orr.w	r2, r3, #2
 8102696:	687b      	ldr	r3, [r7, #4]
 8102698:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 810269a:	687b      	ldr	r3, [r7, #4]
 810269c:	681b      	ldr	r3, [r3, #0]
 810269e:	4618      	mov	r0, r3
 81026a0:	f7ff ff36 	bl	8102510 <LL_ADC_IsEnabled>
 81026a4:	4603      	mov	r3, r0
 81026a6:	2b00      	cmp	r3, #0
 81026a8:	d136      	bne.n	8102718 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81026aa:	687b      	ldr	r3, [r7, #4]
 81026ac:	681b      	ldr	r3, [r3, #0]
 81026ae:	4a66      	ldr	r2, [pc, #408]	; (8102848 <HAL_ADC_Init+0x29c>)
 81026b0:	4293      	cmp	r3, r2
 81026b2:	d004      	beq.n	81026be <HAL_ADC_Init+0x112>
 81026b4:	687b      	ldr	r3, [r7, #4]
 81026b6:	681b      	ldr	r3, [r3, #0]
 81026b8:	4a64      	ldr	r2, [pc, #400]	; (810284c <HAL_ADC_Init+0x2a0>)
 81026ba:	4293      	cmp	r3, r2
 81026bc:	d10e      	bne.n	81026dc <HAL_ADC_Init+0x130>
 81026be:	4862      	ldr	r0, [pc, #392]	; (8102848 <HAL_ADC_Init+0x29c>)
 81026c0:	f7ff ff26 	bl	8102510 <LL_ADC_IsEnabled>
 81026c4:	4604      	mov	r4, r0
 81026c6:	4861      	ldr	r0, [pc, #388]	; (810284c <HAL_ADC_Init+0x2a0>)
 81026c8:	f7ff ff22 	bl	8102510 <LL_ADC_IsEnabled>
 81026cc:	4603      	mov	r3, r0
 81026ce:	4323      	orrs	r3, r4
 81026d0:	2b00      	cmp	r3, #0
 81026d2:	bf0c      	ite	eq
 81026d4:	2301      	moveq	r3, #1
 81026d6:	2300      	movne	r3, #0
 81026d8:	b2db      	uxtb	r3, r3
 81026da:	e008      	b.n	81026ee <HAL_ADC_Init+0x142>
 81026dc:	485c      	ldr	r0, [pc, #368]	; (8102850 <HAL_ADC_Init+0x2a4>)
 81026de:	f7ff ff17 	bl	8102510 <LL_ADC_IsEnabled>
 81026e2:	4603      	mov	r3, r0
 81026e4:	2b00      	cmp	r3, #0
 81026e6:	bf0c      	ite	eq
 81026e8:	2301      	moveq	r3, #1
 81026ea:	2300      	movne	r3, #0
 81026ec:	b2db      	uxtb	r3, r3
 81026ee:	2b00      	cmp	r3, #0
 81026f0:	d012      	beq.n	8102718 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 81026f2:	687b      	ldr	r3, [r7, #4]
 81026f4:	681b      	ldr	r3, [r3, #0]
 81026f6:	4a54      	ldr	r2, [pc, #336]	; (8102848 <HAL_ADC_Init+0x29c>)
 81026f8:	4293      	cmp	r3, r2
 81026fa:	d004      	beq.n	8102706 <HAL_ADC_Init+0x15a>
 81026fc:	687b      	ldr	r3, [r7, #4]
 81026fe:	681b      	ldr	r3, [r3, #0]
 8102700:	4a52      	ldr	r2, [pc, #328]	; (810284c <HAL_ADC_Init+0x2a0>)
 8102702:	4293      	cmp	r3, r2
 8102704:	d101      	bne.n	810270a <HAL_ADC_Init+0x15e>
 8102706:	4a53      	ldr	r2, [pc, #332]	; (8102854 <HAL_ADC_Init+0x2a8>)
 8102708:	e000      	b.n	810270c <HAL_ADC_Init+0x160>
 810270a:	4a53      	ldr	r2, [pc, #332]	; (8102858 <HAL_ADC_Init+0x2ac>)
 810270c:	687b      	ldr	r3, [r7, #4]
 810270e:	685b      	ldr	r3, [r3, #4]
 8102710:	4619      	mov	r1, r3
 8102712:	4610      	mov	r0, r2
 8102714:	f7ff fd68 	bl	81021e8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8102718:	f7ff fd5a 	bl	81021d0 <HAL_GetREVID>
 810271c:	4603      	mov	r3, r0
 810271e:	f241 0203 	movw	r2, #4099	; 0x1003
 8102722:	4293      	cmp	r3, r2
 8102724:	d914      	bls.n	8102750 <HAL_ADC_Init+0x1a4>
 8102726:	687b      	ldr	r3, [r7, #4]
 8102728:	689b      	ldr	r3, [r3, #8]
 810272a:	2b10      	cmp	r3, #16
 810272c:	d110      	bne.n	8102750 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810272e:	687b      	ldr	r3, [r7, #4]
 8102730:	7d5b      	ldrb	r3, [r3, #21]
 8102732:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8102734:	687b      	ldr	r3, [r7, #4]
 8102736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102738:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 810273a:	687b      	ldr	r3, [r7, #4]
 810273c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 810273e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8102740:	687b      	ldr	r3, [r7, #4]
 8102742:	7f1b      	ldrb	r3, [r3, #28]
 8102744:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8102746:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102748:	f043 030c 	orr.w	r3, r3, #12
 810274c:	61bb      	str	r3, [r7, #24]
 810274e:	e00d      	b.n	810276c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102750:	687b      	ldr	r3, [r7, #4]
 8102752:	7d5b      	ldrb	r3, [r3, #21]
 8102754:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8102756:	687b      	ldr	r3, [r7, #4]
 8102758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810275a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 810275c:	687b      	ldr	r3, [r7, #4]
 810275e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8102760:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8102762:	687b      	ldr	r3, [r7, #4]
 8102764:	7f1b      	ldrb	r3, [r3, #28]
 8102766:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102768:	4313      	orrs	r3, r2
 810276a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 810276c:	687b      	ldr	r3, [r7, #4]
 810276e:	7f1b      	ldrb	r3, [r3, #28]
 8102770:	2b01      	cmp	r3, #1
 8102772:	d106      	bne.n	8102782 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8102774:	687b      	ldr	r3, [r7, #4]
 8102776:	6a1b      	ldr	r3, [r3, #32]
 8102778:	3b01      	subs	r3, #1
 810277a:	045b      	lsls	r3, r3, #17
 810277c:	69ba      	ldr	r2, [r7, #24]
 810277e:	4313      	orrs	r3, r2
 8102780:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8102782:	687b      	ldr	r3, [r7, #4]
 8102784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102786:	2b00      	cmp	r3, #0
 8102788:	d009      	beq.n	810279e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 810278a:	687b      	ldr	r3, [r7, #4]
 810278c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810278e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8102792:	687b      	ldr	r3, [r7, #4]
 8102794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102796:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8102798:	69ba      	ldr	r2, [r7, #24]
 810279a:	4313      	orrs	r3, r2
 810279c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 810279e:	687b      	ldr	r3, [r7, #4]
 81027a0:	681b      	ldr	r3, [r3, #0]
 81027a2:	68da      	ldr	r2, [r3, #12]
 81027a4:	4b2d      	ldr	r3, [pc, #180]	; (810285c <HAL_ADC_Init+0x2b0>)
 81027a6:	4013      	ands	r3, r2
 81027a8:	687a      	ldr	r2, [r7, #4]
 81027aa:	6812      	ldr	r2, [r2, #0]
 81027ac:	69b9      	ldr	r1, [r7, #24]
 81027ae:	430b      	orrs	r3, r1
 81027b0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81027b2:	687b      	ldr	r3, [r7, #4]
 81027b4:	681b      	ldr	r3, [r3, #0]
 81027b6:	4618      	mov	r0, r3
 81027b8:	f7ff fed1 	bl	810255e <LL_ADC_REG_IsConversionOngoing>
 81027bc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 81027be:	687b      	ldr	r3, [r7, #4]
 81027c0:	681b      	ldr	r3, [r3, #0]
 81027c2:	4618      	mov	r0, r3
 81027c4:	f7ff fede 	bl	8102584 <LL_ADC_INJ_IsConversionOngoing>
 81027c8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 81027ca:	693b      	ldr	r3, [r7, #16]
 81027cc:	2b00      	cmp	r3, #0
 81027ce:	d15f      	bne.n	8102890 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 81027d0:	68fb      	ldr	r3, [r7, #12]
 81027d2:	2b00      	cmp	r3, #0
 81027d4:	d15c      	bne.n	8102890 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 81027d6:	687b      	ldr	r3, [r7, #4]
 81027d8:	7d1b      	ldrb	r3, [r3, #20]
 81027da:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 81027dc:	687b      	ldr	r3, [r7, #4]
 81027de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 81027e0:	4313      	orrs	r3, r2
 81027e2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 81027e4:	687b      	ldr	r3, [r7, #4]
 81027e6:	681b      	ldr	r3, [r3, #0]
 81027e8:	68db      	ldr	r3, [r3, #12]
 81027ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 81027ee:	f023 0303 	bic.w	r3, r3, #3
 81027f2:	687a      	ldr	r2, [r7, #4]
 81027f4:	6812      	ldr	r2, [r2, #0]
 81027f6:	69b9      	ldr	r1, [r7, #24]
 81027f8:	430b      	orrs	r3, r1
 81027fa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 81027fc:	687b      	ldr	r3, [r7, #4]
 81027fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8102802:	2b01      	cmp	r3, #1
 8102804:	d12e      	bne.n	8102864 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8102806:	687b      	ldr	r3, [r7, #4]
 8102808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810280a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 810280c:	687b      	ldr	r3, [r7, #4]
 810280e:	681b      	ldr	r3, [r3, #0]
 8102810:	691a      	ldr	r2, [r3, #16]
 8102812:	4b13      	ldr	r3, [pc, #76]	; (8102860 <HAL_ADC_Init+0x2b4>)
 8102814:	4013      	ands	r3, r2
 8102816:	687a      	ldr	r2, [r7, #4]
 8102818:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 810281a:	3a01      	subs	r2, #1
 810281c:	0411      	lsls	r1, r2, #16
 810281e:	687a      	ldr	r2, [r7, #4]
 8102820:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8102822:	4311      	orrs	r1, r2
 8102824:	687a      	ldr	r2, [r7, #4]
 8102826:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8102828:	4311      	orrs	r1, r2
 810282a:	687a      	ldr	r2, [r7, #4]
 810282c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 810282e:	430a      	orrs	r2, r1
 8102830:	431a      	orrs	r2, r3
 8102832:	687b      	ldr	r3, [r7, #4]
 8102834:	681b      	ldr	r3, [r3, #0]
 8102836:	f042 0201 	orr.w	r2, r2, #1
 810283a:	611a      	str	r2, [r3, #16]
 810283c:	e01a      	b.n	8102874 <HAL_ADC_Init+0x2c8>
 810283e:	bf00      	nop
 8102840:	10000000 	.word	0x10000000
 8102844:	053e2d63 	.word	0x053e2d63
 8102848:	40022000 	.word	0x40022000
 810284c:	40022100 	.word	0x40022100
 8102850:	58026000 	.word	0x58026000
 8102854:	40022300 	.word	0x40022300
 8102858:	58026300 	.word	0x58026300
 810285c:	fff0c003 	.word	0xfff0c003
 8102860:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8102864:	687b      	ldr	r3, [r7, #4]
 8102866:	681b      	ldr	r3, [r3, #0]
 8102868:	691a      	ldr	r2, [r3, #16]
 810286a:	687b      	ldr	r3, [r7, #4]
 810286c:	681b      	ldr	r3, [r3, #0]
 810286e:	f022 0201 	bic.w	r2, r2, #1
 8102872:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8102874:	687b      	ldr	r3, [r7, #4]
 8102876:	681b      	ldr	r3, [r3, #0]
 8102878:	691b      	ldr	r3, [r3, #16]
 810287a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 810287e:	687b      	ldr	r3, [r7, #4]
 8102880:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8102882:	687b      	ldr	r3, [r7, #4]
 8102884:	681b      	ldr	r3, [r3, #0]
 8102886:	430a      	orrs	r2, r1
 8102888:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 810288a:	6878      	ldr	r0, [r7, #4]
 810288c:	f000 fdd6 	bl	810343c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8102890:	687b      	ldr	r3, [r7, #4]
 8102892:	68db      	ldr	r3, [r3, #12]
 8102894:	2b01      	cmp	r3, #1
 8102896:	d10c      	bne.n	81028b2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8102898:	687b      	ldr	r3, [r7, #4]
 810289a:	681b      	ldr	r3, [r3, #0]
 810289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810289e:	f023 010f 	bic.w	r1, r3, #15
 81028a2:	687b      	ldr	r3, [r7, #4]
 81028a4:	699b      	ldr	r3, [r3, #24]
 81028a6:	1e5a      	subs	r2, r3, #1
 81028a8:	687b      	ldr	r3, [r7, #4]
 81028aa:	681b      	ldr	r3, [r3, #0]
 81028ac:	430a      	orrs	r2, r1
 81028ae:	631a      	str	r2, [r3, #48]	; 0x30
 81028b0:	e007      	b.n	81028c2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 81028b2:	687b      	ldr	r3, [r7, #4]
 81028b4:	681b      	ldr	r3, [r3, #0]
 81028b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 81028b8:	687b      	ldr	r3, [r7, #4]
 81028ba:	681b      	ldr	r3, [r3, #0]
 81028bc:	f022 020f 	bic.w	r2, r2, #15
 81028c0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 81028c2:	687b      	ldr	r3, [r7, #4]
 81028c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81028c6:	f023 0303 	bic.w	r3, r3, #3
 81028ca:	f043 0201 	orr.w	r2, r3, #1
 81028ce:	687b      	ldr	r3, [r7, #4]
 81028d0:	655a      	str	r2, [r3, #84]	; 0x54
 81028d2:	e007      	b.n	81028e4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81028d4:	687b      	ldr	r3, [r7, #4]
 81028d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81028d8:	f043 0210 	orr.w	r2, r3, #16
 81028dc:	687b      	ldr	r3, [r7, #4]
 81028de:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 81028e0:	2301      	movs	r3, #1
 81028e2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 81028e4:	7ffb      	ldrb	r3, [r7, #31]
}
 81028e6:	4618      	mov	r0, r3
 81028e8:	3724      	adds	r7, #36	; 0x24
 81028ea:	46bd      	mov	sp, r7
 81028ec:	bd90      	pop	{r4, r7, pc}
 81028ee:	bf00      	nop

081028f0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 81028f0:	b580      	push	{r7, lr}
 81028f2:	b086      	sub	sp, #24
 81028f4:	af00      	add	r7, sp, #0
 81028f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 81028f8:	687b      	ldr	r3, [r7, #4]
 81028fa:	681b      	ldr	r3, [r3, #0]
 81028fc:	4a5d      	ldr	r2, [pc, #372]	; (8102a74 <HAL_ADC_Start+0x184>)
 81028fe:	4293      	cmp	r3, r2
 8102900:	d004      	beq.n	810290c <HAL_ADC_Start+0x1c>
 8102902:	687b      	ldr	r3, [r7, #4]
 8102904:	681b      	ldr	r3, [r3, #0]
 8102906:	4a5c      	ldr	r2, [pc, #368]	; (8102a78 <HAL_ADC_Start+0x188>)
 8102908:	4293      	cmp	r3, r2
 810290a:	d101      	bne.n	8102910 <HAL_ADC_Start+0x20>
 810290c:	4b5b      	ldr	r3, [pc, #364]	; (8102a7c <HAL_ADC_Start+0x18c>)
 810290e:	e000      	b.n	8102912 <HAL_ADC_Start+0x22>
 8102910:	4b5b      	ldr	r3, [pc, #364]	; (8102a80 <HAL_ADC_Start+0x190>)
 8102912:	4618      	mov	r0, r3
 8102914:	f7ff fd7e 	bl	8102414 <LL_ADC_GetMultimode>
 8102918:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 810291a:	687b      	ldr	r3, [r7, #4]
 810291c:	681b      	ldr	r3, [r3, #0]
 810291e:	4618      	mov	r0, r3
 8102920:	f7ff fe1d 	bl	810255e <LL_ADC_REG_IsConversionOngoing>
 8102924:	4603      	mov	r3, r0
 8102926:	2b00      	cmp	r3, #0
 8102928:	f040 809c 	bne.w	8102a64 <HAL_ADC_Start+0x174>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 810292c:	687b      	ldr	r3, [r7, #4]
 810292e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8102932:	2b01      	cmp	r3, #1
 8102934:	d101      	bne.n	810293a <HAL_ADC_Start+0x4a>
 8102936:	2302      	movs	r3, #2
 8102938:	e097      	b.n	8102a6a <HAL_ADC_Start+0x17a>
 810293a:	687b      	ldr	r3, [r7, #4]
 810293c:	2201      	movs	r2, #1
 810293e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8102942:	6878      	ldr	r0, [r7, #4]
 8102944:	f000 fcf0 	bl	8103328 <ADC_Enable>
 8102948:	4603      	mov	r3, r0
 810294a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 810294c:	7dfb      	ldrb	r3, [r7, #23]
 810294e:	2b00      	cmp	r3, #0
 8102950:	f040 8083 	bne.w	8102a5a <HAL_ADC_Start+0x16a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8102954:	687b      	ldr	r3, [r7, #4]
 8102956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102958:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 810295c:	f023 0301 	bic.w	r3, r3, #1
 8102960:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8102964:	687b      	ldr	r3, [r7, #4]
 8102966:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8102968:	687b      	ldr	r3, [r7, #4]
 810296a:	681b      	ldr	r3, [r3, #0]
 810296c:	4a42      	ldr	r2, [pc, #264]	; (8102a78 <HAL_ADC_Start+0x188>)
 810296e:	4293      	cmp	r3, r2
 8102970:	d002      	beq.n	8102978 <HAL_ADC_Start+0x88>
 8102972:	687b      	ldr	r3, [r7, #4]
 8102974:	681b      	ldr	r3, [r3, #0]
 8102976:	e000      	b.n	810297a <HAL_ADC_Start+0x8a>
 8102978:	4b3e      	ldr	r3, [pc, #248]	; (8102a74 <HAL_ADC_Start+0x184>)
 810297a:	687a      	ldr	r2, [r7, #4]
 810297c:	6812      	ldr	r2, [r2, #0]
 810297e:	4293      	cmp	r3, r2
 8102980:	d002      	beq.n	8102988 <HAL_ADC_Start+0x98>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8102982:	693b      	ldr	r3, [r7, #16]
 8102984:	2b00      	cmp	r3, #0
 8102986:	d105      	bne.n	8102994 <HAL_ADC_Start+0xa4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8102988:	687b      	ldr	r3, [r7, #4]
 810298a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810298c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8102990:	687b      	ldr	r3, [r7, #4]
 8102992:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8102994:	687b      	ldr	r3, [r7, #4]
 8102996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102998:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 810299c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81029a0:	d106      	bne.n	81029b0 <HAL_ADC_Start+0xc0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 81029a2:	687b      	ldr	r3, [r7, #4]
 81029a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81029a6:	f023 0206 	bic.w	r2, r3, #6
 81029aa:	687b      	ldr	r3, [r7, #4]
 81029ac:	659a      	str	r2, [r3, #88]	; 0x58
 81029ae:	e002      	b.n	81029b6 <HAL_ADC_Start+0xc6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 81029b0:	687b      	ldr	r3, [r7, #4]
 81029b2:	2200      	movs	r2, #0
 81029b4:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 81029b6:	687b      	ldr	r3, [r7, #4]
 81029b8:	681b      	ldr	r3, [r3, #0]
 81029ba:	221c      	movs	r2, #28
 81029bc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 81029be:	687b      	ldr	r3, [r7, #4]
 81029c0:	2200      	movs	r2, #0
 81029c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 81029c6:	687b      	ldr	r3, [r7, #4]
 81029c8:	681b      	ldr	r3, [r3, #0]
 81029ca:	4a2b      	ldr	r2, [pc, #172]	; (8102a78 <HAL_ADC_Start+0x188>)
 81029cc:	4293      	cmp	r3, r2
 81029ce:	d002      	beq.n	81029d6 <HAL_ADC_Start+0xe6>
 81029d0:	687b      	ldr	r3, [r7, #4]
 81029d2:	681b      	ldr	r3, [r3, #0]
 81029d4:	e000      	b.n	81029d8 <HAL_ADC_Start+0xe8>
 81029d6:	4b27      	ldr	r3, [pc, #156]	; (8102a74 <HAL_ADC_Start+0x184>)
 81029d8:	687a      	ldr	r2, [r7, #4]
 81029da:	6812      	ldr	r2, [r2, #0]
 81029dc:	4293      	cmp	r3, r2
 81029de:	d008      	beq.n	81029f2 <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 81029e0:	693b      	ldr	r3, [r7, #16]
 81029e2:	2b00      	cmp	r3, #0
 81029e4:	d005      	beq.n	81029f2 <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 81029e6:	693b      	ldr	r3, [r7, #16]
 81029e8:	2b05      	cmp	r3, #5
 81029ea:	d002      	beq.n	81029f2 <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 81029ec:	693b      	ldr	r3, [r7, #16]
 81029ee:	2b09      	cmp	r3, #9
 81029f0:	d114      	bne.n	8102a1c <HAL_ADC_Start+0x12c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 81029f2:	687b      	ldr	r3, [r7, #4]
 81029f4:	681b      	ldr	r3, [r3, #0]
 81029f6:	68db      	ldr	r3, [r3, #12]
 81029f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81029fc:	2b00      	cmp	r3, #0
 81029fe:	d007      	beq.n	8102a10 <HAL_ADC_Start+0x120>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8102a00:	687b      	ldr	r3, [r7, #4]
 8102a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102a04:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8102a08:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8102a0c:	687b      	ldr	r3, [r7, #4]
 8102a0e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8102a10:	687b      	ldr	r3, [r7, #4]
 8102a12:	681b      	ldr	r3, [r3, #0]
 8102a14:	4618      	mov	r0, r3
 8102a16:	f7ff fd8e 	bl	8102536 <LL_ADC_REG_StartConversion>
 8102a1a:	e025      	b.n	8102a68 <HAL_ADC_Start+0x178>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8102a1c:	687b      	ldr	r3, [r7, #4]
 8102a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102a20:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8102a24:	687b      	ldr	r3, [r7, #4]
 8102a26:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8102a28:	687b      	ldr	r3, [r7, #4]
 8102a2a:	681b      	ldr	r3, [r3, #0]
 8102a2c:	4a12      	ldr	r2, [pc, #72]	; (8102a78 <HAL_ADC_Start+0x188>)
 8102a2e:	4293      	cmp	r3, r2
 8102a30:	d002      	beq.n	8102a38 <HAL_ADC_Start+0x148>
 8102a32:	687b      	ldr	r3, [r7, #4]
 8102a34:	681b      	ldr	r3, [r3, #0]
 8102a36:	e000      	b.n	8102a3a <HAL_ADC_Start+0x14a>
 8102a38:	4b0e      	ldr	r3, [pc, #56]	; (8102a74 <HAL_ADC_Start+0x184>)
 8102a3a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8102a3c:	68fb      	ldr	r3, [r7, #12]
 8102a3e:	68db      	ldr	r3, [r3, #12]
 8102a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8102a44:	2b00      	cmp	r3, #0
 8102a46:	d00f      	beq.n	8102a68 <HAL_ADC_Start+0x178>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8102a48:	687b      	ldr	r3, [r7, #4]
 8102a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102a4c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8102a50:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8102a54:	687b      	ldr	r3, [r7, #4]
 8102a56:	655a      	str	r2, [r3, #84]	; 0x54
 8102a58:	e006      	b.n	8102a68 <HAL_ADC_Start+0x178>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8102a5a:	687b      	ldr	r3, [r7, #4]
 8102a5c:	2200      	movs	r2, #0
 8102a5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8102a62:	e001      	b.n	8102a68 <HAL_ADC_Start+0x178>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8102a64:	2302      	movs	r3, #2
 8102a66:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8102a68:	7dfb      	ldrb	r3, [r7, #23]
}
 8102a6a:	4618      	mov	r0, r3
 8102a6c:	3718      	adds	r7, #24
 8102a6e:	46bd      	mov	sp, r7
 8102a70:	bd80      	pop	{r7, pc}
 8102a72:	bf00      	nop
 8102a74:	40022000 	.word	0x40022000
 8102a78:	40022100 	.word	0x40022100
 8102a7c:	40022300 	.word	0x40022300
 8102a80:	58026300 	.word	0x58026300

08102a84 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8102a84:	b580      	push	{r7, lr}
 8102a86:	b088      	sub	sp, #32
 8102a88:	af00      	add	r7, sp, #0
 8102a8a:	6078      	str	r0, [r7, #4]
 8102a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8102a8e:	687b      	ldr	r3, [r7, #4]
 8102a90:	681b      	ldr	r3, [r3, #0]
 8102a92:	4a72      	ldr	r2, [pc, #456]	; (8102c5c <HAL_ADC_PollForConversion+0x1d8>)
 8102a94:	4293      	cmp	r3, r2
 8102a96:	d004      	beq.n	8102aa2 <HAL_ADC_PollForConversion+0x1e>
 8102a98:	687b      	ldr	r3, [r7, #4]
 8102a9a:	681b      	ldr	r3, [r3, #0]
 8102a9c:	4a70      	ldr	r2, [pc, #448]	; (8102c60 <HAL_ADC_PollForConversion+0x1dc>)
 8102a9e:	4293      	cmp	r3, r2
 8102aa0:	d101      	bne.n	8102aa6 <HAL_ADC_PollForConversion+0x22>
 8102aa2:	4b70      	ldr	r3, [pc, #448]	; (8102c64 <HAL_ADC_PollForConversion+0x1e0>)
 8102aa4:	e000      	b.n	8102aa8 <HAL_ADC_PollForConversion+0x24>
 8102aa6:	4b70      	ldr	r3, [pc, #448]	; (8102c68 <HAL_ADC_PollForConversion+0x1e4>)
 8102aa8:	4618      	mov	r0, r3
 8102aaa:	f7ff fcb3 	bl	8102414 <LL_ADC_GetMultimode>
 8102aae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8102ab0:	687b      	ldr	r3, [r7, #4]
 8102ab2:	691b      	ldr	r3, [r3, #16]
 8102ab4:	2b08      	cmp	r3, #8
 8102ab6:	d102      	bne.n	8102abe <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8102ab8:	2308      	movs	r3, #8
 8102aba:	61fb      	str	r3, [r7, #28]
 8102abc:	e037      	b.n	8102b2e <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8102abe:	697b      	ldr	r3, [r7, #20]
 8102ac0:	2b00      	cmp	r3, #0
 8102ac2:	d005      	beq.n	8102ad0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8102ac4:	697b      	ldr	r3, [r7, #20]
 8102ac6:	2b05      	cmp	r3, #5
 8102ac8:	d002      	beq.n	8102ad0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8102aca:	697b      	ldr	r3, [r7, #20]
 8102acc:	2b09      	cmp	r3, #9
 8102ace:	d111      	bne.n	8102af4 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8102ad0:	687b      	ldr	r3, [r7, #4]
 8102ad2:	681b      	ldr	r3, [r3, #0]
 8102ad4:	68db      	ldr	r3, [r3, #12]
 8102ad6:	f003 0301 	and.w	r3, r3, #1
 8102ada:	2b00      	cmp	r3, #0
 8102adc:	d007      	beq.n	8102aee <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102ade:	687b      	ldr	r3, [r7, #4]
 8102ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102ae2:	f043 0220 	orr.w	r2, r3, #32
 8102ae6:	687b      	ldr	r3, [r7, #4]
 8102ae8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8102aea:	2301      	movs	r3, #1
 8102aec:	e0b1      	b.n	8102c52 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8102aee:	2304      	movs	r3, #4
 8102af0:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8102af2:	e01c      	b.n	8102b2e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8102af4:	687b      	ldr	r3, [r7, #4]
 8102af6:	681b      	ldr	r3, [r3, #0]
 8102af8:	4a58      	ldr	r2, [pc, #352]	; (8102c5c <HAL_ADC_PollForConversion+0x1d8>)
 8102afa:	4293      	cmp	r3, r2
 8102afc:	d004      	beq.n	8102b08 <HAL_ADC_PollForConversion+0x84>
 8102afe:	687b      	ldr	r3, [r7, #4]
 8102b00:	681b      	ldr	r3, [r3, #0]
 8102b02:	4a57      	ldr	r2, [pc, #348]	; (8102c60 <HAL_ADC_PollForConversion+0x1dc>)
 8102b04:	4293      	cmp	r3, r2
 8102b06:	d101      	bne.n	8102b0c <HAL_ADC_PollForConversion+0x88>
 8102b08:	4b56      	ldr	r3, [pc, #344]	; (8102c64 <HAL_ADC_PollForConversion+0x1e0>)
 8102b0a:	e000      	b.n	8102b0e <HAL_ADC_PollForConversion+0x8a>
 8102b0c:	4b56      	ldr	r3, [pc, #344]	; (8102c68 <HAL_ADC_PollForConversion+0x1e4>)
 8102b0e:	4618      	mov	r0, r3
 8102b10:	f7ff fc8e 	bl	8102430 <LL_ADC_GetMultiDMATransfer>
 8102b14:	4603      	mov	r3, r0
 8102b16:	2b00      	cmp	r3, #0
 8102b18:	d007      	beq.n	8102b2a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102b1a:	687b      	ldr	r3, [r7, #4]
 8102b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102b1e:	f043 0220 	orr.w	r2, r3, #32
 8102b22:	687b      	ldr	r3, [r7, #4]
 8102b24:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8102b26:	2301      	movs	r3, #1
 8102b28:	e093      	b.n	8102c52 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8102b2a:	2304      	movs	r3, #4
 8102b2c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8102b2e:	f7ff fb1f 	bl	8102170 <HAL_GetTick>
 8102b32:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8102b34:	e021      	b.n	8102b7a <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8102b36:	683b      	ldr	r3, [r7, #0]
 8102b38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8102b3c:	d01d      	beq.n	8102b7a <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8102b3e:	f7ff fb17 	bl	8102170 <HAL_GetTick>
 8102b42:	4602      	mov	r2, r0
 8102b44:	693b      	ldr	r3, [r7, #16]
 8102b46:	1ad3      	subs	r3, r2, r3
 8102b48:	683a      	ldr	r2, [r7, #0]
 8102b4a:	429a      	cmp	r2, r3
 8102b4c:	d302      	bcc.n	8102b54 <HAL_ADC_PollForConversion+0xd0>
 8102b4e:	683b      	ldr	r3, [r7, #0]
 8102b50:	2b00      	cmp	r3, #0
 8102b52:	d112      	bne.n	8102b7a <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8102b54:	687b      	ldr	r3, [r7, #4]
 8102b56:	681b      	ldr	r3, [r3, #0]
 8102b58:	681a      	ldr	r2, [r3, #0]
 8102b5a:	69fb      	ldr	r3, [r7, #28]
 8102b5c:	4013      	ands	r3, r2
 8102b5e:	2b00      	cmp	r3, #0
 8102b60:	d10b      	bne.n	8102b7a <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8102b62:	687b      	ldr	r3, [r7, #4]
 8102b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102b66:	f043 0204 	orr.w	r2, r3, #4
 8102b6a:	687b      	ldr	r3, [r7, #4]
 8102b6c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8102b6e:	687b      	ldr	r3, [r7, #4]
 8102b70:	2200      	movs	r2, #0
 8102b72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8102b76:	2303      	movs	r3, #3
 8102b78:	e06b      	b.n	8102c52 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8102b7a:	687b      	ldr	r3, [r7, #4]
 8102b7c:	681b      	ldr	r3, [r3, #0]
 8102b7e:	681a      	ldr	r2, [r3, #0]
 8102b80:	69fb      	ldr	r3, [r7, #28]
 8102b82:	4013      	ands	r3, r2
 8102b84:	2b00      	cmp	r3, #0
 8102b86:	d0d6      	beq.n	8102b36 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8102b88:	687b      	ldr	r3, [r7, #4]
 8102b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102b8c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8102b90:	687b      	ldr	r3, [r7, #4]
 8102b92:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8102b94:	687b      	ldr	r3, [r7, #4]
 8102b96:	681b      	ldr	r3, [r3, #0]
 8102b98:	4618      	mov	r0, r3
 8102b9a:	f7ff fbad 	bl	81022f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8102b9e:	4603      	mov	r3, r0
 8102ba0:	2b00      	cmp	r3, #0
 8102ba2:	d01c      	beq.n	8102bde <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8102ba4:	687b      	ldr	r3, [r7, #4]
 8102ba6:	7d5b      	ldrb	r3, [r3, #21]
 8102ba8:	2b00      	cmp	r3, #0
 8102baa:	d118      	bne.n	8102bde <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8102bac:	687b      	ldr	r3, [r7, #4]
 8102bae:	681b      	ldr	r3, [r3, #0]
 8102bb0:	681b      	ldr	r3, [r3, #0]
 8102bb2:	f003 0308 	and.w	r3, r3, #8
 8102bb6:	2b08      	cmp	r3, #8
 8102bb8:	d111      	bne.n	8102bde <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8102bba:	687b      	ldr	r3, [r7, #4]
 8102bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102bbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8102bc2:	687b      	ldr	r3, [r7, #4]
 8102bc4:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8102bc6:	687b      	ldr	r3, [r7, #4]
 8102bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102bca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8102bce:	2b00      	cmp	r3, #0
 8102bd0:	d105      	bne.n	8102bde <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8102bd2:	687b      	ldr	r3, [r7, #4]
 8102bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102bd6:	f043 0201 	orr.w	r2, r3, #1
 8102bda:	687b      	ldr	r3, [r7, #4]
 8102bdc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8102bde:	687b      	ldr	r3, [r7, #4]
 8102be0:	681b      	ldr	r3, [r3, #0]
 8102be2:	4a1f      	ldr	r2, [pc, #124]	; (8102c60 <HAL_ADC_PollForConversion+0x1dc>)
 8102be4:	4293      	cmp	r3, r2
 8102be6:	d002      	beq.n	8102bee <HAL_ADC_PollForConversion+0x16a>
 8102be8:	687b      	ldr	r3, [r7, #4]
 8102bea:	681b      	ldr	r3, [r3, #0]
 8102bec:	e000      	b.n	8102bf0 <HAL_ADC_PollForConversion+0x16c>
 8102bee:	4b1b      	ldr	r3, [pc, #108]	; (8102c5c <HAL_ADC_PollForConversion+0x1d8>)
 8102bf0:	687a      	ldr	r2, [r7, #4]
 8102bf2:	6812      	ldr	r2, [r2, #0]
 8102bf4:	4293      	cmp	r3, r2
 8102bf6:	d008      	beq.n	8102c0a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8102bf8:	697b      	ldr	r3, [r7, #20]
 8102bfa:	2b00      	cmp	r3, #0
 8102bfc:	d005      	beq.n	8102c0a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8102bfe:	697b      	ldr	r3, [r7, #20]
 8102c00:	2b05      	cmp	r3, #5
 8102c02:	d002      	beq.n	8102c0a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8102c04:	697b      	ldr	r3, [r7, #20]
 8102c06:	2b09      	cmp	r3, #9
 8102c08:	d104      	bne.n	8102c14 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8102c0a:	687b      	ldr	r3, [r7, #4]
 8102c0c:	681b      	ldr	r3, [r3, #0]
 8102c0e:	68db      	ldr	r3, [r3, #12]
 8102c10:	61bb      	str	r3, [r7, #24]
 8102c12:	e00c      	b.n	8102c2e <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8102c14:	687b      	ldr	r3, [r7, #4]
 8102c16:	681b      	ldr	r3, [r3, #0]
 8102c18:	4a11      	ldr	r2, [pc, #68]	; (8102c60 <HAL_ADC_PollForConversion+0x1dc>)
 8102c1a:	4293      	cmp	r3, r2
 8102c1c:	d002      	beq.n	8102c24 <HAL_ADC_PollForConversion+0x1a0>
 8102c1e:	687b      	ldr	r3, [r7, #4]
 8102c20:	681b      	ldr	r3, [r3, #0]
 8102c22:	e000      	b.n	8102c26 <HAL_ADC_PollForConversion+0x1a2>
 8102c24:	4b0d      	ldr	r3, [pc, #52]	; (8102c5c <HAL_ADC_PollForConversion+0x1d8>)
 8102c26:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8102c28:	68fb      	ldr	r3, [r7, #12]
 8102c2a:	68db      	ldr	r3, [r3, #12]
 8102c2c:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8102c2e:	69fb      	ldr	r3, [r7, #28]
 8102c30:	2b08      	cmp	r3, #8
 8102c32:	d104      	bne.n	8102c3e <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8102c34:	687b      	ldr	r3, [r7, #4]
 8102c36:	681b      	ldr	r3, [r3, #0]
 8102c38:	2208      	movs	r2, #8
 8102c3a:	601a      	str	r2, [r3, #0]
 8102c3c:	e008      	b.n	8102c50 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8102c3e:	69bb      	ldr	r3, [r7, #24]
 8102c40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102c44:	2b00      	cmp	r3, #0
 8102c46:	d103      	bne.n	8102c50 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8102c48:	687b      	ldr	r3, [r7, #4]
 8102c4a:	681b      	ldr	r3, [r3, #0]
 8102c4c:	220c      	movs	r2, #12
 8102c4e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8102c50:	2300      	movs	r3, #0
}
 8102c52:	4618      	mov	r0, r3
 8102c54:	3720      	adds	r7, #32
 8102c56:	46bd      	mov	sp, r7
 8102c58:	bd80      	pop	{r7, pc}
 8102c5a:	bf00      	nop
 8102c5c:	40022000 	.word	0x40022000
 8102c60:	40022100 	.word	0x40022100
 8102c64:	40022300 	.word	0x40022300
 8102c68:	58026300 	.word	0x58026300

08102c6c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8102c6c:	b480      	push	{r7}
 8102c6e:	b083      	sub	sp, #12
 8102c70:	af00      	add	r7, sp, #0
 8102c72:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8102c74:	687b      	ldr	r3, [r7, #4]
 8102c76:	681b      	ldr	r3, [r3, #0]
 8102c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8102c7a:	4618      	mov	r0, r3
 8102c7c:	370c      	adds	r7, #12
 8102c7e:	46bd      	mov	sp, r7
 8102c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c84:	4770      	bx	lr
	...

08102c88 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8102c88:	b590      	push	{r4, r7, lr}
 8102c8a:	b0a1      	sub	sp, #132	; 0x84
 8102c8c:	af00      	add	r7, sp, #0
 8102c8e:	6078      	str	r0, [r7, #4]
 8102c90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8102c92:	2300      	movs	r3, #0
 8102c94:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8102c98:	2300      	movs	r3, #0
 8102c9a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8102c9c:	683b      	ldr	r3, [r7, #0]
 8102c9e:	68db      	ldr	r3, [r3, #12]
 8102ca0:	4a9d      	ldr	r2, [pc, #628]	; (8102f18 <HAL_ADC_ConfigChannel+0x290>)
 8102ca2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8102ca4:	687b      	ldr	r3, [r7, #4]
 8102ca6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8102caa:	2b01      	cmp	r3, #1
 8102cac:	d101      	bne.n	8102cb2 <HAL_ADC_ConfigChannel+0x2a>
 8102cae:	2302      	movs	r3, #2
 8102cb0:	e321      	b.n	81032f6 <HAL_ADC_ConfigChannel+0x66e>
 8102cb2:	687b      	ldr	r3, [r7, #4]
 8102cb4:	2201      	movs	r2, #1
 8102cb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8102cba:	687b      	ldr	r3, [r7, #4]
 8102cbc:	681b      	ldr	r3, [r3, #0]
 8102cbe:	4618      	mov	r0, r3
 8102cc0:	f7ff fc4d 	bl	810255e <LL_ADC_REG_IsConversionOngoing>
 8102cc4:	4603      	mov	r3, r0
 8102cc6:	2b00      	cmp	r3, #0
 8102cc8:	f040 8306 	bne.w	81032d8 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8102ccc:	683b      	ldr	r3, [r7, #0]
 8102cce:	681b      	ldr	r3, [r3, #0]
 8102cd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102cd4:	2b00      	cmp	r3, #0
 8102cd6:	d108      	bne.n	8102cea <HAL_ADC_ConfigChannel+0x62>
 8102cd8:	683b      	ldr	r3, [r7, #0]
 8102cda:	681b      	ldr	r3, [r3, #0]
 8102cdc:	0e9b      	lsrs	r3, r3, #26
 8102cde:	f003 031f 	and.w	r3, r3, #31
 8102ce2:	2201      	movs	r2, #1
 8102ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8102ce8:	e016      	b.n	8102d18 <HAL_ADC_ConfigChannel+0x90>
 8102cea:	683b      	ldr	r3, [r7, #0]
 8102cec:	681b      	ldr	r3, [r3, #0]
 8102cee:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102cf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8102cf2:	fa93 f3a3 	rbit	r3, r3
 8102cf6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8102cf8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8102cfa:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8102cfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8102cfe:	2b00      	cmp	r3, #0
 8102d00:	d101      	bne.n	8102d06 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8102d02:	2320      	movs	r3, #32
 8102d04:	e003      	b.n	8102d0e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8102d06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8102d08:	fab3 f383 	clz	r3, r3
 8102d0c:	b2db      	uxtb	r3, r3
 8102d0e:	f003 031f 	and.w	r3, r3, #31
 8102d12:	2201      	movs	r2, #1
 8102d14:	fa02 f303 	lsl.w	r3, r2, r3
 8102d18:	687a      	ldr	r2, [r7, #4]
 8102d1a:	6812      	ldr	r2, [r2, #0]
 8102d1c:	69d1      	ldr	r1, [r2, #28]
 8102d1e:	687a      	ldr	r2, [r7, #4]
 8102d20:	6812      	ldr	r2, [r2, #0]
 8102d22:	430b      	orrs	r3, r1
 8102d24:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8102d26:	687b      	ldr	r3, [r7, #4]
 8102d28:	6818      	ldr	r0, [r3, #0]
 8102d2a:	683b      	ldr	r3, [r7, #0]
 8102d2c:	6859      	ldr	r1, [r3, #4]
 8102d2e:	683b      	ldr	r3, [r7, #0]
 8102d30:	681b      	ldr	r3, [r3, #0]
 8102d32:	461a      	mov	r2, r3
 8102d34:	f7ff faf3 	bl	810231e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8102d38:	687b      	ldr	r3, [r7, #4]
 8102d3a:	681b      	ldr	r3, [r3, #0]
 8102d3c:	4618      	mov	r0, r3
 8102d3e:	f7ff fc0e 	bl	810255e <LL_ADC_REG_IsConversionOngoing>
 8102d42:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8102d44:	687b      	ldr	r3, [r7, #4]
 8102d46:	681b      	ldr	r3, [r3, #0]
 8102d48:	4618      	mov	r0, r3
 8102d4a:	f7ff fc1b 	bl	8102584 <LL_ADC_INJ_IsConversionOngoing>
 8102d4e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8102d50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8102d52:	2b00      	cmp	r3, #0
 8102d54:	f040 80b3 	bne.w	8102ebe <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8102d58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8102d5a:	2b00      	cmp	r3, #0
 8102d5c:	f040 80af 	bne.w	8102ebe <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8102d60:	687b      	ldr	r3, [r7, #4]
 8102d62:	6818      	ldr	r0, [r3, #0]
 8102d64:	683b      	ldr	r3, [r7, #0]
 8102d66:	6819      	ldr	r1, [r3, #0]
 8102d68:	683b      	ldr	r3, [r7, #0]
 8102d6a:	689b      	ldr	r3, [r3, #8]
 8102d6c:	461a      	mov	r2, r3
 8102d6e:	f7ff fb02 	bl	8102376 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8102d72:	4b6a      	ldr	r3, [pc, #424]	; (8102f1c <HAL_ADC_ConfigChannel+0x294>)
 8102d74:	681b      	ldr	r3, [r3, #0]
 8102d76:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8102d7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102d7e:	d10b      	bne.n	8102d98 <HAL_ADC_ConfigChannel+0x110>
 8102d80:	683b      	ldr	r3, [r7, #0]
 8102d82:	695a      	ldr	r2, [r3, #20]
 8102d84:	687b      	ldr	r3, [r7, #4]
 8102d86:	681b      	ldr	r3, [r3, #0]
 8102d88:	68db      	ldr	r3, [r3, #12]
 8102d8a:	089b      	lsrs	r3, r3, #2
 8102d8c:	f003 0307 	and.w	r3, r3, #7
 8102d90:	005b      	lsls	r3, r3, #1
 8102d92:	fa02 f303 	lsl.w	r3, r2, r3
 8102d96:	e01d      	b.n	8102dd4 <HAL_ADC_ConfigChannel+0x14c>
 8102d98:	687b      	ldr	r3, [r7, #4]
 8102d9a:	681b      	ldr	r3, [r3, #0]
 8102d9c:	68db      	ldr	r3, [r3, #12]
 8102d9e:	f003 0310 	and.w	r3, r3, #16
 8102da2:	2b00      	cmp	r3, #0
 8102da4:	d10b      	bne.n	8102dbe <HAL_ADC_ConfigChannel+0x136>
 8102da6:	683b      	ldr	r3, [r7, #0]
 8102da8:	695a      	ldr	r2, [r3, #20]
 8102daa:	687b      	ldr	r3, [r7, #4]
 8102dac:	681b      	ldr	r3, [r3, #0]
 8102dae:	68db      	ldr	r3, [r3, #12]
 8102db0:	089b      	lsrs	r3, r3, #2
 8102db2:	f003 0307 	and.w	r3, r3, #7
 8102db6:	005b      	lsls	r3, r3, #1
 8102db8:	fa02 f303 	lsl.w	r3, r2, r3
 8102dbc:	e00a      	b.n	8102dd4 <HAL_ADC_ConfigChannel+0x14c>
 8102dbe:	683b      	ldr	r3, [r7, #0]
 8102dc0:	695a      	ldr	r2, [r3, #20]
 8102dc2:	687b      	ldr	r3, [r7, #4]
 8102dc4:	681b      	ldr	r3, [r3, #0]
 8102dc6:	68db      	ldr	r3, [r3, #12]
 8102dc8:	089b      	lsrs	r3, r3, #2
 8102dca:	f003 0304 	and.w	r3, r3, #4
 8102dce:	005b      	lsls	r3, r3, #1
 8102dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8102dd4:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8102dd6:	683b      	ldr	r3, [r7, #0]
 8102dd8:	691b      	ldr	r3, [r3, #16]
 8102dda:	2b04      	cmp	r3, #4
 8102ddc:	d027      	beq.n	8102e2e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8102dde:	687b      	ldr	r3, [r7, #4]
 8102de0:	6818      	ldr	r0, [r3, #0]
 8102de2:	683b      	ldr	r3, [r7, #0]
 8102de4:	6919      	ldr	r1, [r3, #16]
 8102de6:	683b      	ldr	r3, [r7, #0]
 8102de8:	681a      	ldr	r2, [r3, #0]
 8102dea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8102dec:	f7ff fa30 	bl	8102250 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8102df0:	687b      	ldr	r3, [r7, #4]
 8102df2:	6818      	ldr	r0, [r3, #0]
 8102df4:	683b      	ldr	r3, [r7, #0]
 8102df6:	6919      	ldr	r1, [r3, #16]
 8102df8:	683b      	ldr	r3, [r7, #0]
 8102dfa:	7e5b      	ldrb	r3, [r3, #25]
 8102dfc:	2b01      	cmp	r3, #1
 8102dfe:	d102      	bne.n	8102e06 <HAL_ADC_ConfigChannel+0x17e>
 8102e00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8102e04:	e000      	b.n	8102e08 <HAL_ADC_ConfigChannel+0x180>
 8102e06:	2300      	movs	r3, #0
 8102e08:	461a      	mov	r2, r3
 8102e0a:	f7ff fa5a 	bl	81022c2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8102e0e:	687b      	ldr	r3, [r7, #4]
 8102e10:	6818      	ldr	r0, [r3, #0]
 8102e12:	683b      	ldr	r3, [r7, #0]
 8102e14:	6919      	ldr	r1, [r3, #16]
 8102e16:	683b      	ldr	r3, [r7, #0]
 8102e18:	7e1b      	ldrb	r3, [r3, #24]
 8102e1a:	2b01      	cmp	r3, #1
 8102e1c:	d102      	bne.n	8102e24 <HAL_ADC_ConfigChannel+0x19c>
 8102e1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8102e22:	e000      	b.n	8102e26 <HAL_ADC_ConfigChannel+0x19e>
 8102e24:	2300      	movs	r3, #0
 8102e26:	461a      	mov	r2, r3
 8102e28:	f7ff fa32 	bl	8102290 <LL_ADC_SetDataRightShift>
 8102e2c:	e047      	b.n	8102ebe <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102e2e:	687b      	ldr	r3, [r7, #4]
 8102e30:	681b      	ldr	r3, [r3, #0]
 8102e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102e34:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102e38:	683b      	ldr	r3, [r7, #0]
 8102e3a:	681b      	ldr	r3, [r3, #0]
 8102e3c:	069b      	lsls	r3, r3, #26
 8102e3e:	429a      	cmp	r2, r3
 8102e40:	d107      	bne.n	8102e52 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8102e42:	687b      	ldr	r3, [r7, #4]
 8102e44:	681b      	ldr	r3, [r3, #0]
 8102e46:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8102e48:	687b      	ldr	r3, [r7, #4]
 8102e4a:	681b      	ldr	r3, [r3, #0]
 8102e4c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8102e50:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102e52:	687b      	ldr	r3, [r7, #4]
 8102e54:	681b      	ldr	r3, [r3, #0]
 8102e56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102e58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102e5c:	683b      	ldr	r3, [r7, #0]
 8102e5e:	681b      	ldr	r3, [r3, #0]
 8102e60:	069b      	lsls	r3, r3, #26
 8102e62:	429a      	cmp	r2, r3
 8102e64:	d107      	bne.n	8102e76 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8102e66:	687b      	ldr	r3, [r7, #4]
 8102e68:	681b      	ldr	r3, [r3, #0]
 8102e6a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8102e6c:	687b      	ldr	r3, [r7, #4]
 8102e6e:	681b      	ldr	r3, [r3, #0]
 8102e70:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8102e74:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102e76:	687b      	ldr	r3, [r7, #4]
 8102e78:	681b      	ldr	r3, [r3, #0]
 8102e7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8102e7c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102e80:	683b      	ldr	r3, [r7, #0]
 8102e82:	681b      	ldr	r3, [r3, #0]
 8102e84:	069b      	lsls	r3, r3, #26
 8102e86:	429a      	cmp	r2, r3
 8102e88:	d107      	bne.n	8102e9a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8102e8a:	687b      	ldr	r3, [r7, #4]
 8102e8c:	681b      	ldr	r3, [r3, #0]
 8102e8e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8102e90:	687b      	ldr	r3, [r7, #4]
 8102e92:	681b      	ldr	r3, [r3, #0]
 8102e94:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8102e98:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102e9a:	687b      	ldr	r3, [r7, #4]
 8102e9c:	681b      	ldr	r3, [r3, #0]
 8102e9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102ea0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102ea4:	683b      	ldr	r3, [r7, #0]
 8102ea6:	681b      	ldr	r3, [r3, #0]
 8102ea8:	069b      	lsls	r3, r3, #26
 8102eaa:	429a      	cmp	r2, r3
 8102eac:	d107      	bne.n	8102ebe <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8102eae:	687b      	ldr	r3, [r7, #4]
 8102eb0:	681b      	ldr	r3, [r3, #0]
 8102eb2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8102eb4:	687b      	ldr	r3, [r7, #4]
 8102eb6:	681b      	ldr	r3, [r3, #0]
 8102eb8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8102ebc:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8102ebe:	687b      	ldr	r3, [r7, #4]
 8102ec0:	681b      	ldr	r3, [r3, #0]
 8102ec2:	4618      	mov	r0, r3
 8102ec4:	f7ff fb24 	bl	8102510 <LL_ADC_IsEnabled>
 8102ec8:	4603      	mov	r3, r0
 8102eca:	2b00      	cmp	r3, #0
 8102ecc:	f040 820d 	bne.w	81032ea <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8102ed0:	687b      	ldr	r3, [r7, #4]
 8102ed2:	6818      	ldr	r0, [r3, #0]
 8102ed4:	683b      	ldr	r3, [r7, #0]
 8102ed6:	6819      	ldr	r1, [r3, #0]
 8102ed8:	683b      	ldr	r3, [r7, #0]
 8102eda:	68db      	ldr	r3, [r3, #12]
 8102edc:	461a      	mov	r2, r3
 8102ede:	f7ff fa75 	bl	81023cc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8102ee2:	683b      	ldr	r3, [r7, #0]
 8102ee4:	68db      	ldr	r3, [r3, #12]
 8102ee6:	4a0c      	ldr	r2, [pc, #48]	; (8102f18 <HAL_ADC_ConfigChannel+0x290>)
 8102ee8:	4293      	cmp	r3, r2
 8102eea:	f040 8133 	bne.w	8103154 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102eee:	687b      	ldr	r3, [r7, #4]
 8102ef0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8102ef2:	683b      	ldr	r3, [r7, #0]
 8102ef4:	681b      	ldr	r3, [r3, #0]
 8102ef6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102efa:	2b00      	cmp	r3, #0
 8102efc:	d110      	bne.n	8102f20 <HAL_ADC_ConfigChannel+0x298>
 8102efe:	683b      	ldr	r3, [r7, #0]
 8102f00:	681b      	ldr	r3, [r3, #0]
 8102f02:	0e9b      	lsrs	r3, r3, #26
 8102f04:	3301      	adds	r3, #1
 8102f06:	f003 031f 	and.w	r3, r3, #31
 8102f0a:	2b09      	cmp	r3, #9
 8102f0c:	bf94      	ite	ls
 8102f0e:	2301      	movls	r3, #1
 8102f10:	2300      	movhi	r3, #0
 8102f12:	b2db      	uxtb	r3, r3
 8102f14:	e01e      	b.n	8102f54 <HAL_ADC_ConfigChannel+0x2cc>
 8102f16:	bf00      	nop
 8102f18:	47ff0000 	.word	0x47ff0000
 8102f1c:	5c001000 	.word	0x5c001000
 8102f20:	683b      	ldr	r3, [r7, #0]
 8102f22:	681b      	ldr	r3, [r3, #0]
 8102f24:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102f26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8102f28:	fa93 f3a3 	rbit	r3, r3
 8102f2c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8102f2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8102f30:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8102f32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8102f34:	2b00      	cmp	r3, #0
 8102f36:	d101      	bne.n	8102f3c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8102f38:	2320      	movs	r3, #32
 8102f3a:	e003      	b.n	8102f44 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8102f3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8102f3e:	fab3 f383 	clz	r3, r3
 8102f42:	b2db      	uxtb	r3, r3
 8102f44:	3301      	adds	r3, #1
 8102f46:	f003 031f 	and.w	r3, r3, #31
 8102f4a:	2b09      	cmp	r3, #9
 8102f4c:	bf94      	ite	ls
 8102f4e:	2301      	movls	r3, #1
 8102f50:	2300      	movhi	r3, #0
 8102f52:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102f54:	2b00      	cmp	r3, #0
 8102f56:	d079      	beq.n	810304c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8102f58:	683b      	ldr	r3, [r7, #0]
 8102f5a:	681b      	ldr	r3, [r3, #0]
 8102f5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102f60:	2b00      	cmp	r3, #0
 8102f62:	d107      	bne.n	8102f74 <HAL_ADC_ConfigChannel+0x2ec>
 8102f64:	683b      	ldr	r3, [r7, #0]
 8102f66:	681b      	ldr	r3, [r3, #0]
 8102f68:	0e9b      	lsrs	r3, r3, #26
 8102f6a:	3301      	adds	r3, #1
 8102f6c:	069b      	lsls	r3, r3, #26
 8102f6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102f72:	e015      	b.n	8102fa0 <HAL_ADC_ConfigChannel+0x318>
 8102f74:	683b      	ldr	r3, [r7, #0]
 8102f76:	681b      	ldr	r3, [r3, #0]
 8102f78:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8102f7c:	fa93 f3a3 	rbit	r3, r3
 8102f80:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8102f82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8102f84:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8102f86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8102f88:	2b00      	cmp	r3, #0
 8102f8a:	d101      	bne.n	8102f90 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8102f8c:	2320      	movs	r3, #32
 8102f8e:	e003      	b.n	8102f98 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8102f90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8102f92:	fab3 f383 	clz	r3, r3
 8102f96:	b2db      	uxtb	r3, r3
 8102f98:	3301      	adds	r3, #1
 8102f9a:	069b      	lsls	r3, r3, #26
 8102f9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102fa0:	683b      	ldr	r3, [r7, #0]
 8102fa2:	681b      	ldr	r3, [r3, #0]
 8102fa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102fa8:	2b00      	cmp	r3, #0
 8102faa:	d109      	bne.n	8102fc0 <HAL_ADC_ConfigChannel+0x338>
 8102fac:	683b      	ldr	r3, [r7, #0]
 8102fae:	681b      	ldr	r3, [r3, #0]
 8102fb0:	0e9b      	lsrs	r3, r3, #26
 8102fb2:	3301      	adds	r3, #1
 8102fb4:	f003 031f 	and.w	r3, r3, #31
 8102fb8:	2101      	movs	r1, #1
 8102fba:	fa01 f303 	lsl.w	r3, r1, r3
 8102fbe:	e017      	b.n	8102ff0 <HAL_ADC_ConfigChannel+0x368>
 8102fc0:	683b      	ldr	r3, [r7, #0]
 8102fc2:	681b      	ldr	r3, [r3, #0]
 8102fc4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102fc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8102fc8:	fa93 f3a3 	rbit	r3, r3
 8102fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8102fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8102fd0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8102fd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8102fd4:	2b00      	cmp	r3, #0
 8102fd6:	d101      	bne.n	8102fdc <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8102fd8:	2320      	movs	r3, #32
 8102fda:	e003      	b.n	8102fe4 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8102fdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8102fde:	fab3 f383 	clz	r3, r3
 8102fe2:	b2db      	uxtb	r3, r3
 8102fe4:	3301      	adds	r3, #1
 8102fe6:	f003 031f 	and.w	r3, r3, #31
 8102fea:	2101      	movs	r1, #1
 8102fec:	fa01 f303 	lsl.w	r3, r1, r3
 8102ff0:	ea42 0103 	orr.w	r1, r2, r3
 8102ff4:	683b      	ldr	r3, [r7, #0]
 8102ff6:	681b      	ldr	r3, [r3, #0]
 8102ff8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102ffc:	2b00      	cmp	r3, #0
 8102ffe:	d10a      	bne.n	8103016 <HAL_ADC_ConfigChannel+0x38e>
 8103000:	683b      	ldr	r3, [r7, #0]
 8103002:	681b      	ldr	r3, [r3, #0]
 8103004:	0e9b      	lsrs	r3, r3, #26
 8103006:	3301      	adds	r3, #1
 8103008:	f003 021f 	and.w	r2, r3, #31
 810300c:	4613      	mov	r3, r2
 810300e:	005b      	lsls	r3, r3, #1
 8103010:	4413      	add	r3, r2
 8103012:	051b      	lsls	r3, r3, #20
 8103014:	e018      	b.n	8103048 <HAL_ADC_ConfigChannel+0x3c0>
 8103016:	683b      	ldr	r3, [r7, #0]
 8103018:	681b      	ldr	r3, [r3, #0]
 810301a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810301c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810301e:	fa93 f3a3 	rbit	r3, r3
 8103022:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8103024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103026:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8103028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810302a:	2b00      	cmp	r3, #0
 810302c:	d101      	bne.n	8103032 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 810302e:	2320      	movs	r3, #32
 8103030:	e003      	b.n	810303a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8103032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103034:	fab3 f383 	clz	r3, r3
 8103038:	b2db      	uxtb	r3, r3
 810303a:	3301      	adds	r3, #1
 810303c:	f003 021f 	and.w	r2, r3, #31
 8103040:	4613      	mov	r3, r2
 8103042:	005b      	lsls	r3, r3, #1
 8103044:	4413      	add	r3, r2
 8103046:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8103048:	430b      	orrs	r3, r1
 810304a:	e07e      	b.n	810314a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 810304c:	683b      	ldr	r3, [r7, #0]
 810304e:	681b      	ldr	r3, [r3, #0]
 8103050:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103054:	2b00      	cmp	r3, #0
 8103056:	d107      	bne.n	8103068 <HAL_ADC_ConfigChannel+0x3e0>
 8103058:	683b      	ldr	r3, [r7, #0]
 810305a:	681b      	ldr	r3, [r3, #0]
 810305c:	0e9b      	lsrs	r3, r3, #26
 810305e:	3301      	adds	r3, #1
 8103060:	069b      	lsls	r3, r3, #26
 8103062:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103066:	e015      	b.n	8103094 <HAL_ADC_ConfigChannel+0x40c>
 8103068:	683b      	ldr	r3, [r7, #0]
 810306a:	681b      	ldr	r3, [r3, #0]
 810306c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810306e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103070:	fa93 f3a3 	rbit	r3, r3
 8103074:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8103076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103078:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 810307a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810307c:	2b00      	cmp	r3, #0
 810307e:	d101      	bne.n	8103084 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8103080:	2320      	movs	r3, #32
 8103082:	e003      	b.n	810308c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8103084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103086:	fab3 f383 	clz	r3, r3
 810308a:	b2db      	uxtb	r3, r3
 810308c:	3301      	adds	r3, #1
 810308e:	069b      	lsls	r3, r3, #26
 8103090:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103094:	683b      	ldr	r3, [r7, #0]
 8103096:	681b      	ldr	r3, [r3, #0]
 8103098:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810309c:	2b00      	cmp	r3, #0
 810309e:	d109      	bne.n	81030b4 <HAL_ADC_ConfigChannel+0x42c>
 81030a0:	683b      	ldr	r3, [r7, #0]
 81030a2:	681b      	ldr	r3, [r3, #0]
 81030a4:	0e9b      	lsrs	r3, r3, #26
 81030a6:	3301      	adds	r3, #1
 81030a8:	f003 031f 	and.w	r3, r3, #31
 81030ac:	2101      	movs	r1, #1
 81030ae:	fa01 f303 	lsl.w	r3, r1, r3
 81030b2:	e017      	b.n	81030e4 <HAL_ADC_ConfigChannel+0x45c>
 81030b4:	683b      	ldr	r3, [r7, #0]
 81030b6:	681b      	ldr	r3, [r3, #0]
 81030b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81030ba:	69fb      	ldr	r3, [r7, #28]
 81030bc:	fa93 f3a3 	rbit	r3, r3
 81030c0:	61bb      	str	r3, [r7, #24]
  return result;
 81030c2:	69bb      	ldr	r3, [r7, #24]
 81030c4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 81030c6:	6a3b      	ldr	r3, [r7, #32]
 81030c8:	2b00      	cmp	r3, #0
 81030ca:	d101      	bne.n	81030d0 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 81030cc:	2320      	movs	r3, #32
 81030ce:	e003      	b.n	81030d8 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 81030d0:	6a3b      	ldr	r3, [r7, #32]
 81030d2:	fab3 f383 	clz	r3, r3
 81030d6:	b2db      	uxtb	r3, r3
 81030d8:	3301      	adds	r3, #1
 81030da:	f003 031f 	and.w	r3, r3, #31
 81030de:	2101      	movs	r1, #1
 81030e0:	fa01 f303 	lsl.w	r3, r1, r3
 81030e4:	ea42 0103 	orr.w	r1, r2, r3
 81030e8:	683b      	ldr	r3, [r7, #0]
 81030ea:	681b      	ldr	r3, [r3, #0]
 81030ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81030f0:	2b00      	cmp	r3, #0
 81030f2:	d10d      	bne.n	8103110 <HAL_ADC_ConfigChannel+0x488>
 81030f4:	683b      	ldr	r3, [r7, #0]
 81030f6:	681b      	ldr	r3, [r3, #0]
 81030f8:	0e9b      	lsrs	r3, r3, #26
 81030fa:	3301      	adds	r3, #1
 81030fc:	f003 021f 	and.w	r2, r3, #31
 8103100:	4613      	mov	r3, r2
 8103102:	005b      	lsls	r3, r3, #1
 8103104:	4413      	add	r3, r2
 8103106:	3b1e      	subs	r3, #30
 8103108:	051b      	lsls	r3, r3, #20
 810310a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810310e:	e01b      	b.n	8103148 <HAL_ADC_ConfigChannel+0x4c0>
 8103110:	683b      	ldr	r3, [r7, #0]
 8103112:	681b      	ldr	r3, [r3, #0]
 8103114:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103116:	693b      	ldr	r3, [r7, #16]
 8103118:	fa93 f3a3 	rbit	r3, r3
 810311c:	60fb      	str	r3, [r7, #12]
  return result;
 810311e:	68fb      	ldr	r3, [r7, #12]
 8103120:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8103122:	697b      	ldr	r3, [r7, #20]
 8103124:	2b00      	cmp	r3, #0
 8103126:	d101      	bne.n	810312c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8103128:	2320      	movs	r3, #32
 810312a:	e003      	b.n	8103134 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 810312c:	697b      	ldr	r3, [r7, #20]
 810312e:	fab3 f383 	clz	r3, r3
 8103132:	b2db      	uxtb	r3, r3
 8103134:	3301      	adds	r3, #1
 8103136:	f003 021f 	and.w	r2, r3, #31
 810313a:	4613      	mov	r3, r2
 810313c:	005b      	lsls	r3, r3, #1
 810313e:	4413      	add	r3, r2
 8103140:	3b1e      	subs	r3, #30
 8103142:	051b      	lsls	r3, r3, #20
 8103144:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8103148:	430b      	orrs	r3, r1
 810314a:	683a      	ldr	r2, [r7, #0]
 810314c:	6892      	ldr	r2, [r2, #8]
 810314e:	4619      	mov	r1, r3
 8103150:	f7ff f911 	bl	8102376 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8103154:	683b      	ldr	r3, [r7, #0]
 8103156:	681b      	ldr	r3, [r3, #0]
 8103158:	2b00      	cmp	r3, #0
 810315a:	f280 80c6 	bge.w	81032ea <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 810315e:	687b      	ldr	r3, [r7, #4]
 8103160:	681b      	ldr	r3, [r3, #0]
 8103162:	4a67      	ldr	r2, [pc, #412]	; (8103300 <HAL_ADC_ConfigChannel+0x678>)
 8103164:	4293      	cmp	r3, r2
 8103166:	d004      	beq.n	8103172 <HAL_ADC_ConfigChannel+0x4ea>
 8103168:	687b      	ldr	r3, [r7, #4]
 810316a:	681b      	ldr	r3, [r3, #0]
 810316c:	4a65      	ldr	r2, [pc, #404]	; (8103304 <HAL_ADC_ConfigChannel+0x67c>)
 810316e:	4293      	cmp	r3, r2
 8103170:	d101      	bne.n	8103176 <HAL_ADC_ConfigChannel+0x4ee>
 8103172:	4b65      	ldr	r3, [pc, #404]	; (8103308 <HAL_ADC_ConfigChannel+0x680>)
 8103174:	e000      	b.n	8103178 <HAL_ADC_ConfigChannel+0x4f0>
 8103176:	4b65      	ldr	r3, [pc, #404]	; (810330c <HAL_ADC_ConfigChannel+0x684>)
 8103178:	4618      	mov	r0, r3
 810317a:	f7ff f85b 	bl	8102234 <LL_ADC_GetCommonPathInternalCh>
 810317e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8103180:	687b      	ldr	r3, [r7, #4]
 8103182:	681b      	ldr	r3, [r3, #0]
 8103184:	4a5e      	ldr	r2, [pc, #376]	; (8103300 <HAL_ADC_ConfigChannel+0x678>)
 8103186:	4293      	cmp	r3, r2
 8103188:	d004      	beq.n	8103194 <HAL_ADC_ConfigChannel+0x50c>
 810318a:	687b      	ldr	r3, [r7, #4]
 810318c:	681b      	ldr	r3, [r3, #0]
 810318e:	4a5d      	ldr	r2, [pc, #372]	; (8103304 <HAL_ADC_ConfigChannel+0x67c>)
 8103190:	4293      	cmp	r3, r2
 8103192:	d10e      	bne.n	81031b2 <HAL_ADC_ConfigChannel+0x52a>
 8103194:	485a      	ldr	r0, [pc, #360]	; (8103300 <HAL_ADC_ConfigChannel+0x678>)
 8103196:	f7ff f9bb 	bl	8102510 <LL_ADC_IsEnabled>
 810319a:	4604      	mov	r4, r0
 810319c:	4859      	ldr	r0, [pc, #356]	; (8103304 <HAL_ADC_ConfigChannel+0x67c>)
 810319e:	f7ff f9b7 	bl	8102510 <LL_ADC_IsEnabled>
 81031a2:	4603      	mov	r3, r0
 81031a4:	4323      	orrs	r3, r4
 81031a6:	2b00      	cmp	r3, #0
 81031a8:	bf0c      	ite	eq
 81031aa:	2301      	moveq	r3, #1
 81031ac:	2300      	movne	r3, #0
 81031ae:	b2db      	uxtb	r3, r3
 81031b0:	e008      	b.n	81031c4 <HAL_ADC_ConfigChannel+0x53c>
 81031b2:	4857      	ldr	r0, [pc, #348]	; (8103310 <HAL_ADC_ConfigChannel+0x688>)
 81031b4:	f7ff f9ac 	bl	8102510 <LL_ADC_IsEnabled>
 81031b8:	4603      	mov	r3, r0
 81031ba:	2b00      	cmp	r3, #0
 81031bc:	bf0c      	ite	eq
 81031be:	2301      	moveq	r3, #1
 81031c0:	2300      	movne	r3, #0
 81031c2:	b2db      	uxtb	r3, r3
 81031c4:	2b00      	cmp	r3, #0
 81031c6:	d07d      	beq.n	81032c4 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 81031c8:	683b      	ldr	r3, [r7, #0]
 81031ca:	681b      	ldr	r3, [r3, #0]
 81031cc:	4a51      	ldr	r2, [pc, #324]	; (8103314 <HAL_ADC_ConfigChannel+0x68c>)
 81031ce:	4293      	cmp	r3, r2
 81031d0:	d130      	bne.n	8103234 <HAL_ADC_ConfigChannel+0x5ac>
 81031d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81031d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 81031d8:	2b00      	cmp	r3, #0
 81031da:	d12b      	bne.n	8103234 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 81031dc:	687b      	ldr	r3, [r7, #4]
 81031de:	681b      	ldr	r3, [r3, #0]
 81031e0:	4a4b      	ldr	r2, [pc, #300]	; (8103310 <HAL_ADC_ConfigChannel+0x688>)
 81031e2:	4293      	cmp	r3, r2
 81031e4:	f040 8081 	bne.w	81032ea <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 81031e8:	687b      	ldr	r3, [r7, #4]
 81031ea:	681b      	ldr	r3, [r3, #0]
 81031ec:	4a44      	ldr	r2, [pc, #272]	; (8103300 <HAL_ADC_ConfigChannel+0x678>)
 81031ee:	4293      	cmp	r3, r2
 81031f0:	d004      	beq.n	81031fc <HAL_ADC_ConfigChannel+0x574>
 81031f2:	687b      	ldr	r3, [r7, #4]
 81031f4:	681b      	ldr	r3, [r3, #0]
 81031f6:	4a43      	ldr	r2, [pc, #268]	; (8103304 <HAL_ADC_ConfigChannel+0x67c>)
 81031f8:	4293      	cmp	r3, r2
 81031fa:	d101      	bne.n	8103200 <HAL_ADC_ConfigChannel+0x578>
 81031fc:	4a42      	ldr	r2, [pc, #264]	; (8103308 <HAL_ADC_ConfigChannel+0x680>)
 81031fe:	e000      	b.n	8103202 <HAL_ADC_ConfigChannel+0x57a>
 8103200:	4a42      	ldr	r2, [pc, #264]	; (810330c <HAL_ADC_ConfigChannel+0x684>)
 8103202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103204:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8103208:	4619      	mov	r1, r3
 810320a:	4610      	mov	r0, r2
 810320c:	f7fe ffff 	bl	810220e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8103210:	4b41      	ldr	r3, [pc, #260]	; (8103318 <HAL_ADC_ConfigChannel+0x690>)
 8103212:	681b      	ldr	r3, [r3, #0]
 8103214:	099b      	lsrs	r3, r3, #6
 8103216:	4a41      	ldr	r2, [pc, #260]	; (810331c <HAL_ADC_ConfigChannel+0x694>)
 8103218:	fba2 2303 	umull	r2, r3, r2, r3
 810321c:	099b      	lsrs	r3, r3, #6
 810321e:	3301      	adds	r3, #1
 8103220:	005b      	lsls	r3, r3, #1
 8103222:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8103224:	e002      	b.n	810322c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8103226:	68bb      	ldr	r3, [r7, #8]
 8103228:	3b01      	subs	r3, #1
 810322a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 810322c:	68bb      	ldr	r3, [r7, #8]
 810322e:	2b00      	cmp	r3, #0
 8103230:	d1f9      	bne.n	8103226 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8103232:	e05a      	b.n	81032ea <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8103234:	683b      	ldr	r3, [r7, #0]
 8103236:	681b      	ldr	r3, [r3, #0]
 8103238:	4a39      	ldr	r2, [pc, #228]	; (8103320 <HAL_ADC_ConfigChannel+0x698>)
 810323a:	4293      	cmp	r3, r2
 810323c:	d11e      	bne.n	810327c <HAL_ADC_ConfigChannel+0x5f4>
 810323e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103240:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103244:	2b00      	cmp	r3, #0
 8103246:	d119      	bne.n	810327c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8103248:	687b      	ldr	r3, [r7, #4]
 810324a:	681b      	ldr	r3, [r3, #0]
 810324c:	4a30      	ldr	r2, [pc, #192]	; (8103310 <HAL_ADC_ConfigChannel+0x688>)
 810324e:	4293      	cmp	r3, r2
 8103250:	d14b      	bne.n	81032ea <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8103252:	687b      	ldr	r3, [r7, #4]
 8103254:	681b      	ldr	r3, [r3, #0]
 8103256:	4a2a      	ldr	r2, [pc, #168]	; (8103300 <HAL_ADC_ConfigChannel+0x678>)
 8103258:	4293      	cmp	r3, r2
 810325a:	d004      	beq.n	8103266 <HAL_ADC_ConfigChannel+0x5de>
 810325c:	687b      	ldr	r3, [r7, #4]
 810325e:	681b      	ldr	r3, [r3, #0]
 8103260:	4a28      	ldr	r2, [pc, #160]	; (8103304 <HAL_ADC_ConfigChannel+0x67c>)
 8103262:	4293      	cmp	r3, r2
 8103264:	d101      	bne.n	810326a <HAL_ADC_ConfigChannel+0x5e2>
 8103266:	4a28      	ldr	r2, [pc, #160]	; (8103308 <HAL_ADC_ConfigChannel+0x680>)
 8103268:	e000      	b.n	810326c <HAL_ADC_ConfigChannel+0x5e4>
 810326a:	4a28      	ldr	r2, [pc, #160]	; (810330c <HAL_ADC_ConfigChannel+0x684>)
 810326c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810326e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8103272:	4619      	mov	r1, r3
 8103274:	4610      	mov	r0, r2
 8103276:	f7fe ffca 	bl	810220e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 810327a:	e036      	b.n	81032ea <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 810327c:	683b      	ldr	r3, [r7, #0]
 810327e:	681b      	ldr	r3, [r3, #0]
 8103280:	4a28      	ldr	r2, [pc, #160]	; (8103324 <HAL_ADC_ConfigChannel+0x69c>)
 8103282:	4293      	cmp	r3, r2
 8103284:	d131      	bne.n	81032ea <HAL_ADC_ConfigChannel+0x662>
 8103286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103288:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810328c:	2b00      	cmp	r3, #0
 810328e:	d12c      	bne.n	81032ea <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8103290:	687b      	ldr	r3, [r7, #4]
 8103292:	681b      	ldr	r3, [r3, #0]
 8103294:	4a1e      	ldr	r2, [pc, #120]	; (8103310 <HAL_ADC_ConfigChannel+0x688>)
 8103296:	4293      	cmp	r3, r2
 8103298:	d127      	bne.n	81032ea <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 810329a:	687b      	ldr	r3, [r7, #4]
 810329c:	681b      	ldr	r3, [r3, #0]
 810329e:	4a18      	ldr	r2, [pc, #96]	; (8103300 <HAL_ADC_ConfigChannel+0x678>)
 81032a0:	4293      	cmp	r3, r2
 81032a2:	d004      	beq.n	81032ae <HAL_ADC_ConfigChannel+0x626>
 81032a4:	687b      	ldr	r3, [r7, #4]
 81032a6:	681b      	ldr	r3, [r3, #0]
 81032a8:	4a16      	ldr	r2, [pc, #88]	; (8103304 <HAL_ADC_ConfigChannel+0x67c>)
 81032aa:	4293      	cmp	r3, r2
 81032ac:	d101      	bne.n	81032b2 <HAL_ADC_ConfigChannel+0x62a>
 81032ae:	4a16      	ldr	r2, [pc, #88]	; (8103308 <HAL_ADC_ConfigChannel+0x680>)
 81032b0:	e000      	b.n	81032b4 <HAL_ADC_ConfigChannel+0x62c>
 81032b2:	4a16      	ldr	r2, [pc, #88]	; (810330c <HAL_ADC_ConfigChannel+0x684>)
 81032b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81032b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 81032ba:	4619      	mov	r1, r3
 81032bc:	4610      	mov	r0, r2
 81032be:	f7fe ffa6 	bl	810220e <LL_ADC_SetCommonPathInternalCh>
 81032c2:	e012      	b.n	81032ea <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81032c4:	687b      	ldr	r3, [r7, #4]
 81032c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81032c8:	f043 0220 	orr.w	r2, r3, #32
 81032cc:	687b      	ldr	r3, [r7, #4]
 81032ce:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 81032d0:	2301      	movs	r3, #1
 81032d2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 81032d6:	e008      	b.n	81032ea <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81032d8:	687b      	ldr	r3, [r7, #4]
 81032da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81032dc:	f043 0220 	orr.w	r2, r3, #32
 81032e0:	687b      	ldr	r3, [r7, #4]
 81032e2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 81032e4:	2301      	movs	r3, #1
 81032e6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 81032ea:	687b      	ldr	r3, [r7, #4]
 81032ec:	2200      	movs	r2, #0
 81032ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 81032f2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 81032f6:	4618      	mov	r0, r3
 81032f8:	3784      	adds	r7, #132	; 0x84
 81032fa:	46bd      	mov	sp, r7
 81032fc:	bd90      	pop	{r4, r7, pc}
 81032fe:	bf00      	nop
 8103300:	40022000 	.word	0x40022000
 8103304:	40022100 	.word	0x40022100
 8103308:	40022300 	.word	0x40022300
 810330c:	58026300 	.word	0x58026300
 8103310:	58026000 	.word	0x58026000
 8103314:	cb840000 	.word	0xcb840000
 8103318:	10000000 	.word	0x10000000
 810331c:	053e2d63 	.word	0x053e2d63
 8103320:	c7520000 	.word	0xc7520000
 8103324:	cfb80000 	.word	0xcfb80000

08103328 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8103328:	b580      	push	{r7, lr}
 810332a:	b084      	sub	sp, #16
 810332c:	af00      	add	r7, sp, #0
 810332e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8103330:	687b      	ldr	r3, [r7, #4]
 8103332:	681b      	ldr	r3, [r3, #0]
 8103334:	4618      	mov	r0, r3
 8103336:	f7ff f8eb 	bl	8102510 <LL_ADC_IsEnabled>
 810333a:	4603      	mov	r3, r0
 810333c:	2b00      	cmp	r3, #0
 810333e:	d16e      	bne.n	810341e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8103340:	687b      	ldr	r3, [r7, #4]
 8103342:	681b      	ldr	r3, [r3, #0]
 8103344:	689a      	ldr	r2, [r3, #8]
 8103346:	4b38      	ldr	r3, [pc, #224]	; (8103428 <ADC_Enable+0x100>)
 8103348:	4013      	ands	r3, r2
 810334a:	2b00      	cmp	r3, #0
 810334c:	d00d      	beq.n	810336a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 810334e:	687b      	ldr	r3, [r7, #4]
 8103350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103352:	f043 0210 	orr.w	r2, r3, #16
 8103356:	687b      	ldr	r3, [r7, #4]
 8103358:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 810335a:	687b      	ldr	r3, [r7, #4]
 810335c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810335e:	f043 0201 	orr.w	r2, r3, #1
 8103362:	687b      	ldr	r3, [r7, #4]
 8103364:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8103366:	2301      	movs	r3, #1
 8103368:	e05a      	b.n	8103420 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 810336a:	687b      	ldr	r3, [r7, #4]
 810336c:	681b      	ldr	r3, [r3, #0]
 810336e:	4618      	mov	r0, r3
 8103370:	f7ff f8ba 	bl	81024e8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8103374:	f7fe fefc 	bl	8102170 <HAL_GetTick>
 8103378:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 810337a:	687b      	ldr	r3, [r7, #4]
 810337c:	681b      	ldr	r3, [r3, #0]
 810337e:	4a2b      	ldr	r2, [pc, #172]	; (810342c <ADC_Enable+0x104>)
 8103380:	4293      	cmp	r3, r2
 8103382:	d004      	beq.n	810338e <ADC_Enable+0x66>
 8103384:	687b      	ldr	r3, [r7, #4]
 8103386:	681b      	ldr	r3, [r3, #0]
 8103388:	4a29      	ldr	r2, [pc, #164]	; (8103430 <ADC_Enable+0x108>)
 810338a:	4293      	cmp	r3, r2
 810338c:	d101      	bne.n	8103392 <ADC_Enable+0x6a>
 810338e:	4b29      	ldr	r3, [pc, #164]	; (8103434 <ADC_Enable+0x10c>)
 8103390:	e000      	b.n	8103394 <ADC_Enable+0x6c>
 8103392:	4b29      	ldr	r3, [pc, #164]	; (8103438 <ADC_Enable+0x110>)
 8103394:	4618      	mov	r0, r3
 8103396:	f7ff f83d 	bl	8102414 <LL_ADC_GetMultimode>
 810339a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 810339c:	687b      	ldr	r3, [r7, #4]
 810339e:	681b      	ldr	r3, [r3, #0]
 81033a0:	4a23      	ldr	r2, [pc, #140]	; (8103430 <ADC_Enable+0x108>)
 81033a2:	4293      	cmp	r3, r2
 81033a4:	d002      	beq.n	81033ac <ADC_Enable+0x84>
 81033a6:	687b      	ldr	r3, [r7, #4]
 81033a8:	681b      	ldr	r3, [r3, #0]
 81033aa:	e000      	b.n	81033ae <ADC_Enable+0x86>
 81033ac:	4b1f      	ldr	r3, [pc, #124]	; (810342c <ADC_Enable+0x104>)
 81033ae:	687a      	ldr	r2, [r7, #4]
 81033b0:	6812      	ldr	r2, [r2, #0]
 81033b2:	4293      	cmp	r3, r2
 81033b4:	d02c      	beq.n	8103410 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 81033b6:	68bb      	ldr	r3, [r7, #8]
 81033b8:	2b00      	cmp	r3, #0
 81033ba:	d130      	bne.n	810341e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 81033bc:	e028      	b.n	8103410 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 81033be:	687b      	ldr	r3, [r7, #4]
 81033c0:	681b      	ldr	r3, [r3, #0]
 81033c2:	4618      	mov	r0, r3
 81033c4:	f7ff f8a4 	bl	8102510 <LL_ADC_IsEnabled>
 81033c8:	4603      	mov	r3, r0
 81033ca:	2b00      	cmp	r3, #0
 81033cc:	d104      	bne.n	81033d8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 81033ce:	687b      	ldr	r3, [r7, #4]
 81033d0:	681b      	ldr	r3, [r3, #0]
 81033d2:	4618      	mov	r0, r3
 81033d4:	f7ff f888 	bl	81024e8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 81033d8:	f7fe feca 	bl	8102170 <HAL_GetTick>
 81033dc:	4602      	mov	r2, r0
 81033de:	68fb      	ldr	r3, [r7, #12]
 81033e0:	1ad3      	subs	r3, r2, r3
 81033e2:	2b02      	cmp	r3, #2
 81033e4:	d914      	bls.n	8103410 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 81033e6:	687b      	ldr	r3, [r7, #4]
 81033e8:	681b      	ldr	r3, [r3, #0]
 81033ea:	681b      	ldr	r3, [r3, #0]
 81033ec:	f003 0301 	and.w	r3, r3, #1
 81033f0:	2b01      	cmp	r3, #1
 81033f2:	d00d      	beq.n	8103410 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81033f4:	687b      	ldr	r3, [r7, #4]
 81033f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81033f8:	f043 0210 	orr.w	r2, r3, #16
 81033fc:	687b      	ldr	r3, [r7, #4]
 81033fe:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8103400:	687b      	ldr	r3, [r7, #4]
 8103402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103404:	f043 0201 	orr.w	r2, r3, #1
 8103408:	687b      	ldr	r3, [r7, #4]
 810340a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 810340c:	2301      	movs	r3, #1
 810340e:	e007      	b.n	8103420 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8103410:	687b      	ldr	r3, [r7, #4]
 8103412:	681b      	ldr	r3, [r3, #0]
 8103414:	681b      	ldr	r3, [r3, #0]
 8103416:	f003 0301 	and.w	r3, r3, #1
 810341a:	2b01      	cmp	r3, #1
 810341c:	d1cf      	bne.n	81033be <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 810341e:	2300      	movs	r3, #0
}
 8103420:	4618      	mov	r0, r3
 8103422:	3710      	adds	r7, #16
 8103424:	46bd      	mov	sp, r7
 8103426:	bd80      	pop	{r7, pc}
 8103428:	8000003f 	.word	0x8000003f
 810342c:	40022000 	.word	0x40022000
 8103430:	40022100 	.word	0x40022100
 8103434:	40022300 	.word	0x40022300
 8103438:	58026300 	.word	0x58026300

0810343c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 810343c:	b580      	push	{r7, lr}
 810343e:	b084      	sub	sp, #16
 8103440:	af00      	add	r7, sp, #0
 8103442:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8103444:	687b      	ldr	r3, [r7, #4]
 8103446:	681b      	ldr	r3, [r3, #0]
 8103448:	4a7a      	ldr	r2, [pc, #488]	; (8103634 <ADC_ConfigureBoostMode+0x1f8>)
 810344a:	4293      	cmp	r3, r2
 810344c:	d004      	beq.n	8103458 <ADC_ConfigureBoostMode+0x1c>
 810344e:	687b      	ldr	r3, [r7, #4]
 8103450:	681b      	ldr	r3, [r3, #0]
 8103452:	4a79      	ldr	r2, [pc, #484]	; (8103638 <ADC_ConfigureBoostMode+0x1fc>)
 8103454:	4293      	cmp	r3, r2
 8103456:	d109      	bne.n	810346c <ADC_ConfigureBoostMode+0x30>
 8103458:	4b78      	ldr	r3, [pc, #480]	; (810363c <ADC_ConfigureBoostMode+0x200>)
 810345a:	689b      	ldr	r3, [r3, #8]
 810345c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8103460:	2b00      	cmp	r3, #0
 8103462:	bf14      	ite	ne
 8103464:	2301      	movne	r3, #1
 8103466:	2300      	moveq	r3, #0
 8103468:	b2db      	uxtb	r3, r3
 810346a:	e008      	b.n	810347e <ADC_ConfigureBoostMode+0x42>
 810346c:	4b74      	ldr	r3, [pc, #464]	; (8103640 <ADC_ConfigureBoostMode+0x204>)
 810346e:	689b      	ldr	r3, [r3, #8]
 8103470:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8103474:	2b00      	cmp	r3, #0
 8103476:	bf14      	ite	ne
 8103478:	2301      	movne	r3, #1
 810347a:	2300      	moveq	r3, #0
 810347c:	b2db      	uxtb	r3, r3
 810347e:	2b00      	cmp	r3, #0
 8103480:	d01c      	beq.n	81034bc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8103482:	f000 fed7 	bl	8104234 <HAL_RCC_GetHCLKFreq>
 8103486:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8103488:	687b      	ldr	r3, [r7, #4]
 810348a:	685b      	ldr	r3, [r3, #4]
 810348c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103490:	d010      	beq.n	81034b4 <ADC_ConfigureBoostMode+0x78>
 8103492:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103496:	d873      	bhi.n	8103580 <ADC_ConfigureBoostMode+0x144>
 8103498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810349c:	d002      	beq.n	81034a4 <ADC_ConfigureBoostMode+0x68>
 810349e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81034a2:	d16d      	bne.n	8103580 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 81034a4:	687b      	ldr	r3, [r7, #4]
 81034a6:	685b      	ldr	r3, [r3, #4]
 81034a8:	0c1b      	lsrs	r3, r3, #16
 81034aa:	68fa      	ldr	r2, [r7, #12]
 81034ac:	fbb2 f3f3 	udiv	r3, r2, r3
 81034b0:	60fb      	str	r3, [r7, #12]
        break;
 81034b2:	e068      	b.n	8103586 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 81034b4:	68fb      	ldr	r3, [r7, #12]
 81034b6:	089b      	lsrs	r3, r3, #2
 81034b8:	60fb      	str	r3, [r7, #12]
        break;
 81034ba:	e064      	b.n	8103586 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 81034bc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 81034c0:	f04f 0100 	mov.w	r1, #0
 81034c4:	f002 f91e 	bl	8105704 <HAL_RCCEx_GetPeriphCLKFreq>
 81034c8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 81034ca:	687b      	ldr	r3, [r7, #4]
 81034cc:	685b      	ldr	r3, [r3, #4]
 81034ce:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 81034d2:	d051      	beq.n	8103578 <ADC_ConfigureBoostMode+0x13c>
 81034d4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 81034d8:	d854      	bhi.n	8103584 <ADC_ConfigureBoostMode+0x148>
 81034da:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 81034de:	d047      	beq.n	8103570 <ADC_ConfigureBoostMode+0x134>
 81034e0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 81034e4:	d84e      	bhi.n	8103584 <ADC_ConfigureBoostMode+0x148>
 81034e6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 81034ea:	d03d      	beq.n	8103568 <ADC_ConfigureBoostMode+0x12c>
 81034ec:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 81034f0:	d848      	bhi.n	8103584 <ADC_ConfigureBoostMode+0x148>
 81034f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81034f6:	d033      	beq.n	8103560 <ADC_ConfigureBoostMode+0x124>
 81034f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81034fc:	d842      	bhi.n	8103584 <ADC_ConfigureBoostMode+0x148>
 81034fe:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8103502:	d029      	beq.n	8103558 <ADC_ConfigureBoostMode+0x11c>
 8103504:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8103508:	d83c      	bhi.n	8103584 <ADC_ConfigureBoostMode+0x148>
 810350a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 810350e:	d01a      	beq.n	8103546 <ADC_ConfigureBoostMode+0x10a>
 8103510:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8103514:	d836      	bhi.n	8103584 <ADC_ConfigureBoostMode+0x148>
 8103516:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 810351a:	d014      	beq.n	8103546 <ADC_ConfigureBoostMode+0x10a>
 810351c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8103520:	d830      	bhi.n	8103584 <ADC_ConfigureBoostMode+0x148>
 8103522:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103526:	d00e      	beq.n	8103546 <ADC_ConfigureBoostMode+0x10a>
 8103528:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810352c:	d82a      	bhi.n	8103584 <ADC_ConfigureBoostMode+0x148>
 810352e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8103532:	d008      	beq.n	8103546 <ADC_ConfigureBoostMode+0x10a>
 8103534:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8103538:	d824      	bhi.n	8103584 <ADC_ConfigureBoostMode+0x148>
 810353a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810353e:	d002      	beq.n	8103546 <ADC_ConfigureBoostMode+0x10a>
 8103540:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8103544:	d11e      	bne.n	8103584 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8103546:	687b      	ldr	r3, [r7, #4]
 8103548:	685b      	ldr	r3, [r3, #4]
 810354a:	0c9b      	lsrs	r3, r3, #18
 810354c:	005b      	lsls	r3, r3, #1
 810354e:	68fa      	ldr	r2, [r7, #12]
 8103550:	fbb2 f3f3 	udiv	r3, r2, r3
 8103554:	60fb      	str	r3, [r7, #12]
        break;
 8103556:	e016      	b.n	8103586 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8103558:	68fb      	ldr	r3, [r7, #12]
 810355a:	091b      	lsrs	r3, r3, #4
 810355c:	60fb      	str	r3, [r7, #12]
        break;
 810355e:	e012      	b.n	8103586 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8103560:	68fb      	ldr	r3, [r7, #12]
 8103562:	095b      	lsrs	r3, r3, #5
 8103564:	60fb      	str	r3, [r7, #12]
        break;
 8103566:	e00e      	b.n	8103586 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8103568:	68fb      	ldr	r3, [r7, #12]
 810356a:	099b      	lsrs	r3, r3, #6
 810356c:	60fb      	str	r3, [r7, #12]
        break;
 810356e:	e00a      	b.n	8103586 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8103570:	68fb      	ldr	r3, [r7, #12]
 8103572:	09db      	lsrs	r3, r3, #7
 8103574:	60fb      	str	r3, [r7, #12]
        break;
 8103576:	e006      	b.n	8103586 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8103578:	68fb      	ldr	r3, [r7, #12]
 810357a:	0a1b      	lsrs	r3, r3, #8
 810357c:	60fb      	str	r3, [r7, #12]
        break;
 810357e:	e002      	b.n	8103586 <ADC_ConfigureBoostMode+0x14a>
        break;
 8103580:	bf00      	nop
 8103582:	e000      	b.n	8103586 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8103584:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8103586:	f7fe fe23 	bl	81021d0 <HAL_GetREVID>
 810358a:	4603      	mov	r3, r0
 810358c:	f241 0203 	movw	r2, #4099	; 0x1003
 8103590:	4293      	cmp	r3, r2
 8103592:	d815      	bhi.n	81035c0 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8103594:	68fb      	ldr	r3, [r7, #12]
 8103596:	4a2b      	ldr	r2, [pc, #172]	; (8103644 <ADC_ConfigureBoostMode+0x208>)
 8103598:	4293      	cmp	r3, r2
 810359a:	d908      	bls.n	81035ae <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 810359c:	687b      	ldr	r3, [r7, #4]
 810359e:	681b      	ldr	r3, [r3, #0]
 81035a0:	689a      	ldr	r2, [r3, #8]
 81035a2:	687b      	ldr	r3, [r7, #4]
 81035a4:	681b      	ldr	r3, [r3, #0]
 81035a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 81035aa:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 81035ac:	e03e      	b.n	810362c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 81035ae:	687b      	ldr	r3, [r7, #4]
 81035b0:	681b      	ldr	r3, [r3, #0]
 81035b2:	689a      	ldr	r2, [r3, #8]
 81035b4:	687b      	ldr	r3, [r7, #4]
 81035b6:	681b      	ldr	r3, [r3, #0]
 81035b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81035bc:	609a      	str	r2, [r3, #8]
}
 81035be:	e035      	b.n	810362c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 81035c0:	68fb      	ldr	r3, [r7, #12]
 81035c2:	085b      	lsrs	r3, r3, #1
 81035c4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 81035c6:	68fb      	ldr	r3, [r7, #12]
 81035c8:	4a1f      	ldr	r2, [pc, #124]	; (8103648 <ADC_ConfigureBoostMode+0x20c>)
 81035ca:	4293      	cmp	r3, r2
 81035cc:	d808      	bhi.n	81035e0 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 81035ce:	687b      	ldr	r3, [r7, #4]
 81035d0:	681b      	ldr	r3, [r3, #0]
 81035d2:	689a      	ldr	r2, [r3, #8]
 81035d4:	687b      	ldr	r3, [r7, #4]
 81035d6:	681b      	ldr	r3, [r3, #0]
 81035d8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 81035dc:	609a      	str	r2, [r3, #8]
}
 81035de:	e025      	b.n	810362c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 81035e0:	68fb      	ldr	r3, [r7, #12]
 81035e2:	4a1a      	ldr	r2, [pc, #104]	; (810364c <ADC_ConfigureBoostMode+0x210>)
 81035e4:	4293      	cmp	r3, r2
 81035e6:	d80a      	bhi.n	81035fe <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 81035e8:	687b      	ldr	r3, [r7, #4]
 81035ea:	681b      	ldr	r3, [r3, #0]
 81035ec:	689b      	ldr	r3, [r3, #8]
 81035ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81035f2:	687b      	ldr	r3, [r7, #4]
 81035f4:	681b      	ldr	r3, [r3, #0]
 81035f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 81035fa:	609a      	str	r2, [r3, #8]
}
 81035fc:	e016      	b.n	810362c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 81035fe:	68fb      	ldr	r3, [r7, #12]
 8103600:	4a13      	ldr	r2, [pc, #76]	; (8103650 <ADC_ConfigureBoostMode+0x214>)
 8103602:	4293      	cmp	r3, r2
 8103604:	d80a      	bhi.n	810361c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8103606:	687b      	ldr	r3, [r7, #4]
 8103608:	681b      	ldr	r3, [r3, #0]
 810360a:	689b      	ldr	r3, [r3, #8]
 810360c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103610:	687b      	ldr	r3, [r7, #4]
 8103612:	681b      	ldr	r3, [r3, #0]
 8103614:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8103618:	609a      	str	r2, [r3, #8]
}
 810361a:	e007      	b.n	810362c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 810361c:	687b      	ldr	r3, [r7, #4]
 810361e:	681b      	ldr	r3, [r3, #0]
 8103620:	689a      	ldr	r2, [r3, #8]
 8103622:	687b      	ldr	r3, [r7, #4]
 8103624:	681b      	ldr	r3, [r3, #0]
 8103626:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 810362a:	609a      	str	r2, [r3, #8]
}
 810362c:	bf00      	nop
 810362e:	3710      	adds	r7, #16
 8103630:	46bd      	mov	sp, r7
 8103632:	bd80      	pop	{r7, pc}
 8103634:	40022000 	.word	0x40022000
 8103638:	40022100 	.word	0x40022100
 810363c:	40022300 	.word	0x40022300
 8103640:	58026300 	.word	0x58026300
 8103644:	01312d00 	.word	0x01312d00
 8103648:	005f5e10 	.word	0x005f5e10
 810364c:	00bebc20 	.word	0x00bebc20
 8103650:	017d7840 	.word	0x017d7840

08103654 <LL_ADC_IsEnabled>:
{
 8103654:	b480      	push	{r7}
 8103656:	b083      	sub	sp, #12
 8103658:	af00      	add	r7, sp, #0
 810365a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 810365c:	687b      	ldr	r3, [r7, #4]
 810365e:	689b      	ldr	r3, [r3, #8]
 8103660:	f003 0301 	and.w	r3, r3, #1
 8103664:	2b01      	cmp	r3, #1
 8103666:	d101      	bne.n	810366c <LL_ADC_IsEnabled+0x18>
 8103668:	2301      	movs	r3, #1
 810366a:	e000      	b.n	810366e <LL_ADC_IsEnabled+0x1a>
 810366c:	2300      	movs	r3, #0
}
 810366e:	4618      	mov	r0, r3
 8103670:	370c      	adds	r7, #12
 8103672:	46bd      	mov	sp, r7
 8103674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103678:	4770      	bx	lr

0810367a <LL_ADC_REG_IsConversionOngoing>:
{
 810367a:	b480      	push	{r7}
 810367c:	b083      	sub	sp, #12
 810367e:	af00      	add	r7, sp, #0
 8103680:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8103682:	687b      	ldr	r3, [r7, #4]
 8103684:	689b      	ldr	r3, [r3, #8]
 8103686:	f003 0304 	and.w	r3, r3, #4
 810368a:	2b04      	cmp	r3, #4
 810368c:	d101      	bne.n	8103692 <LL_ADC_REG_IsConversionOngoing+0x18>
 810368e:	2301      	movs	r3, #1
 8103690:	e000      	b.n	8103694 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8103692:	2300      	movs	r3, #0
}
 8103694:	4618      	mov	r0, r3
 8103696:	370c      	adds	r7, #12
 8103698:	46bd      	mov	sp, r7
 810369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810369e:	4770      	bx	lr

081036a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 81036a0:	b590      	push	{r4, r7, lr}
 81036a2:	b09f      	sub	sp, #124	; 0x7c
 81036a4:	af00      	add	r7, sp, #0
 81036a6:	6078      	str	r0, [r7, #4]
 81036a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 81036aa:	2300      	movs	r3, #0
 81036ac:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 81036b0:	687b      	ldr	r3, [r7, #4]
 81036b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 81036b6:	2b01      	cmp	r3, #1
 81036b8:	d101      	bne.n	81036be <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 81036ba:	2302      	movs	r3, #2
 81036bc:	e0c4      	b.n	8103848 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 81036be:	687b      	ldr	r3, [r7, #4]
 81036c0:	2201      	movs	r2, #1
 81036c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 81036c6:	2300      	movs	r3, #0
 81036c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 81036ca:	2300      	movs	r3, #0
 81036cc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 81036ce:	687b      	ldr	r3, [r7, #4]
 81036d0:	681b      	ldr	r3, [r3, #0]
 81036d2:	4a5f      	ldr	r2, [pc, #380]	; (8103850 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81036d4:	4293      	cmp	r3, r2
 81036d6:	d102      	bne.n	81036de <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 81036d8:	4b5e      	ldr	r3, [pc, #376]	; (8103854 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81036da:	60bb      	str	r3, [r7, #8]
 81036dc:	e001      	b.n	81036e2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 81036de:	2300      	movs	r3, #0
 81036e0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 81036e2:	68bb      	ldr	r3, [r7, #8]
 81036e4:	2b00      	cmp	r3, #0
 81036e6:	d10b      	bne.n	8103700 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81036e8:	687b      	ldr	r3, [r7, #4]
 81036ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81036ec:	f043 0220 	orr.w	r2, r3, #32
 81036f0:	687b      	ldr	r3, [r7, #4]
 81036f2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 81036f4:	687b      	ldr	r3, [r7, #4]
 81036f6:	2200      	movs	r2, #0
 81036f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 81036fc:	2301      	movs	r3, #1
 81036fe:	e0a3      	b.n	8103848 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8103700:	68bb      	ldr	r3, [r7, #8]
 8103702:	4618      	mov	r0, r3
 8103704:	f7ff ffb9 	bl	810367a <LL_ADC_REG_IsConversionOngoing>
 8103708:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 810370a:	687b      	ldr	r3, [r7, #4]
 810370c:	681b      	ldr	r3, [r3, #0]
 810370e:	4618      	mov	r0, r3
 8103710:	f7ff ffb3 	bl	810367a <LL_ADC_REG_IsConversionOngoing>
 8103714:	4603      	mov	r3, r0
 8103716:	2b00      	cmp	r3, #0
 8103718:	f040 8085 	bne.w	8103826 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 810371c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 810371e:	2b00      	cmp	r3, #0
 8103720:	f040 8081 	bne.w	8103826 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8103724:	687b      	ldr	r3, [r7, #4]
 8103726:	681b      	ldr	r3, [r3, #0]
 8103728:	4a49      	ldr	r2, [pc, #292]	; (8103850 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810372a:	4293      	cmp	r3, r2
 810372c:	d004      	beq.n	8103738 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 810372e:	687b      	ldr	r3, [r7, #4]
 8103730:	681b      	ldr	r3, [r3, #0]
 8103732:	4a48      	ldr	r2, [pc, #288]	; (8103854 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103734:	4293      	cmp	r3, r2
 8103736:	d101      	bne.n	810373c <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8103738:	4b47      	ldr	r3, [pc, #284]	; (8103858 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 810373a:	e000      	b.n	810373e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 810373c:	4b47      	ldr	r3, [pc, #284]	; (810385c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 810373e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8103740:	683b      	ldr	r3, [r7, #0]
 8103742:	681b      	ldr	r3, [r3, #0]
 8103744:	2b00      	cmp	r3, #0
 8103746:	d03b      	beq.n	81037c0 <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8103748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810374a:	689b      	ldr	r3, [r3, #8]
 810374c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8103750:	683b      	ldr	r3, [r7, #0]
 8103752:	685b      	ldr	r3, [r3, #4]
 8103754:	431a      	orrs	r2, r3
 8103756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103758:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 810375a:	687b      	ldr	r3, [r7, #4]
 810375c:	681b      	ldr	r3, [r3, #0]
 810375e:	4a3c      	ldr	r2, [pc, #240]	; (8103850 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103760:	4293      	cmp	r3, r2
 8103762:	d004      	beq.n	810376e <HAL_ADCEx_MultiModeConfigChannel+0xce>
 8103764:	687b      	ldr	r3, [r7, #4]
 8103766:	681b      	ldr	r3, [r3, #0]
 8103768:	4a3a      	ldr	r2, [pc, #232]	; (8103854 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 810376a:	4293      	cmp	r3, r2
 810376c:	d10e      	bne.n	810378c <HAL_ADCEx_MultiModeConfigChannel+0xec>
 810376e:	4838      	ldr	r0, [pc, #224]	; (8103850 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103770:	f7ff ff70 	bl	8103654 <LL_ADC_IsEnabled>
 8103774:	4604      	mov	r4, r0
 8103776:	4837      	ldr	r0, [pc, #220]	; (8103854 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103778:	f7ff ff6c 	bl	8103654 <LL_ADC_IsEnabled>
 810377c:	4603      	mov	r3, r0
 810377e:	4323      	orrs	r3, r4
 8103780:	2b00      	cmp	r3, #0
 8103782:	bf0c      	ite	eq
 8103784:	2301      	moveq	r3, #1
 8103786:	2300      	movne	r3, #0
 8103788:	b2db      	uxtb	r3, r3
 810378a:	e008      	b.n	810379e <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 810378c:	4834      	ldr	r0, [pc, #208]	; (8103860 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 810378e:	f7ff ff61 	bl	8103654 <LL_ADC_IsEnabled>
 8103792:	4603      	mov	r3, r0
 8103794:	2b00      	cmp	r3, #0
 8103796:	bf0c      	ite	eq
 8103798:	2301      	moveq	r3, #1
 810379a:	2300      	movne	r3, #0
 810379c:	b2db      	uxtb	r3, r3
 810379e:	2b00      	cmp	r3, #0
 81037a0:	d04b      	beq.n	810383a <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 81037a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81037a4:	689b      	ldr	r3, [r3, #8]
 81037a6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 81037aa:	f023 030f 	bic.w	r3, r3, #15
 81037ae:	683a      	ldr	r2, [r7, #0]
 81037b0:	6811      	ldr	r1, [r2, #0]
 81037b2:	683a      	ldr	r2, [r7, #0]
 81037b4:	6892      	ldr	r2, [r2, #8]
 81037b6:	430a      	orrs	r2, r1
 81037b8:	431a      	orrs	r2, r3
 81037ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81037bc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81037be:	e03c      	b.n	810383a <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 81037c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81037c2:	689b      	ldr	r3, [r3, #8]
 81037c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 81037c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81037ca:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81037cc:	687b      	ldr	r3, [r7, #4]
 81037ce:	681b      	ldr	r3, [r3, #0]
 81037d0:	4a1f      	ldr	r2, [pc, #124]	; (8103850 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81037d2:	4293      	cmp	r3, r2
 81037d4:	d004      	beq.n	81037e0 <HAL_ADCEx_MultiModeConfigChannel+0x140>
 81037d6:	687b      	ldr	r3, [r7, #4]
 81037d8:	681b      	ldr	r3, [r3, #0]
 81037da:	4a1e      	ldr	r2, [pc, #120]	; (8103854 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81037dc:	4293      	cmp	r3, r2
 81037de:	d10e      	bne.n	81037fe <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 81037e0:	481b      	ldr	r0, [pc, #108]	; (8103850 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81037e2:	f7ff ff37 	bl	8103654 <LL_ADC_IsEnabled>
 81037e6:	4604      	mov	r4, r0
 81037e8:	481a      	ldr	r0, [pc, #104]	; (8103854 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81037ea:	f7ff ff33 	bl	8103654 <LL_ADC_IsEnabled>
 81037ee:	4603      	mov	r3, r0
 81037f0:	4323      	orrs	r3, r4
 81037f2:	2b00      	cmp	r3, #0
 81037f4:	bf0c      	ite	eq
 81037f6:	2301      	moveq	r3, #1
 81037f8:	2300      	movne	r3, #0
 81037fa:	b2db      	uxtb	r3, r3
 81037fc:	e008      	b.n	8103810 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 81037fe:	4818      	ldr	r0, [pc, #96]	; (8103860 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8103800:	f7ff ff28 	bl	8103654 <LL_ADC_IsEnabled>
 8103804:	4603      	mov	r3, r0
 8103806:	2b00      	cmp	r3, #0
 8103808:	bf0c      	ite	eq
 810380a:	2301      	moveq	r3, #1
 810380c:	2300      	movne	r3, #0
 810380e:	b2db      	uxtb	r3, r3
 8103810:	2b00      	cmp	r3, #0
 8103812:	d012      	beq.n	810383a <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8103814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103816:	689b      	ldr	r3, [r3, #8]
 8103818:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 810381c:	f023 030f 	bic.w	r3, r3, #15
 8103820:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8103822:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8103824:	e009      	b.n	810383a <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103826:	687b      	ldr	r3, [r7, #4]
 8103828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810382a:	f043 0220 	orr.w	r2, r3, #32
 810382e:	687b      	ldr	r3, [r7, #4]
 8103830:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8103832:	2301      	movs	r3, #1
 8103834:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8103838:	e000      	b.n	810383c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 810383a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 810383c:	687b      	ldr	r3, [r7, #4]
 810383e:	2200      	movs	r2, #0
 8103840:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8103844:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8103848:	4618      	mov	r0, r3
 810384a:	377c      	adds	r7, #124	; 0x7c
 810384c:	46bd      	mov	sp, r7
 810384e:	bd90      	pop	{r4, r7, pc}
 8103850:	40022000 	.word	0x40022000
 8103854:	40022100 	.word	0x40022100
 8103858:	40022300 	.word	0x40022300
 810385c:	58026300 	.word	0x58026300
 8103860:	58026000 	.word	0x58026000

08103864 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8103864:	b480      	push	{r7}
 8103866:	b085      	sub	sp, #20
 8103868:	af00      	add	r7, sp, #0
 810386a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 810386c:	687b      	ldr	r3, [r7, #4]
 810386e:	f003 0307 	and.w	r3, r3, #7
 8103872:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8103874:	4b0c      	ldr	r3, [pc, #48]	; (81038a8 <__NVIC_SetPriorityGrouping+0x44>)
 8103876:	68db      	ldr	r3, [r3, #12]
 8103878:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810387a:	68ba      	ldr	r2, [r7, #8]
 810387c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8103880:	4013      	ands	r3, r2
 8103882:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8103884:	68fb      	ldr	r3, [r7, #12]
 8103886:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8103888:	68bb      	ldr	r3, [r7, #8]
 810388a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 810388c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8103890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103894:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8103896:	4a04      	ldr	r2, [pc, #16]	; (81038a8 <__NVIC_SetPriorityGrouping+0x44>)
 8103898:	68bb      	ldr	r3, [r7, #8]
 810389a:	60d3      	str	r3, [r2, #12]
}
 810389c:	bf00      	nop
 810389e:	3714      	adds	r7, #20
 81038a0:	46bd      	mov	sp, r7
 81038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81038a6:	4770      	bx	lr
 81038a8:	e000ed00 	.word	0xe000ed00

081038ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81038ac:	b480      	push	{r7}
 81038ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81038b0:	4b04      	ldr	r3, [pc, #16]	; (81038c4 <__NVIC_GetPriorityGrouping+0x18>)
 81038b2:	68db      	ldr	r3, [r3, #12]
 81038b4:	0a1b      	lsrs	r3, r3, #8
 81038b6:	f003 0307 	and.w	r3, r3, #7
}
 81038ba:	4618      	mov	r0, r3
 81038bc:	46bd      	mov	sp, r7
 81038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81038c2:	4770      	bx	lr
 81038c4:	e000ed00 	.word	0xe000ed00

081038c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81038c8:	b480      	push	{r7}
 81038ca:	b083      	sub	sp, #12
 81038cc:	af00      	add	r7, sp, #0
 81038ce:	4603      	mov	r3, r0
 81038d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81038d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81038d6:	2b00      	cmp	r3, #0
 81038d8:	db0b      	blt.n	81038f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81038da:	88fb      	ldrh	r3, [r7, #6]
 81038dc:	f003 021f 	and.w	r2, r3, #31
 81038e0:	4907      	ldr	r1, [pc, #28]	; (8103900 <__NVIC_EnableIRQ+0x38>)
 81038e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81038e6:	095b      	lsrs	r3, r3, #5
 81038e8:	2001      	movs	r0, #1
 81038ea:	fa00 f202 	lsl.w	r2, r0, r2
 81038ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81038f2:	bf00      	nop
 81038f4:	370c      	adds	r7, #12
 81038f6:	46bd      	mov	sp, r7
 81038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81038fc:	4770      	bx	lr
 81038fe:	bf00      	nop
 8103900:	e000e100 	.word	0xe000e100

08103904 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8103904:	b480      	push	{r7}
 8103906:	b083      	sub	sp, #12
 8103908:	af00      	add	r7, sp, #0
 810390a:	4603      	mov	r3, r0
 810390c:	6039      	str	r1, [r7, #0]
 810390e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8103910:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103914:	2b00      	cmp	r3, #0
 8103916:	db0a      	blt.n	810392e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103918:	683b      	ldr	r3, [r7, #0]
 810391a:	b2da      	uxtb	r2, r3
 810391c:	490c      	ldr	r1, [pc, #48]	; (8103950 <__NVIC_SetPriority+0x4c>)
 810391e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103922:	0112      	lsls	r2, r2, #4
 8103924:	b2d2      	uxtb	r2, r2
 8103926:	440b      	add	r3, r1
 8103928:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 810392c:	e00a      	b.n	8103944 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810392e:	683b      	ldr	r3, [r7, #0]
 8103930:	b2da      	uxtb	r2, r3
 8103932:	4908      	ldr	r1, [pc, #32]	; (8103954 <__NVIC_SetPriority+0x50>)
 8103934:	88fb      	ldrh	r3, [r7, #6]
 8103936:	f003 030f 	and.w	r3, r3, #15
 810393a:	3b04      	subs	r3, #4
 810393c:	0112      	lsls	r2, r2, #4
 810393e:	b2d2      	uxtb	r2, r2
 8103940:	440b      	add	r3, r1
 8103942:	761a      	strb	r2, [r3, #24]
}
 8103944:	bf00      	nop
 8103946:	370c      	adds	r7, #12
 8103948:	46bd      	mov	sp, r7
 810394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810394e:	4770      	bx	lr
 8103950:	e000e100 	.word	0xe000e100
 8103954:	e000ed00 	.word	0xe000ed00

08103958 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103958:	b480      	push	{r7}
 810395a:	b089      	sub	sp, #36	; 0x24
 810395c:	af00      	add	r7, sp, #0
 810395e:	60f8      	str	r0, [r7, #12]
 8103960:	60b9      	str	r1, [r7, #8]
 8103962:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8103964:	68fb      	ldr	r3, [r7, #12]
 8103966:	f003 0307 	and.w	r3, r3, #7
 810396a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 810396c:	69fb      	ldr	r3, [r7, #28]
 810396e:	f1c3 0307 	rsb	r3, r3, #7
 8103972:	2b04      	cmp	r3, #4
 8103974:	bf28      	it	cs
 8103976:	2304      	movcs	r3, #4
 8103978:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810397a:	69fb      	ldr	r3, [r7, #28]
 810397c:	3304      	adds	r3, #4
 810397e:	2b06      	cmp	r3, #6
 8103980:	d902      	bls.n	8103988 <NVIC_EncodePriority+0x30>
 8103982:	69fb      	ldr	r3, [r7, #28]
 8103984:	3b03      	subs	r3, #3
 8103986:	e000      	b.n	810398a <NVIC_EncodePriority+0x32>
 8103988:	2300      	movs	r3, #0
 810398a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810398c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8103990:	69bb      	ldr	r3, [r7, #24]
 8103992:	fa02 f303 	lsl.w	r3, r2, r3
 8103996:	43da      	mvns	r2, r3
 8103998:	68bb      	ldr	r3, [r7, #8]
 810399a:	401a      	ands	r2, r3
 810399c:	697b      	ldr	r3, [r7, #20]
 810399e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81039a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 81039a4:	697b      	ldr	r3, [r7, #20]
 81039a6:	fa01 f303 	lsl.w	r3, r1, r3
 81039aa:	43d9      	mvns	r1, r3
 81039ac:	687b      	ldr	r3, [r7, #4]
 81039ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81039b0:	4313      	orrs	r3, r2
         );
}
 81039b2:	4618      	mov	r0, r3
 81039b4:	3724      	adds	r7, #36	; 0x24
 81039b6:	46bd      	mov	sp, r7
 81039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81039bc:	4770      	bx	lr
	...

081039c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 81039c0:	b580      	push	{r7, lr}
 81039c2:	b082      	sub	sp, #8
 81039c4:	af00      	add	r7, sp, #0
 81039c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81039c8:	687b      	ldr	r3, [r7, #4]
 81039ca:	3b01      	subs	r3, #1
 81039cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81039d0:	d301      	bcc.n	81039d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81039d2:	2301      	movs	r3, #1
 81039d4:	e00f      	b.n	81039f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81039d6:	4a0a      	ldr	r2, [pc, #40]	; (8103a00 <SysTick_Config+0x40>)
 81039d8:	687b      	ldr	r3, [r7, #4]
 81039da:	3b01      	subs	r3, #1
 81039dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81039de:	210f      	movs	r1, #15
 81039e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 81039e4:	f7ff ff8e 	bl	8103904 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81039e8:	4b05      	ldr	r3, [pc, #20]	; (8103a00 <SysTick_Config+0x40>)
 81039ea:	2200      	movs	r2, #0
 81039ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81039ee:	4b04      	ldr	r3, [pc, #16]	; (8103a00 <SysTick_Config+0x40>)
 81039f0:	2207      	movs	r2, #7
 81039f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 81039f4:	2300      	movs	r3, #0
}
 81039f6:	4618      	mov	r0, r3
 81039f8:	3708      	adds	r7, #8
 81039fa:	46bd      	mov	sp, r7
 81039fc:	bd80      	pop	{r7, pc}
 81039fe:	bf00      	nop
 8103a00:	e000e010 	.word	0xe000e010

08103a04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8103a04:	b580      	push	{r7, lr}
 8103a06:	b082      	sub	sp, #8
 8103a08:	af00      	add	r7, sp, #0
 8103a0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8103a0c:	6878      	ldr	r0, [r7, #4]
 8103a0e:	f7ff ff29 	bl	8103864 <__NVIC_SetPriorityGrouping>
}
 8103a12:	bf00      	nop
 8103a14:	3708      	adds	r7, #8
 8103a16:	46bd      	mov	sp, r7
 8103a18:	bd80      	pop	{r7, pc}

08103a1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103a1a:	b580      	push	{r7, lr}
 8103a1c:	b086      	sub	sp, #24
 8103a1e:	af00      	add	r7, sp, #0
 8103a20:	4603      	mov	r3, r0
 8103a22:	60b9      	str	r1, [r7, #8]
 8103a24:	607a      	str	r2, [r7, #4]
 8103a26:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8103a28:	f7ff ff40 	bl	81038ac <__NVIC_GetPriorityGrouping>
 8103a2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8103a2e:	687a      	ldr	r2, [r7, #4]
 8103a30:	68b9      	ldr	r1, [r7, #8]
 8103a32:	6978      	ldr	r0, [r7, #20]
 8103a34:	f7ff ff90 	bl	8103958 <NVIC_EncodePriority>
 8103a38:	4602      	mov	r2, r0
 8103a3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8103a3e:	4611      	mov	r1, r2
 8103a40:	4618      	mov	r0, r3
 8103a42:	f7ff ff5f 	bl	8103904 <__NVIC_SetPriority>
}
 8103a46:	bf00      	nop
 8103a48:	3718      	adds	r7, #24
 8103a4a:	46bd      	mov	sp, r7
 8103a4c:	bd80      	pop	{r7, pc}

08103a4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8103a4e:	b580      	push	{r7, lr}
 8103a50:	b082      	sub	sp, #8
 8103a52:	af00      	add	r7, sp, #0
 8103a54:	4603      	mov	r3, r0
 8103a56:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8103a58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103a5c:	4618      	mov	r0, r3
 8103a5e:	f7ff ff33 	bl	81038c8 <__NVIC_EnableIRQ>
}
 8103a62:	bf00      	nop
 8103a64:	3708      	adds	r7, #8
 8103a66:	46bd      	mov	sp, r7
 8103a68:	bd80      	pop	{r7, pc}

08103a6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8103a6a:	b580      	push	{r7, lr}
 8103a6c:	b082      	sub	sp, #8
 8103a6e:	af00      	add	r7, sp, #0
 8103a70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8103a72:	6878      	ldr	r0, [r7, #4]
 8103a74:	f7ff ffa4 	bl	81039c0 <SysTick_Config>
 8103a78:	4603      	mov	r3, r0
}
 8103a7a:	4618      	mov	r0, r3
 8103a7c:	3708      	adds	r7, #8
 8103a7e:	46bd      	mov	sp, r7
 8103a80:	bd80      	pop	{r7, pc}
	...

08103a84 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8103a84:	b480      	push	{r7}
 8103a86:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8103a88:	4b07      	ldr	r3, [pc, #28]	; (8103aa8 <HAL_GetCurrentCPUID+0x24>)
 8103a8a:	681b      	ldr	r3, [r3, #0]
 8103a8c:	091b      	lsrs	r3, r3, #4
 8103a8e:	f003 030f 	and.w	r3, r3, #15
 8103a92:	2b07      	cmp	r3, #7
 8103a94:	d101      	bne.n	8103a9a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8103a96:	2303      	movs	r3, #3
 8103a98:	e000      	b.n	8103a9c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8103a9a:	2301      	movs	r3, #1
  }
}
 8103a9c:	4618      	mov	r0, r3
 8103a9e:	46bd      	mov	sp, r7
 8103aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103aa4:	4770      	bx	lr
 8103aa6:	bf00      	nop
 8103aa8:	e000ed00 	.word	0xe000ed00

08103aac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8103aac:	b480      	push	{r7}
 8103aae:	b089      	sub	sp, #36	; 0x24
 8103ab0:	af00      	add	r7, sp, #0
 8103ab2:	6078      	str	r0, [r7, #4]
 8103ab4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8103ab6:	2300      	movs	r3, #0
 8103ab8:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8103aba:	4b89      	ldr	r3, [pc, #548]	; (8103ce0 <HAL_GPIO_Init+0x234>)
 8103abc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8103abe:	e194      	b.n	8103dea <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8103ac0:	683b      	ldr	r3, [r7, #0]
 8103ac2:	681a      	ldr	r2, [r3, #0]
 8103ac4:	2101      	movs	r1, #1
 8103ac6:	69fb      	ldr	r3, [r7, #28]
 8103ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8103acc:	4013      	ands	r3, r2
 8103ace:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8103ad0:	693b      	ldr	r3, [r7, #16]
 8103ad2:	2b00      	cmp	r3, #0
 8103ad4:	f000 8186 	beq.w	8103de4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8103ad8:	683b      	ldr	r3, [r7, #0]
 8103ada:	685b      	ldr	r3, [r3, #4]
 8103adc:	f003 0303 	and.w	r3, r3, #3
 8103ae0:	2b01      	cmp	r3, #1
 8103ae2:	d005      	beq.n	8103af0 <HAL_GPIO_Init+0x44>
 8103ae4:	683b      	ldr	r3, [r7, #0]
 8103ae6:	685b      	ldr	r3, [r3, #4]
 8103ae8:	f003 0303 	and.w	r3, r3, #3
 8103aec:	2b02      	cmp	r3, #2
 8103aee:	d130      	bne.n	8103b52 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8103af0:	687b      	ldr	r3, [r7, #4]
 8103af2:	689b      	ldr	r3, [r3, #8]
 8103af4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8103af6:	69fb      	ldr	r3, [r7, #28]
 8103af8:	005b      	lsls	r3, r3, #1
 8103afa:	2203      	movs	r2, #3
 8103afc:	fa02 f303 	lsl.w	r3, r2, r3
 8103b00:	43db      	mvns	r3, r3
 8103b02:	69ba      	ldr	r2, [r7, #24]
 8103b04:	4013      	ands	r3, r2
 8103b06:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8103b08:	683b      	ldr	r3, [r7, #0]
 8103b0a:	68da      	ldr	r2, [r3, #12]
 8103b0c:	69fb      	ldr	r3, [r7, #28]
 8103b0e:	005b      	lsls	r3, r3, #1
 8103b10:	fa02 f303 	lsl.w	r3, r2, r3
 8103b14:	69ba      	ldr	r2, [r7, #24]
 8103b16:	4313      	orrs	r3, r2
 8103b18:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8103b1a:	687b      	ldr	r3, [r7, #4]
 8103b1c:	69ba      	ldr	r2, [r7, #24]
 8103b1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8103b20:	687b      	ldr	r3, [r7, #4]
 8103b22:	685b      	ldr	r3, [r3, #4]
 8103b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8103b26:	2201      	movs	r2, #1
 8103b28:	69fb      	ldr	r3, [r7, #28]
 8103b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8103b2e:	43db      	mvns	r3, r3
 8103b30:	69ba      	ldr	r2, [r7, #24]
 8103b32:	4013      	ands	r3, r2
 8103b34:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8103b36:	683b      	ldr	r3, [r7, #0]
 8103b38:	685b      	ldr	r3, [r3, #4]
 8103b3a:	091b      	lsrs	r3, r3, #4
 8103b3c:	f003 0201 	and.w	r2, r3, #1
 8103b40:	69fb      	ldr	r3, [r7, #28]
 8103b42:	fa02 f303 	lsl.w	r3, r2, r3
 8103b46:	69ba      	ldr	r2, [r7, #24]
 8103b48:	4313      	orrs	r3, r2
 8103b4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8103b4c:	687b      	ldr	r3, [r7, #4]
 8103b4e:	69ba      	ldr	r2, [r7, #24]
 8103b50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8103b52:	683b      	ldr	r3, [r7, #0]
 8103b54:	685b      	ldr	r3, [r3, #4]
 8103b56:	f003 0303 	and.w	r3, r3, #3
 8103b5a:	2b03      	cmp	r3, #3
 8103b5c:	d017      	beq.n	8103b8e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8103b5e:	687b      	ldr	r3, [r7, #4]
 8103b60:	68db      	ldr	r3, [r3, #12]
 8103b62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8103b64:	69fb      	ldr	r3, [r7, #28]
 8103b66:	005b      	lsls	r3, r3, #1
 8103b68:	2203      	movs	r2, #3
 8103b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8103b6e:	43db      	mvns	r3, r3
 8103b70:	69ba      	ldr	r2, [r7, #24]
 8103b72:	4013      	ands	r3, r2
 8103b74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8103b76:	683b      	ldr	r3, [r7, #0]
 8103b78:	689a      	ldr	r2, [r3, #8]
 8103b7a:	69fb      	ldr	r3, [r7, #28]
 8103b7c:	005b      	lsls	r3, r3, #1
 8103b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8103b82:	69ba      	ldr	r2, [r7, #24]
 8103b84:	4313      	orrs	r3, r2
 8103b86:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8103b88:	687b      	ldr	r3, [r7, #4]
 8103b8a:	69ba      	ldr	r2, [r7, #24]
 8103b8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8103b8e:	683b      	ldr	r3, [r7, #0]
 8103b90:	685b      	ldr	r3, [r3, #4]
 8103b92:	f003 0303 	and.w	r3, r3, #3
 8103b96:	2b02      	cmp	r3, #2
 8103b98:	d123      	bne.n	8103be2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8103b9a:	69fb      	ldr	r3, [r7, #28]
 8103b9c:	08da      	lsrs	r2, r3, #3
 8103b9e:	687b      	ldr	r3, [r7, #4]
 8103ba0:	3208      	adds	r2, #8
 8103ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8103ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8103ba8:	69fb      	ldr	r3, [r7, #28]
 8103baa:	f003 0307 	and.w	r3, r3, #7
 8103bae:	009b      	lsls	r3, r3, #2
 8103bb0:	220f      	movs	r2, #15
 8103bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8103bb6:	43db      	mvns	r3, r3
 8103bb8:	69ba      	ldr	r2, [r7, #24]
 8103bba:	4013      	ands	r3, r2
 8103bbc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8103bbe:	683b      	ldr	r3, [r7, #0]
 8103bc0:	691a      	ldr	r2, [r3, #16]
 8103bc2:	69fb      	ldr	r3, [r7, #28]
 8103bc4:	f003 0307 	and.w	r3, r3, #7
 8103bc8:	009b      	lsls	r3, r3, #2
 8103bca:	fa02 f303 	lsl.w	r3, r2, r3
 8103bce:	69ba      	ldr	r2, [r7, #24]
 8103bd0:	4313      	orrs	r3, r2
 8103bd2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8103bd4:	69fb      	ldr	r3, [r7, #28]
 8103bd6:	08da      	lsrs	r2, r3, #3
 8103bd8:	687b      	ldr	r3, [r7, #4]
 8103bda:	3208      	adds	r2, #8
 8103bdc:	69b9      	ldr	r1, [r7, #24]
 8103bde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8103be2:	687b      	ldr	r3, [r7, #4]
 8103be4:	681b      	ldr	r3, [r3, #0]
 8103be6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8103be8:	69fb      	ldr	r3, [r7, #28]
 8103bea:	005b      	lsls	r3, r3, #1
 8103bec:	2203      	movs	r2, #3
 8103bee:	fa02 f303 	lsl.w	r3, r2, r3
 8103bf2:	43db      	mvns	r3, r3
 8103bf4:	69ba      	ldr	r2, [r7, #24]
 8103bf6:	4013      	ands	r3, r2
 8103bf8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8103bfa:	683b      	ldr	r3, [r7, #0]
 8103bfc:	685b      	ldr	r3, [r3, #4]
 8103bfe:	f003 0203 	and.w	r2, r3, #3
 8103c02:	69fb      	ldr	r3, [r7, #28]
 8103c04:	005b      	lsls	r3, r3, #1
 8103c06:	fa02 f303 	lsl.w	r3, r2, r3
 8103c0a:	69ba      	ldr	r2, [r7, #24]
 8103c0c:	4313      	orrs	r3, r2
 8103c0e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8103c10:	687b      	ldr	r3, [r7, #4]
 8103c12:	69ba      	ldr	r2, [r7, #24]
 8103c14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8103c16:	683b      	ldr	r3, [r7, #0]
 8103c18:	685b      	ldr	r3, [r3, #4]
 8103c1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8103c1e:	2b00      	cmp	r3, #0
 8103c20:	f000 80e0 	beq.w	8103de4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8103c24:	4b2f      	ldr	r3, [pc, #188]	; (8103ce4 <HAL_GPIO_Init+0x238>)
 8103c26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8103c2a:	4a2e      	ldr	r2, [pc, #184]	; (8103ce4 <HAL_GPIO_Init+0x238>)
 8103c2c:	f043 0302 	orr.w	r3, r3, #2
 8103c30:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8103c34:	4b2b      	ldr	r3, [pc, #172]	; (8103ce4 <HAL_GPIO_Init+0x238>)
 8103c36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8103c3a:	f003 0302 	and.w	r3, r3, #2
 8103c3e:	60fb      	str	r3, [r7, #12]
 8103c40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8103c42:	4a29      	ldr	r2, [pc, #164]	; (8103ce8 <HAL_GPIO_Init+0x23c>)
 8103c44:	69fb      	ldr	r3, [r7, #28]
 8103c46:	089b      	lsrs	r3, r3, #2
 8103c48:	3302      	adds	r3, #2
 8103c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8103c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8103c50:	69fb      	ldr	r3, [r7, #28]
 8103c52:	f003 0303 	and.w	r3, r3, #3
 8103c56:	009b      	lsls	r3, r3, #2
 8103c58:	220f      	movs	r2, #15
 8103c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8103c5e:	43db      	mvns	r3, r3
 8103c60:	69ba      	ldr	r2, [r7, #24]
 8103c62:	4013      	ands	r3, r2
 8103c64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8103c66:	687b      	ldr	r3, [r7, #4]
 8103c68:	4a20      	ldr	r2, [pc, #128]	; (8103cec <HAL_GPIO_Init+0x240>)
 8103c6a:	4293      	cmp	r3, r2
 8103c6c:	d052      	beq.n	8103d14 <HAL_GPIO_Init+0x268>
 8103c6e:	687b      	ldr	r3, [r7, #4]
 8103c70:	4a1f      	ldr	r2, [pc, #124]	; (8103cf0 <HAL_GPIO_Init+0x244>)
 8103c72:	4293      	cmp	r3, r2
 8103c74:	d031      	beq.n	8103cda <HAL_GPIO_Init+0x22e>
 8103c76:	687b      	ldr	r3, [r7, #4]
 8103c78:	4a1e      	ldr	r2, [pc, #120]	; (8103cf4 <HAL_GPIO_Init+0x248>)
 8103c7a:	4293      	cmp	r3, r2
 8103c7c:	d02b      	beq.n	8103cd6 <HAL_GPIO_Init+0x22a>
 8103c7e:	687b      	ldr	r3, [r7, #4]
 8103c80:	4a1d      	ldr	r2, [pc, #116]	; (8103cf8 <HAL_GPIO_Init+0x24c>)
 8103c82:	4293      	cmp	r3, r2
 8103c84:	d025      	beq.n	8103cd2 <HAL_GPIO_Init+0x226>
 8103c86:	687b      	ldr	r3, [r7, #4]
 8103c88:	4a1c      	ldr	r2, [pc, #112]	; (8103cfc <HAL_GPIO_Init+0x250>)
 8103c8a:	4293      	cmp	r3, r2
 8103c8c:	d01f      	beq.n	8103cce <HAL_GPIO_Init+0x222>
 8103c8e:	687b      	ldr	r3, [r7, #4]
 8103c90:	4a1b      	ldr	r2, [pc, #108]	; (8103d00 <HAL_GPIO_Init+0x254>)
 8103c92:	4293      	cmp	r3, r2
 8103c94:	d019      	beq.n	8103cca <HAL_GPIO_Init+0x21e>
 8103c96:	687b      	ldr	r3, [r7, #4]
 8103c98:	4a1a      	ldr	r2, [pc, #104]	; (8103d04 <HAL_GPIO_Init+0x258>)
 8103c9a:	4293      	cmp	r3, r2
 8103c9c:	d013      	beq.n	8103cc6 <HAL_GPIO_Init+0x21a>
 8103c9e:	687b      	ldr	r3, [r7, #4]
 8103ca0:	4a19      	ldr	r2, [pc, #100]	; (8103d08 <HAL_GPIO_Init+0x25c>)
 8103ca2:	4293      	cmp	r3, r2
 8103ca4:	d00d      	beq.n	8103cc2 <HAL_GPIO_Init+0x216>
 8103ca6:	687b      	ldr	r3, [r7, #4]
 8103ca8:	4a18      	ldr	r2, [pc, #96]	; (8103d0c <HAL_GPIO_Init+0x260>)
 8103caa:	4293      	cmp	r3, r2
 8103cac:	d007      	beq.n	8103cbe <HAL_GPIO_Init+0x212>
 8103cae:	687b      	ldr	r3, [r7, #4]
 8103cb0:	4a17      	ldr	r2, [pc, #92]	; (8103d10 <HAL_GPIO_Init+0x264>)
 8103cb2:	4293      	cmp	r3, r2
 8103cb4:	d101      	bne.n	8103cba <HAL_GPIO_Init+0x20e>
 8103cb6:	2309      	movs	r3, #9
 8103cb8:	e02d      	b.n	8103d16 <HAL_GPIO_Init+0x26a>
 8103cba:	230a      	movs	r3, #10
 8103cbc:	e02b      	b.n	8103d16 <HAL_GPIO_Init+0x26a>
 8103cbe:	2308      	movs	r3, #8
 8103cc0:	e029      	b.n	8103d16 <HAL_GPIO_Init+0x26a>
 8103cc2:	2307      	movs	r3, #7
 8103cc4:	e027      	b.n	8103d16 <HAL_GPIO_Init+0x26a>
 8103cc6:	2306      	movs	r3, #6
 8103cc8:	e025      	b.n	8103d16 <HAL_GPIO_Init+0x26a>
 8103cca:	2305      	movs	r3, #5
 8103ccc:	e023      	b.n	8103d16 <HAL_GPIO_Init+0x26a>
 8103cce:	2304      	movs	r3, #4
 8103cd0:	e021      	b.n	8103d16 <HAL_GPIO_Init+0x26a>
 8103cd2:	2303      	movs	r3, #3
 8103cd4:	e01f      	b.n	8103d16 <HAL_GPIO_Init+0x26a>
 8103cd6:	2302      	movs	r3, #2
 8103cd8:	e01d      	b.n	8103d16 <HAL_GPIO_Init+0x26a>
 8103cda:	2301      	movs	r3, #1
 8103cdc:	e01b      	b.n	8103d16 <HAL_GPIO_Init+0x26a>
 8103cde:	bf00      	nop
 8103ce0:	580000c0 	.word	0x580000c0
 8103ce4:	58024400 	.word	0x58024400
 8103ce8:	58000400 	.word	0x58000400
 8103cec:	58020000 	.word	0x58020000
 8103cf0:	58020400 	.word	0x58020400
 8103cf4:	58020800 	.word	0x58020800
 8103cf8:	58020c00 	.word	0x58020c00
 8103cfc:	58021000 	.word	0x58021000
 8103d00:	58021400 	.word	0x58021400
 8103d04:	58021800 	.word	0x58021800
 8103d08:	58021c00 	.word	0x58021c00
 8103d0c:	58022000 	.word	0x58022000
 8103d10:	58022400 	.word	0x58022400
 8103d14:	2300      	movs	r3, #0
 8103d16:	69fa      	ldr	r2, [r7, #28]
 8103d18:	f002 0203 	and.w	r2, r2, #3
 8103d1c:	0092      	lsls	r2, r2, #2
 8103d1e:	4093      	lsls	r3, r2
 8103d20:	69ba      	ldr	r2, [r7, #24]
 8103d22:	4313      	orrs	r3, r2
 8103d24:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8103d26:	4938      	ldr	r1, [pc, #224]	; (8103e08 <HAL_GPIO_Init+0x35c>)
 8103d28:	69fb      	ldr	r3, [r7, #28]
 8103d2a:	089b      	lsrs	r3, r3, #2
 8103d2c:	3302      	adds	r3, #2
 8103d2e:	69ba      	ldr	r2, [r7, #24]
 8103d30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8103d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8103d38:	681b      	ldr	r3, [r3, #0]
 8103d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103d3c:	693b      	ldr	r3, [r7, #16]
 8103d3e:	43db      	mvns	r3, r3
 8103d40:	69ba      	ldr	r2, [r7, #24]
 8103d42:	4013      	ands	r3, r2
 8103d44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8103d46:	683b      	ldr	r3, [r7, #0]
 8103d48:	685b      	ldr	r3, [r3, #4]
 8103d4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8103d4e:	2b00      	cmp	r3, #0
 8103d50:	d003      	beq.n	8103d5a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8103d52:	69ba      	ldr	r2, [r7, #24]
 8103d54:	693b      	ldr	r3, [r7, #16]
 8103d56:	4313      	orrs	r3, r2
 8103d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8103d5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103d5e:	69bb      	ldr	r3, [r7, #24]
 8103d60:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8103d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8103d66:	685b      	ldr	r3, [r3, #4]
 8103d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103d6a:	693b      	ldr	r3, [r7, #16]
 8103d6c:	43db      	mvns	r3, r3
 8103d6e:	69ba      	ldr	r2, [r7, #24]
 8103d70:	4013      	ands	r3, r2
 8103d72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8103d74:	683b      	ldr	r3, [r7, #0]
 8103d76:	685b      	ldr	r3, [r3, #4]
 8103d78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8103d7c:	2b00      	cmp	r3, #0
 8103d7e:	d003      	beq.n	8103d88 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8103d80:	69ba      	ldr	r2, [r7, #24]
 8103d82:	693b      	ldr	r3, [r7, #16]
 8103d84:	4313      	orrs	r3, r2
 8103d86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8103d88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103d8c:	69bb      	ldr	r3, [r7, #24]
 8103d8e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8103d90:	697b      	ldr	r3, [r7, #20]
 8103d92:	685b      	ldr	r3, [r3, #4]
 8103d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103d96:	693b      	ldr	r3, [r7, #16]
 8103d98:	43db      	mvns	r3, r3
 8103d9a:	69ba      	ldr	r2, [r7, #24]
 8103d9c:	4013      	ands	r3, r2
 8103d9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8103da0:	683b      	ldr	r3, [r7, #0]
 8103da2:	685b      	ldr	r3, [r3, #4]
 8103da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8103da8:	2b00      	cmp	r3, #0
 8103daa:	d003      	beq.n	8103db4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8103dac:	69ba      	ldr	r2, [r7, #24]
 8103dae:	693b      	ldr	r3, [r7, #16]
 8103db0:	4313      	orrs	r3, r2
 8103db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8103db4:	697b      	ldr	r3, [r7, #20]
 8103db6:	69ba      	ldr	r2, [r7, #24]
 8103db8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8103dba:	697b      	ldr	r3, [r7, #20]
 8103dbc:	681b      	ldr	r3, [r3, #0]
 8103dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103dc0:	693b      	ldr	r3, [r7, #16]
 8103dc2:	43db      	mvns	r3, r3
 8103dc4:	69ba      	ldr	r2, [r7, #24]
 8103dc6:	4013      	ands	r3, r2
 8103dc8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8103dca:	683b      	ldr	r3, [r7, #0]
 8103dcc:	685b      	ldr	r3, [r3, #4]
 8103dce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103dd2:	2b00      	cmp	r3, #0
 8103dd4:	d003      	beq.n	8103dde <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8103dd6:	69ba      	ldr	r2, [r7, #24]
 8103dd8:	693b      	ldr	r3, [r7, #16]
 8103dda:	4313      	orrs	r3, r2
 8103ddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8103dde:	697b      	ldr	r3, [r7, #20]
 8103de0:	69ba      	ldr	r2, [r7, #24]
 8103de2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8103de4:	69fb      	ldr	r3, [r7, #28]
 8103de6:	3301      	adds	r3, #1
 8103de8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8103dea:	683b      	ldr	r3, [r7, #0]
 8103dec:	681a      	ldr	r2, [r3, #0]
 8103dee:	69fb      	ldr	r3, [r7, #28]
 8103df0:	fa22 f303 	lsr.w	r3, r2, r3
 8103df4:	2b00      	cmp	r3, #0
 8103df6:	f47f ae63 	bne.w	8103ac0 <HAL_GPIO_Init+0x14>
  }
}
 8103dfa:	bf00      	nop
 8103dfc:	bf00      	nop
 8103dfe:	3724      	adds	r7, #36	; 0x24
 8103e00:	46bd      	mov	sp, r7
 8103e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e06:	4770      	bx	lr
 8103e08:	58000400 	.word	0x58000400

08103e0c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8103e0c:	b480      	push	{r7}
 8103e0e:	b083      	sub	sp, #12
 8103e10:	af00      	add	r7, sp, #0
 8103e12:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8103e14:	4b05      	ldr	r3, [pc, #20]	; (8103e2c <HAL_HSEM_ActivateNotification+0x20>)
 8103e16:	681a      	ldr	r2, [r3, #0]
 8103e18:	4904      	ldr	r1, [pc, #16]	; (8103e2c <HAL_HSEM_ActivateNotification+0x20>)
 8103e1a:	687b      	ldr	r3, [r7, #4]
 8103e1c:	4313      	orrs	r3, r2
 8103e1e:	600b      	str	r3, [r1, #0]
#endif
}
 8103e20:	bf00      	nop
 8103e22:	370c      	adds	r7, #12
 8103e24:	46bd      	mov	sp, r7
 8103e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e2a:	4770      	bx	lr
 8103e2c:	58026510 	.word	0x58026510

08103e30 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8103e30:	b580      	push	{r7, lr}
 8103e32:	b084      	sub	sp, #16
 8103e34:	af00      	add	r7, sp, #0
 8103e36:	60f8      	str	r0, [r7, #12]
 8103e38:	460b      	mov	r3, r1
 8103e3a:	607a      	str	r2, [r7, #4]
 8103e3c:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8103e3e:	4b37      	ldr	r3, [pc, #220]	; (8103f1c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103e40:	681b      	ldr	r3, [r3, #0]
 8103e42:	f023 0201 	bic.w	r2, r3, #1
 8103e46:	4935      	ldr	r1, [pc, #212]	; (8103f1c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103e48:	68fb      	ldr	r3, [r7, #12]
 8103e4a:	4313      	orrs	r3, r2
 8103e4c:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8103e4e:	687b      	ldr	r3, [r7, #4]
 8103e50:	2b00      	cmp	r3, #0
 8103e52:	d123      	bne.n	8103e9c <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8103e54:	f7ff fe16 	bl	8103a84 <HAL_GetCurrentCPUID>
 8103e58:	4603      	mov	r3, r0
 8103e5a:	2b03      	cmp	r3, #3
 8103e5c:	d158      	bne.n	8103f10 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8103e5e:	4b2f      	ldr	r3, [pc, #188]	; (8103f1c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103e60:	691b      	ldr	r3, [r3, #16]
 8103e62:	4a2e      	ldr	r2, [pc, #184]	; (8103f1c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103e64:	f023 0301 	bic.w	r3, r3, #1
 8103e68:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103e6a:	4b2d      	ldr	r3, [pc, #180]	; (8103f20 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103e6c:	691b      	ldr	r3, [r3, #16]
 8103e6e:	4a2c      	ldr	r2, [pc, #176]	; (8103f20 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103e70:	f043 0304 	orr.w	r3, r3, #4
 8103e74:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8103e76:	f3bf 8f4f 	dsb	sy
}
 8103e7a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8103e7c:	f3bf 8f6f 	isb	sy
}
 8103e80:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8103e82:	7afb      	ldrb	r3, [r7, #11]
 8103e84:	2b01      	cmp	r3, #1
 8103e86:	d101      	bne.n	8103e8c <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8103e88:	bf30      	wfi
 8103e8a:	e000      	b.n	8103e8e <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8103e8c:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103e8e:	4b24      	ldr	r3, [pc, #144]	; (8103f20 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103e90:	691b      	ldr	r3, [r3, #16]
 8103e92:	4a23      	ldr	r2, [pc, #140]	; (8103f20 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103e94:	f023 0304 	bic.w	r3, r3, #4
 8103e98:	6113      	str	r3, [r2, #16]
 8103e9a:	e03c      	b.n	8103f16 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8103e9c:	687b      	ldr	r3, [r7, #4]
 8103e9e:	2b01      	cmp	r3, #1
 8103ea0:	d123      	bne.n	8103eea <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8103ea2:	f7ff fdef 	bl	8103a84 <HAL_GetCurrentCPUID>
 8103ea6:	4603      	mov	r3, r0
 8103ea8:	2b01      	cmp	r3, #1
 8103eaa:	d133      	bne.n	8103f14 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8103eac:	4b1b      	ldr	r3, [pc, #108]	; (8103f1c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103eae:	695b      	ldr	r3, [r3, #20]
 8103eb0:	4a1a      	ldr	r2, [pc, #104]	; (8103f1c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103eb2:	f023 0302 	bic.w	r3, r3, #2
 8103eb6:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103eb8:	4b19      	ldr	r3, [pc, #100]	; (8103f20 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103eba:	691b      	ldr	r3, [r3, #16]
 8103ebc:	4a18      	ldr	r2, [pc, #96]	; (8103f20 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103ebe:	f043 0304 	orr.w	r3, r3, #4
 8103ec2:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8103ec4:	f3bf 8f4f 	dsb	sy
}
 8103ec8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8103eca:	f3bf 8f6f 	isb	sy
}
 8103ece:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8103ed0:	7afb      	ldrb	r3, [r7, #11]
 8103ed2:	2b01      	cmp	r3, #1
 8103ed4:	d101      	bne.n	8103eda <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8103ed6:	bf30      	wfi
 8103ed8:	e000      	b.n	8103edc <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8103eda:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103edc:	4b10      	ldr	r3, [pc, #64]	; (8103f20 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103ede:	691b      	ldr	r3, [r3, #16]
 8103ee0:	4a0f      	ldr	r2, [pc, #60]	; (8103f20 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103ee2:	f023 0304 	bic.w	r3, r3, #4
 8103ee6:	6113      	str	r3, [r2, #16]
 8103ee8:	e015      	b.n	8103f16 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103eea:	f7ff fdcb 	bl	8103a84 <HAL_GetCurrentCPUID>
 8103eee:	4603      	mov	r3, r0
 8103ef0:	2b03      	cmp	r3, #3
 8103ef2:	d106      	bne.n	8103f02 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8103ef4:	4b09      	ldr	r3, [pc, #36]	; (8103f1c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103ef6:	691b      	ldr	r3, [r3, #16]
 8103ef8:	4a08      	ldr	r2, [pc, #32]	; (8103f1c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103efa:	f023 0304 	bic.w	r3, r3, #4
 8103efe:	6113      	str	r3, [r2, #16]
 8103f00:	e009      	b.n	8103f16 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8103f02:	4b06      	ldr	r3, [pc, #24]	; (8103f1c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103f04:	695b      	ldr	r3, [r3, #20]
 8103f06:	4a05      	ldr	r2, [pc, #20]	; (8103f1c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103f08:	f023 0304 	bic.w	r3, r3, #4
 8103f0c:	6153      	str	r3, [r2, #20]
 8103f0e:	e002      	b.n	8103f16 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103f10:	bf00      	nop
 8103f12:	e000      	b.n	8103f16 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103f14:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8103f16:	3710      	adds	r7, #16
 8103f18:	46bd      	mov	sp, r7
 8103f1a:	bd80      	pop	{r7, pc}
 8103f1c:	58024800 	.word	0x58024800
 8103f20:	e000ed00 	.word	0xe000ed00

08103f24 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8103f24:	b580      	push	{r7, lr}
 8103f26:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103f28:	f7ff fdac 	bl	8103a84 <HAL_GetCurrentCPUID>
 8103f2c:	4603      	mov	r3, r0
 8103f2e:	2b03      	cmp	r3, #3
 8103f30:	d101      	bne.n	8103f36 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8103f32:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8103f34:	e001      	b.n	8103f3a <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8103f36:	bf40      	sev
    __WFE ();
 8103f38:	bf20      	wfe
}
 8103f3a:	bf00      	nop
 8103f3c:	bd80      	pop	{r7, pc}
	...

08103f40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8103f40:	b480      	push	{r7}
 8103f42:	b089      	sub	sp, #36	; 0x24
 8103f44:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8103f46:	4bb3      	ldr	r3, [pc, #716]	; (8104214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103f48:	691b      	ldr	r3, [r3, #16]
 8103f4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8103f4e:	2b18      	cmp	r3, #24
 8103f50:	f200 8155 	bhi.w	81041fe <HAL_RCC_GetSysClockFreq+0x2be>
 8103f54:	a201      	add	r2, pc, #4	; (adr r2, 8103f5c <HAL_RCC_GetSysClockFreq+0x1c>)
 8103f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103f5a:	bf00      	nop
 8103f5c:	08103fc1 	.word	0x08103fc1
 8103f60:	081041ff 	.word	0x081041ff
 8103f64:	081041ff 	.word	0x081041ff
 8103f68:	081041ff 	.word	0x081041ff
 8103f6c:	081041ff 	.word	0x081041ff
 8103f70:	081041ff 	.word	0x081041ff
 8103f74:	081041ff 	.word	0x081041ff
 8103f78:	081041ff 	.word	0x081041ff
 8103f7c:	08103fe7 	.word	0x08103fe7
 8103f80:	081041ff 	.word	0x081041ff
 8103f84:	081041ff 	.word	0x081041ff
 8103f88:	081041ff 	.word	0x081041ff
 8103f8c:	081041ff 	.word	0x081041ff
 8103f90:	081041ff 	.word	0x081041ff
 8103f94:	081041ff 	.word	0x081041ff
 8103f98:	081041ff 	.word	0x081041ff
 8103f9c:	08103fed 	.word	0x08103fed
 8103fa0:	081041ff 	.word	0x081041ff
 8103fa4:	081041ff 	.word	0x081041ff
 8103fa8:	081041ff 	.word	0x081041ff
 8103fac:	081041ff 	.word	0x081041ff
 8103fb0:	081041ff 	.word	0x081041ff
 8103fb4:	081041ff 	.word	0x081041ff
 8103fb8:	081041ff 	.word	0x081041ff
 8103fbc:	08103ff3 	.word	0x08103ff3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103fc0:	4b94      	ldr	r3, [pc, #592]	; (8104214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103fc2:	681b      	ldr	r3, [r3, #0]
 8103fc4:	f003 0320 	and.w	r3, r3, #32
 8103fc8:	2b00      	cmp	r3, #0
 8103fca:	d009      	beq.n	8103fe0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8103fcc:	4b91      	ldr	r3, [pc, #580]	; (8104214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103fce:	681b      	ldr	r3, [r3, #0]
 8103fd0:	08db      	lsrs	r3, r3, #3
 8103fd2:	f003 0303 	and.w	r3, r3, #3
 8103fd6:	4a90      	ldr	r2, [pc, #576]	; (8104218 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8103fdc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8103fde:	e111      	b.n	8104204 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8103fe0:	4b8d      	ldr	r3, [pc, #564]	; (8104218 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103fe2:	61bb      	str	r3, [r7, #24]
      break;
 8103fe4:	e10e      	b.n	8104204 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8103fe6:	4b8d      	ldr	r3, [pc, #564]	; (810421c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103fe8:	61bb      	str	r3, [r7, #24]
      break;
 8103fea:	e10b      	b.n	8104204 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8103fec:	4b8c      	ldr	r3, [pc, #560]	; (8104220 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8103fee:	61bb      	str	r3, [r7, #24]
      break;
 8103ff0:	e108      	b.n	8104204 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103ff2:	4b88      	ldr	r3, [pc, #544]	; (8104214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103ff6:	f003 0303 	and.w	r3, r3, #3
 8103ffa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8103ffc:	4b85      	ldr	r3, [pc, #532]	; (8104214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104000:	091b      	lsrs	r3, r3, #4
 8104002:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8104006:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8104008:	4b82      	ldr	r3, [pc, #520]	; (8104214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810400a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810400c:	f003 0301 	and.w	r3, r3, #1
 8104010:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8104012:	4b80      	ldr	r3, [pc, #512]	; (8104214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8104016:	08db      	lsrs	r3, r3, #3
 8104018:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810401c:	68fa      	ldr	r2, [r7, #12]
 810401e:	fb02 f303 	mul.w	r3, r2, r3
 8104022:	ee07 3a90 	vmov	s15, r3
 8104026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810402a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 810402e:	693b      	ldr	r3, [r7, #16]
 8104030:	2b00      	cmp	r3, #0
 8104032:	f000 80e1 	beq.w	81041f8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8104036:	697b      	ldr	r3, [r7, #20]
 8104038:	2b02      	cmp	r3, #2
 810403a:	f000 8083 	beq.w	8104144 <HAL_RCC_GetSysClockFreq+0x204>
 810403e:	697b      	ldr	r3, [r7, #20]
 8104040:	2b02      	cmp	r3, #2
 8104042:	f200 80a1 	bhi.w	8104188 <HAL_RCC_GetSysClockFreq+0x248>
 8104046:	697b      	ldr	r3, [r7, #20]
 8104048:	2b00      	cmp	r3, #0
 810404a:	d003      	beq.n	8104054 <HAL_RCC_GetSysClockFreq+0x114>
 810404c:	697b      	ldr	r3, [r7, #20]
 810404e:	2b01      	cmp	r3, #1
 8104050:	d056      	beq.n	8104100 <HAL_RCC_GetSysClockFreq+0x1c0>
 8104052:	e099      	b.n	8104188 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104054:	4b6f      	ldr	r3, [pc, #444]	; (8104214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104056:	681b      	ldr	r3, [r3, #0]
 8104058:	f003 0320 	and.w	r3, r3, #32
 810405c:	2b00      	cmp	r3, #0
 810405e:	d02d      	beq.n	81040bc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104060:	4b6c      	ldr	r3, [pc, #432]	; (8104214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104062:	681b      	ldr	r3, [r3, #0]
 8104064:	08db      	lsrs	r3, r3, #3
 8104066:	f003 0303 	and.w	r3, r3, #3
 810406a:	4a6b      	ldr	r2, [pc, #428]	; (8104218 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810406c:	fa22 f303 	lsr.w	r3, r2, r3
 8104070:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104072:	687b      	ldr	r3, [r7, #4]
 8104074:	ee07 3a90 	vmov	s15, r3
 8104078:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810407c:	693b      	ldr	r3, [r7, #16]
 810407e:	ee07 3a90 	vmov	s15, r3
 8104082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810408a:	4b62      	ldr	r3, [pc, #392]	; (8104214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810408c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810408e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104092:	ee07 3a90 	vmov	s15, r3
 8104096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810409a:	ed97 6a02 	vldr	s12, [r7, #8]
 810409e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8104224 <HAL_RCC_GetSysClockFreq+0x2e4>
 81040a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81040a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81040aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81040ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81040b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81040b6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 81040ba:	e087      	b.n	81041cc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81040bc:	693b      	ldr	r3, [r7, #16]
 81040be:	ee07 3a90 	vmov	s15, r3
 81040c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81040c6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8104228 <HAL_RCC_GetSysClockFreq+0x2e8>
 81040ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81040ce:	4b51      	ldr	r3, [pc, #324]	; (8104214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81040d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81040d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81040d6:	ee07 3a90 	vmov	s15, r3
 81040da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81040de:	ed97 6a02 	vldr	s12, [r7, #8]
 81040e2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8104224 <HAL_RCC_GetSysClockFreq+0x2e4>
 81040e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81040ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81040ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81040f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81040f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81040fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81040fe:	e065      	b.n	81041cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104100:	693b      	ldr	r3, [r7, #16]
 8104102:	ee07 3a90 	vmov	s15, r3
 8104106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810410a:	eddf 6a48 	vldr	s13, [pc, #288]	; 810422c <HAL_RCC_GetSysClockFreq+0x2ec>
 810410e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104112:	4b40      	ldr	r3, [pc, #256]	; (8104214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810411a:	ee07 3a90 	vmov	s15, r3
 810411e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104122:	ed97 6a02 	vldr	s12, [r7, #8]
 8104126:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8104224 <HAL_RCC_GetSysClockFreq+0x2e4>
 810412a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810412e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810413a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810413e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8104142:	e043      	b.n	81041cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104144:	693b      	ldr	r3, [r7, #16]
 8104146:	ee07 3a90 	vmov	s15, r3
 810414a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810414e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8104230 <HAL_RCC_GetSysClockFreq+0x2f0>
 8104152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104156:	4b2f      	ldr	r3, [pc, #188]	; (8104214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810415a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810415e:	ee07 3a90 	vmov	s15, r3
 8104162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104166:	ed97 6a02 	vldr	s12, [r7, #8]
 810416a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8104224 <HAL_RCC_GetSysClockFreq+0x2e4>
 810416e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104176:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810417a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810417e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104182:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8104186:	e021      	b.n	81041cc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104188:	693b      	ldr	r3, [r7, #16]
 810418a:	ee07 3a90 	vmov	s15, r3
 810418e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104192:	eddf 6a26 	vldr	s13, [pc, #152]	; 810422c <HAL_RCC_GetSysClockFreq+0x2ec>
 8104196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810419a:	4b1e      	ldr	r3, [pc, #120]	; (8104214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810419c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810419e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81041a2:	ee07 3a90 	vmov	s15, r3
 81041a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81041aa:	ed97 6a02 	vldr	s12, [r7, #8]
 81041ae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8104224 <HAL_RCC_GetSysClockFreq+0x2e4>
 81041b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81041b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81041ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81041be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81041c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81041c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81041ca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 81041cc:	4b11      	ldr	r3, [pc, #68]	; (8104214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81041ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81041d0:	0a5b      	lsrs	r3, r3, #9
 81041d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81041d6:	3301      	adds	r3, #1
 81041d8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 81041da:	683b      	ldr	r3, [r7, #0]
 81041dc:	ee07 3a90 	vmov	s15, r3
 81041e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81041e4:	edd7 6a07 	vldr	s13, [r7, #28]
 81041e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81041ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81041f0:	ee17 3a90 	vmov	r3, s15
 81041f4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 81041f6:	e005      	b.n	8104204 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 81041f8:	2300      	movs	r3, #0
 81041fa:	61bb      	str	r3, [r7, #24]
      break;
 81041fc:	e002      	b.n	8104204 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 81041fe:	4b07      	ldr	r3, [pc, #28]	; (810421c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8104200:	61bb      	str	r3, [r7, #24]
      break;
 8104202:	bf00      	nop
  }

  return sysclockfreq;
 8104204:	69bb      	ldr	r3, [r7, #24]
}
 8104206:	4618      	mov	r0, r3
 8104208:	3724      	adds	r7, #36	; 0x24
 810420a:	46bd      	mov	sp, r7
 810420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104210:	4770      	bx	lr
 8104212:	bf00      	nop
 8104214:	58024400 	.word	0x58024400
 8104218:	03d09000 	.word	0x03d09000
 810421c:	003d0900 	.word	0x003d0900
 8104220:	007a1200 	.word	0x007a1200
 8104224:	46000000 	.word	0x46000000
 8104228:	4c742400 	.word	0x4c742400
 810422c:	4a742400 	.word	0x4a742400
 8104230:	4af42400 	.word	0x4af42400

08104234 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8104234:	b580      	push	{r7, lr}
 8104236:	b082      	sub	sp, #8
 8104238:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810423a:	f7ff fe81 	bl	8103f40 <HAL_RCC_GetSysClockFreq>
 810423e:	4602      	mov	r2, r0
 8104240:	4b11      	ldr	r3, [pc, #68]	; (8104288 <HAL_RCC_GetHCLKFreq+0x54>)
 8104242:	699b      	ldr	r3, [r3, #24]
 8104244:	0a1b      	lsrs	r3, r3, #8
 8104246:	f003 030f 	and.w	r3, r3, #15
 810424a:	4910      	ldr	r1, [pc, #64]	; (810428c <HAL_RCC_GetHCLKFreq+0x58>)
 810424c:	5ccb      	ldrb	r3, [r1, r3]
 810424e:	f003 031f 	and.w	r3, r3, #31
 8104252:	fa22 f303 	lsr.w	r3, r2, r3
 8104256:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8104258:	4b0b      	ldr	r3, [pc, #44]	; (8104288 <HAL_RCC_GetHCLKFreq+0x54>)
 810425a:	699b      	ldr	r3, [r3, #24]
 810425c:	f003 030f 	and.w	r3, r3, #15
 8104260:	4a0a      	ldr	r2, [pc, #40]	; (810428c <HAL_RCC_GetHCLKFreq+0x58>)
 8104262:	5cd3      	ldrb	r3, [r2, r3]
 8104264:	f003 031f 	and.w	r3, r3, #31
 8104268:	687a      	ldr	r2, [r7, #4]
 810426a:	fa22 f303 	lsr.w	r3, r2, r3
 810426e:	4a08      	ldr	r2, [pc, #32]	; (8104290 <HAL_RCC_GetHCLKFreq+0x5c>)
 8104270:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8104272:	4b07      	ldr	r3, [pc, #28]	; (8104290 <HAL_RCC_GetHCLKFreq+0x5c>)
 8104274:	681b      	ldr	r3, [r3, #0]
 8104276:	4a07      	ldr	r2, [pc, #28]	; (8104294 <HAL_RCC_GetHCLKFreq+0x60>)
 8104278:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 810427a:	4b05      	ldr	r3, [pc, #20]	; (8104290 <HAL_RCC_GetHCLKFreq+0x5c>)
 810427c:	681b      	ldr	r3, [r3, #0]
}
 810427e:	4618      	mov	r0, r3
 8104280:	3708      	adds	r7, #8
 8104282:	46bd      	mov	sp, r7
 8104284:	bd80      	pop	{r7, pc}
 8104286:	bf00      	nop
 8104288:	58024400 	.word	0x58024400
 810428c:	0810dbc4 	.word	0x0810dbc4
 8104290:	10000004 	.word	0x10000004
 8104294:	10000000 	.word	0x10000000

08104298 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8104298:	b580      	push	{r7, lr}
 810429a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 810429c:	f7ff ffca 	bl	8104234 <HAL_RCC_GetHCLKFreq>
 81042a0:	4602      	mov	r2, r0
 81042a2:	4b06      	ldr	r3, [pc, #24]	; (81042bc <HAL_RCC_GetPCLK1Freq+0x24>)
 81042a4:	69db      	ldr	r3, [r3, #28]
 81042a6:	091b      	lsrs	r3, r3, #4
 81042a8:	f003 0307 	and.w	r3, r3, #7
 81042ac:	4904      	ldr	r1, [pc, #16]	; (81042c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 81042ae:	5ccb      	ldrb	r3, [r1, r3]
 81042b0:	f003 031f 	and.w	r3, r3, #31
 81042b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 81042b8:	4618      	mov	r0, r3
 81042ba:	bd80      	pop	{r7, pc}
 81042bc:	58024400 	.word	0x58024400
 81042c0:	0810dbc4 	.word	0x0810dbc4

081042c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 81042c4:	b580      	push	{r7, lr}
 81042c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 81042c8:	f7ff ffb4 	bl	8104234 <HAL_RCC_GetHCLKFreq>
 81042cc:	4602      	mov	r2, r0
 81042ce:	4b06      	ldr	r3, [pc, #24]	; (81042e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 81042d0:	69db      	ldr	r3, [r3, #28]
 81042d2:	0a1b      	lsrs	r3, r3, #8
 81042d4:	f003 0307 	and.w	r3, r3, #7
 81042d8:	4904      	ldr	r1, [pc, #16]	; (81042ec <HAL_RCC_GetPCLK2Freq+0x28>)
 81042da:	5ccb      	ldrb	r3, [r1, r3]
 81042dc:	f003 031f 	and.w	r3, r3, #31
 81042e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 81042e4:	4618      	mov	r0, r3
 81042e6:	bd80      	pop	{r7, pc}
 81042e8:	58024400 	.word	0x58024400
 81042ec:	0810dbc4 	.word	0x0810dbc4

081042f0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 81042f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 81042f4:	b0ca      	sub	sp, #296	; 0x128
 81042f6:	af00      	add	r7, sp, #0
 81042f8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 81042fc:	2300      	movs	r3, #0
 81042fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8104302:	2300      	movs	r3, #0
 8104304:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8104308:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810430c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104310:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8104314:	2500      	movs	r5, #0
 8104316:	ea54 0305 	orrs.w	r3, r4, r5
 810431a:	d049      	beq.n	81043b0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 810431c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104320:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8104322:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104326:	d02f      	beq.n	8104388 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8104328:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810432c:	d828      	bhi.n	8104380 <HAL_RCCEx_PeriphCLKConfig+0x90>
 810432e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104332:	d01a      	beq.n	810436a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8104334:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104338:	d822      	bhi.n	8104380 <HAL_RCCEx_PeriphCLKConfig+0x90>
 810433a:	2b00      	cmp	r3, #0
 810433c:	d003      	beq.n	8104346 <HAL_RCCEx_PeriphCLKConfig+0x56>
 810433e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8104342:	d007      	beq.n	8104354 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8104344:	e01c      	b.n	8104380 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104346:	4bb8      	ldr	r3, [pc, #736]	; (8104628 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810434a:	4ab7      	ldr	r2, [pc, #732]	; (8104628 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810434c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104350:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8104352:	e01a      	b.n	810438a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104354:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104358:	3308      	adds	r3, #8
 810435a:	2102      	movs	r1, #2
 810435c:	4618      	mov	r0, r3
 810435e:	f002 fb61 	bl	8106a24 <RCCEx_PLL2_Config>
 8104362:	4603      	mov	r3, r0
 8104364:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8104368:	e00f      	b.n	810438a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810436a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810436e:	3328      	adds	r3, #40	; 0x28
 8104370:	2102      	movs	r1, #2
 8104372:	4618      	mov	r0, r3
 8104374:	f002 fc08 	bl	8106b88 <RCCEx_PLL3_Config>
 8104378:	4603      	mov	r3, r0
 810437a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810437e:	e004      	b.n	810438a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104380:	2301      	movs	r3, #1
 8104382:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104386:	e000      	b.n	810438a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8104388:	bf00      	nop
    }

    if (ret == HAL_OK)
 810438a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810438e:	2b00      	cmp	r3, #0
 8104390:	d10a      	bne.n	81043a8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8104392:	4ba5      	ldr	r3, [pc, #660]	; (8104628 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104396:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 810439a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810439e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81043a0:	4aa1      	ldr	r2, [pc, #644]	; (8104628 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81043a2:	430b      	orrs	r3, r1
 81043a4:	6513      	str	r3, [r2, #80]	; 0x50
 81043a6:	e003      	b.n	81043b0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81043a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81043ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 81043b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81043b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81043b8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 81043bc:	f04f 0900 	mov.w	r9, #0
 81043c0:	ea58 0309 	orrs.w	r3, r8, r9
 81043c4:	d047      	beq.n	8104456 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 81043c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81043ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81043cc:	2b04      	cmp	r3, #4
 81043ce:	d82a      	bhi.n	8104426 <HAL_RCCEx_PeriphCLKConfig+0x136>
 81043d0:	a201      	add	r2, pc, #4	; (adr r2, 81043d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 81043d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81043d6:	bf00      	nop
 81043d8:	081043ed 	.word	0x081043ed
 81043dc:	081043fb 	.word	0x081043fb
 81043e0:	08104411 	.word	0x08104411
 81043e4:	0810442f 	.word	0x0810442f
 81043e8:	0810442f 	.word	0x0810442f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81043ec:	4b8e      	ldr	r3, [pc, #568]	; (8104628 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81043ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81043f0:	4a8d      	ldr	r2, [pc, #564]	; (8104628 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81043f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81043f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81043f8:	e01a      	b.n	8104430 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81043fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81043fe:	3308      	adds	r3, #8
 8104400:	2100      	movs	r1, #0
 8104402:	4618      	mov	r0, r3
 8104404:	f002 fb0e 	bl	8106a24 <RCCEx_PLL2_Config>
 8104408:	4603      	mov	r3, r0
 810440a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810440e:	e00f      	b.n	8104430 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104410:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104414:	3328      	adds	r3, #40	; 0x28
 8104416:	2100      	movs	r1, #0
 8104418:	4618      	mov	r0, r3
 810441a:	f002 fbb5 	bl	8106b88 <RCCEx_PLL3_Config>
 810441e:	4603      	mov	r3, r0
 8104420:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104424:	e004      	b.n	8104430 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104426:	2301      	movs	r3, #1
 8104428:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810442c:	e000      	b.n	8104430 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 810442e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104430:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104434:	2b00      	cmp	r3, #0
 8104436:	d10a      	bne.n	810444e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8104438:	4b7b      	ldr	r3, [pc, #492]	; (8104628 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810443a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810443c:	f023 0107 	bic.w	r1, r3, #7
 8104440:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104446:	4a78      	ldr	r2, [pc, #480]	; (8104628 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104448:	430b      	orrs	r3, r1
 810444a:	6513      	str	r3, [r2, #80]	; 0x50
 810444c:	e003      	b.n	8104456 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810444e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104452:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8104456:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810445a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810445e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8104462:	f04f 0b00 	mov.w	fp, #0
 8104466:	ea5a 030b 	orrs.w	r3, sl, fp
 810446a:	d04c      	beq.n	8104506 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 810446c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104476:	d030      	beq.n	81044da <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8104478:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810447c:	d829      	bhi.n	81044d2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810447e:	2bc0      	cmp	r3, #192	; 0xc0
 8104480:	d02d      	beq.n	81044de <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8104482:	2bc0      	cmp	r3, #192	; 0xc0
 8104484:	d825      	bhi.n	81044d2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8104486:	2b80      	cmp	r3, #128	; 0x80
 8104488:	d018      	beq.n	81044bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 810448a:	2b80      	cmp	r3, #128	; 0x80
 810448c:	d821      	bhi.n	81044d2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810448e:	2b00      	cmp	r3, #0
 8104490:	d002      	beq.n	8104498 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8104492:	2b40      	cmp	r3, #64	; 0x40
 8104494:	d007      	beq.n	81044a6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8104496:	e01c      	b.n	81044d2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104498:	4b63      	ldr	r3, [pc, #396]	; (8104628 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810449a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810449c:	4a62      	ldr	r2, [pc, #392]	; (8104628 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810449e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81044a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81044a4:	e01c      	b.n	81044e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81044a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81044aa:	3308      	adds	r3, #8
 81044ac:	2100      	movs	r1, #0
 81044ae:	4618      	mov	r0, r3
 81044b0:	f002 fab8 	bl	8106a24 <RCCEx_PLL2_Config>
 81044b4:	4603      	mov	r3, r0
 81044b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81044ba:	e011      	b.n	81044e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81044bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81044c0:	3328      	adds	r3, #40	; 0x28
 81044c2:	2100      	movs	r1, #0
 81044c4:	4618      	mov	r0, r3
 81044c6:	f002 fb5f 	bl	8106b88 <RCCEx_PLL3_Config>
 81044ca:	4603      	mov	r3, r0
 81044cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81044d0:	e006      	b.n	81044e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81044d2:	2301      	movs	r3, #1
 81044d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81044d8:	e002      	b.n	81044e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 81044da:	bf00      	nop
 81044dc:	e000      	b.n	81044e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 81044de:	bf00      	nop
    }

    if (ret == HAL_OK)
 81044e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81044e4:	2b00      	cmp	r3, #0
 81044e6:	d10a      	bne.n	81044fe <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 81044e8:	4b4f      	ldr	r3, [pc, #316]	; (8104628 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81044ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81044ec:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 81044f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81044f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81044f6:	4a4c      	ldr	r2, [pc, #304]	; (8104628 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81044f8:	430b      	orrs	r3, r1
 81044fa:	6513      	str	r3, [r2, #80]	; 0x50
 81044fc:	e003      	b.n	8104506 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81044fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104502:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8104506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810450a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810450e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8104512:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8104516:	2300      	movs	r3, #0
 8104518:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 810451c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8104520:	460b      	mov	r3, r1
 8104522:	4313      	orrs	r3, r2
 8104524:	d053      	beq.n	81045ce <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8104526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810452a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 810452e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8104532:	d035      	beq.n	81045a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8104534:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8104538:	d82e      	bhi.n	8104598 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810453a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810453e:	d031      	beq.n	81045a4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8104540:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8104544:	d828      	bhi.n	8104598 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8104546:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810454a:	d01a      	beq.n	8104582 <HAL_RCCEx_PeriphCLKConfig+0x292>
 810454c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104550:	d822      	bhi.n	8104598 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8104552:	2b00      	cmp	r3, #0
 8104554:	d003      	beq.n	810455e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8104556:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810455a:	d007      	beq.n	810456c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 810455c:	e01c      	b.n	8104598 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810455e:	4b32      	ldr	r3, [pc, #200]	; (8104628 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104562:	4a31      	ldr	r2, [pc, #196]	; (8104628 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104568:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810456a:	e01c      	b.n	81045a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810456c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104570:	3308      	adds	r3, #8
 8104572:	2100      	movs	r1, #0
 8104574:	4618      	mov	r0, r3
 8104576:	f002 fa55 	bl	8106a24 <RCCEx_PLL2_Config>
 810457a:	4603      	mov	r3, r0
 810457c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8104580:	e011      	b.n	81045a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104582:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104586:	3328      	adds	r3, #40	; 0x28
 8104588:	2100      	movs	r1, #0
 810458a:	4618      	mov	r0, r3
 810458c:	f002 fafc 	bl	8106b88 <RCCEx_PLL3_Config>
 8104590:	4603      	mov	r3, r0
 8104592:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104596:	e006      	b.n	81045a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8104598:	2301      	movs	r3, #1
 810459a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810459e:	e002      	b.n	81045a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 81045a0:	bf00      	nop
 81045a2:	e000      	b.n	81045a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 81045a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81045a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81045aa:	2b00      	cmp	r3, #0
 81045ac:	d10b      	bne.n	81045c6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 81045ae:	4b1e      	ldr	r3, [pc, #120]	; (8104628 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81045b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81045b2:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 81045b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81045ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 81045be:	4a1a      	ldr	r2, [pc, #104]	; (8104628 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81045c0:	430b      	orrs	r3, r1
 81045c2:	6593      	str	r3, [r2, #88]	; 0x58
 81045c4:	e003      	b.n	81045ce <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81045c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81045ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 81045ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81045d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81045d6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 81045da:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 81045de:	2300      	movs	r3, #0
 81045e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 81045e4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 81045e8:	460b      	mov	r3, r1
 81045ea:	4313      	orrs	r3, r2
 81045ec:	d056      	beq.n	810469c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 81045ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81045f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81045f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81045fa:	d038      	beq.n	810466e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 81045fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104600:	d831      	bhi.n	8104666 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8104602:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8104606:	d034      	beq.n	8104672 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8104608:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810460c:	d82b      	bhi.n	8104666 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810460e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104612:	d01d      	beq.n	8104650 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8104614:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104618:	d825      	bhi.n	8104666 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810461a:	2b00      	cmp	r3, #0
 810461c:	d006      	beq.n	810462c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 810461e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8104622:	d00a      	beq.n	810463a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8104624:	e01f      	b.n	8104666 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8104626:	bf00      	nop
 8104628:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810462c:	4ba2      	ldr	r3, [pc, #648]	; (81048b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810462e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104630:	4aa1      	ldr	r2, [pc, #644]	; (81048b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104632:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104636:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104638:	e01c      	b.n	8104674 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810463a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810463e:	3308      	adds	r3, #8
 8104640:	2100      	movs	r1, #0
 8104642:	4618      	mov	r0, r3
 8104644:	f002 f9ee 	bl	8106a24 <RCCEx_PLL2_Config>
 8104648:	4603      	mov	r3, r0
 810464a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 810464e:	e011      	b.n	8104674 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104650:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104654:	3328      	adds	r3, #40	; 0x28
 8104656:	2100      	movs	r1, #0
 8104658:	4618      	mov	r0, r3
 810465a:	f002 fa95 	bl	8106b88 <RCCEx_PLL3_Config>
 810465e:	4603      	mov	r3, r0
 8104660:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104664:	e006      	b.n	8104674 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8104666:	2301      	movs	r3, #1
 8104668:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810466c:	e002      	b.n	8104674 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 810466e:	bf00      	nop
 8104670:	e000      	b.n	8104674 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8104672:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104674:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104678:	2b00      	cmp	r3, #0
 810467a:	d10b      	bne.n	8104694 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 810467c:	4b8e      	ldr	r3, [pc, #568]	; (81048b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810467e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104680:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8104684:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104688:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 810468c:	4a8a      	ldr	r2, [pc, #552]	; (81048b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810468e:	430b      	orrs	r3, r1
 8104690:	6593      	str	r3, [r2, #88]	; 0x58
 8104692:	e003      	b.n	810469c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104694:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104698:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 810469c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81046a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81046a4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 81046a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 81046ac:	2300      	movs	r3, #0
 81046ae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 81046b2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 81046b6:	460b      	mov	r3, r1
 81046b8:	4313      	orrs	r3, r2
 81046ba:	d03a      	beq.n	8104732 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 81046bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81046c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81046c2:	2b30      	cmp	r3, #48	; 0x30
 81046c4:	d01f      	beq.n	8104706 <HAL_RCCEx_PeriphCLKConfig+0x416>
 81046c6:	2b30      	cmp	r3, #48	; 0x30
 81046c8:	d819      	bhi.n	81046fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 81046ca:	2b20      	cmp	r3, #32
 81046cc:	d00c      	beq.n	81046e8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 81046ce:	2b20      	cmp	r3, #32
 81046d0:	d815      	bhi.n	81046fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 81046d2:	2b00      	cmp	r3, #0
 81046d4:	d019      	beq.n	810470a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 81046d6:	2b10      	cmp	r3, #16
 81046d8:	d111      	bne.n	81046fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81046da:	4b77      	ldr	r3, [pc, #476]	; (81048b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81046dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81046de:	4a76      	ldr	r2, [pc, #472]	; (81048b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81046e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81046e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 81046e6:	e011      	b.n	810470c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81046e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81046ec:	3308      	adds	r3, #8
 81046ee:	2102      	movs	r1, #2
 81046f0:	4618      	mov	r0, r3
 81046f2:	f002 f997 	bl	8106a24 <RCCEx_PLL2_Config>
 81046f6:	4603      	mov	r3, r0
 81046f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 81046fc:	e006      	b.n	810470c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 81046fe:	2301      	movs	r3, #1
 8104700:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104704:	e002      	b.n	810470c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8104706:	bf00      	nop
 8104708:	e000      	b.n	810470c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810470a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810470c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104710:	2b00      	cmp	r3, #0
 8104712:	d10a      	bne.n	810472a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8104714:	4b68      	ldr	r3, [pc, #416]	; (81048b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104718:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 810471c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104722:	4a65      	ldr	r2, [pc, #404]	; (81048b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104724:	430b      	orrs	r3, r1
 8104726:	64d3      	str	r3, [r2, #76]	; 0x4c
 8104728:	e003      	b.n	8104732 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810472a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810472e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8104732:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104736:	e9d3 2300 	ldrd	r2, r3, [r3]
 810473a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 810473e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8104742:	2300      	movs	r3, #0
 8104744:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8104748:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 810474c:	460b      	mov	r3, r1
 810474e:	4313      	orrs	r3, r2
 8104750:	d051      	beq.n	81047f6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8104752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104758:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810475c:	d035      	beq.n	81047ca <HAL_RCCEx_PeriphCLKConfig+0x4da>
 810475e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104762:	d82e      	bhi.n	81047c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8104764:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8104768:	d031      	beq.n	81047ce <HAL_RCCEx_PeriphCLKConfig+0x4de>
 810476a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810476e:	d828      	bhi.n	81047c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8104770:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104774:	d01a      	beq.n	81047ac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8104776:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810477a:	d822      	bhi.n	81047c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 810477c:	2b00      	cmp	r3, #0
 810477e:	d003      	beq.n	8104788 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8104780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104784:	d007      	beq.n	8104796 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8104786:	e01c      	b.n	81047c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104788:	4b4b      	ldr	r3, [pc, #300]	; (81048b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810478a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810478c:	4a4a      	ldr	r2, [pc, #296]	; (81048b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810478e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104792:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8104794:	e01c      	b.n	81047d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104796:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810479a:	3308      	adds	r3, #8
 810479c:	2100      	movs	r1, #0
 810479e:	4618      	mov	r0, r3
 81047a0:	f002 f940 	bl	8106a24 <RCCEx_PLL2_Config>
 81047a4:	4603      	mov	r3, r0
 81047a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81047aa:	e011      	b.n	81047d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81047ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81047b0:	3328      	adds	r3, #40	; 0x28
 81047b2:	2100      	movs	r1, #0
 81047b4:	4618      	mov	r0, r3
 81047b6:	f002 f9e7 	bl	8106b88 <RCCEx_PLL3_Config>
 81047ba:	4603      	mov	r3, r0
 81047bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81047c0:	e006      	b.n	81047d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81047c2:	2301      	movs	r3, #1
 81047c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81047c8:	e002      	b.n	81047d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 81047ca:	bf00      	nop
 81047cc:	e000      	b.n	81047d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 81047ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 81047d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81047d4:	2b00      	cmp	r3, #0
 81047d6:	d10a      	bne.n	81047ee <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 81047d8:	4b37      	ldr	r3, [pc, #220]	; (81048b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81047da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81047dc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 81047e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81047e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81047e6:	4a34      	ldr	r2, [pc, #208]	; (81048b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81047e8:	430b      	orrs	r3, r1
 81047ea:	6513      	str	r3, [r2, #80]	; 0x50
 81047ec:	e003      	b.n	81047f6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81047ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81047f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 81047f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81047fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81047fe:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8104802:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8104806:	2300      	movs	r3, #0
 8104808:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 810480c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8104810:	460b      	mov	r3, r1
 8104812:	4313      	orrs	r3, r2
 8104814:	d056      	beq.n	81048c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8104816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810481a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810481c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8104820:	d033      	beq.n	810488a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8104822:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8104826:	d82c      	bhi.n	8104882 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8104828:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810482c:	d02f      	beq.n	810488e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 810482e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8104832:	d826      	bhi.n	8104882 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8104834:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8104838:	d02b      	beq.n	8104892 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 810483a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810483e:	d820      	bhi.n	8104882 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8104840:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104844:	d012      	beq.n	810486c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8104846:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810484a:	d81a      	bhi.n	8104882 <HAL_RCCEx_PeriphCLKConfig+0x592>
 810484c:	2b00      	cmp	r3, #0
 810484e:	d022      	beq.n	8104896 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8104850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104854:	d115      	bne.n	8104882 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104856:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810485a:	3308      	adds	r3, #8
 810485c:	2101      	movs	r1, #1
 810485e:	4618      	mov	r0, r3
 8104860:	f002 f8e0 	bl	8106a24 <RCCEx_PLL2_Config>
 8104864:	4603      	mov	r3, r0
 8104866:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810486a:	e015      	b.n	8104898 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810486c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104870:	3328      	adds	r3, #40	; 0x28
 8104872:	2101      	movs	r1, #1
 8104874:	4618      	mov	r0, r3
 8104876:	f002 f987 	bl	8106b88 <RCCEx_PLL3_Config>
 810487a:	4603      	mov	r3, r0
 810487c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8104880:	e00a      	b.n	8104898 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104882:	2301      	movs	r3, #1
 8104884:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104888:	e006      	b.n	8104898 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810488a:	bf00      	nop
 810488c:	e004      	b.n	8104898 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810488e:	bf00      	nop
 8104890:	e002      	b.n	8104898 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8104892:	bf00      	nop
 8104894:	e000      	b.n	8104898 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8104896:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104898:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810489c:	2b00      	cmp	r3, #0
 810489e:	d10d      	bne.n	81048bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 81048a0:	4b05      	ldr	r3, [pc, #20]	; (81048b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81048a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81048a4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 81048a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81048ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81048ae:	4a02      	ldr	r2, [pc, #8]	; (81048b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81048b0:	430b      	orrs	r3, r1
 81048b2:	6513      	str	r3, [r2, #80]	; 0x50
 81048b4:	e006      	b.n	81048c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 81048b6:	bf00      	nop
 81048b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81048bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81048c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81048c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81048c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81048cc:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 81048d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 81048d4:	2300      	movs	r3, #0
 81048d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 81048da:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 81048de:	460b      	mov	r3, r1
 81048e0:	4313      	orrs	r3, r2
 81048e2:	d055      	beq.n	8104990 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 81048e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81048e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81048ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81048f0:	d033      	beq.n	810495a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 81048f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81048f6:	d82c      	bhi.n	8104952 <HAL_RCCEx_PeriphCLKConfig+0x662>
 81048f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81048fc:	d02f      	beq.n	810495e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 81048fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104902:	d826      	bhi.n	8104952 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8104904:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104908:	d02b      	beq.n	8104962 <HAL_RCCEx_PeriphCLKConfig+0x672>
 810490a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810490e:	d820      	bhi.n	8104952 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8104910:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104914:	d012      	beq.n	810493c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8104916:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810491a:	d81a      	bhi.n	8104952 <HAL_RCCEx_PeriphCLKConfig+0x662>
 810491c:	2b00      	cmp	r3, #0
 810491e:	d022      	beq.n	8104966 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8104920:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104924:	d115      	bne.n	8104952 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104926:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810492a:	3308      	adds	r3, #8
 810492c:	2101      	movs	r1, #1
 810492e:	4618      	mov	r0, r3
 8104930:	f002 f878 	bl	8106a24 <RCCEx_PLL2_Config>
 8104934:	4603      	mov	r3, r0
 8104936:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810493a:	e015      	b.n	8104968 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810493c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104940:	3328      	adds	r3, #40	; 0x28
 8104942:	2101      	movs	r1, #1
 8104944:	4618      	mov	r0, r3
 8104946:	f002 f91f 	bl	8106b88 <RCCEx_PLL3_Config>
 810494a:	4603      	mov	r3, r0
 810494c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8104950:	e00a      	b.n	8104968 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8104952:	2301      	movs	r3, #1
 8104954:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104958:	e006      	b.n	8104968 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810495a:	bf00      	nop
 810495c:	e004      	b.n	8104968 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810495e:	bf00      	nop
 8104960:	e002      	b.n	8104968 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8104962:	bf00      	nop
 8104964:	e000      	b.n	8104968 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8104966:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104968:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810496c:	2b00      	cmp	r3, #0
 810496e:	d10b      	bne.n	8104988 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8104970:	4ba4      	ldr	r3, [pc, #656]	; (8104c04 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104974:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8104978:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810497c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8104980:	4aa0      	ldr	r2, [pc, #640]	; (8104c04 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104982:	430b      	orrs	r3, r1
 8104984:	6593      	str	r3, [r2, #88]	; 0x58
 8104986:	e003      	b.n	8104990 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104988:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810498c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8104990:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104998:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 810499c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 81049a0:	2300      	movs	r3, #0
 81049a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 81049a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 81049aa:	460b      	mov	r3, r1
 81049ac:	4313      	orrs	r3, r2
 81049ae:	d037      	beq.n	8104a20 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 81049b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81049b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81049b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81049ba:	d00e      	beq.n	81049da <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 81049bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81049c0:	d816      	bhi.n	81049f0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 81049c2:	2b00      	cmp	r3, #0
 81049c4:	d018      	beq.n	81049f8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 81049c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81049ca:	d111      	bne.n	81049f0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81049cc:	4b8d      	ldr	r3, [pc, #564]	; (8104c04 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81049ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81049d0:	4a8c      	ldr	r2, [pc, #560]	; (8104c04 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81049d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81049d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 81049d8:	e00f      	b.n	81049fa <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81049da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81049de:	3308      	adds	r3, #8
 81049e0:	2101      	movs	r1, #1
 81049e2:	4618      	mov	r0, r3
 81049e4:	f002 f81e 	bl	8106a24 <RCCEx_PLL2_Config>
 81049e8:	4603      	mov	r3, r0
 81049ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 81049ee:	e004      	b.n	81049fa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81049f0:	2301      	movs	r3, #1
 81049f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81049f6:	e000      	b.n	81049fa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 81049f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81049fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81049fe:	2b00      	cmp	r3, #0
 8104a00:	d10a      	bne.n	8104a18 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8104a02:	4b80      	ldr	r3, [pc, #512]	; (8104c04 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104a06:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8104a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104a10:	4a7c      	ldr	r2, [pc, #496]	; (8104c04 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104a12:	430b      	orrs	r3, r1
 8104a14:	6513      	str	r3, [r2, #80]	; 0x50
 8104a16:	e003      	b.n	8104a20 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104a18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104a1c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8104a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104a28:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8104a2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8104a30:	2300      	movs	r3, #0
 8104a32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8104a36:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8104a3a:	460b      	mov	r3, r1
 8104a3c:	4313      	orrs	r3, r2
 8104a3e:	d039      	beq.n	8104ab4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8104a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104a46:	2b03      	cmp	r3, #3
 8104a48:	d81c      	bhi.n	8104a84 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8104a4a:	a201      	add	r2, pc, #4	; (adr r2, 8104a50 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8104a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104a50:	08104a8d 	.word	0x08104a8d
 8104a54:	08104a61 	.word	0x08104a61
 8104a58:	08104a6f 	.word	0x08104a6f
 8104a5c:	08104a8d 	.word	0x08104a8d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104a60:	4b68      	ldr	r3, [pc, #416]	; (8104c04 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104a64:	4a67      	ldr	r2, [pc, #412]	; (8104c04 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104a66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104a6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8104a6c:	e00f      	b.n	8104a8e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104a72:	3308      	adds	r3, #8
 8104a74:	2102      	movs	r1, #2
 8104a76:	4618      	mov	r0, r3
 8104a78:	f001 ffd4 	bl	8106a24 <RCCEx_PLL2_Config>
 8104a7c:	4603      	mov	r3, r0
 8104a7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8104a82:	e004      	b.n	8104a8e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8104a84:	2301      	movs	r3, #1
 8104a86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104a8a:	e000      	b.n	8104a8e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8104a8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104a92:	2b00      	cmp	r3, #0
 8104a94:	d10a      	bne.n	8104aac <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8104a96:	4b5b      	ldr	r3, [pc, #364]	; (8104c04 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104a9a:	f023 0103 	bic.w	r1, r3, #3
 8104a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104aa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104aa4:	4a57      	ldr	r2, [pc, #348]	; (8104c04 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104aa6:	430b      	orrs	r3, r1
 8104aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8104aaa:	e003      	b.n	8104ab4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104aac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104ab0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8104ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104abc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8104ac0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8104ac4:	2300      	movs	r3, #0
 8104ac6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8104aca:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8104ace:	460b      	mov	r3, r1
 8104ad0:	4313      	orrs	r3, r2
 8104ad2:	f000 809f 	beq.w	8104c14 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8104ad6:	4b4c      	ldr	r3, [pc, #304]	; (8104c08 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8104ad8:	681b      	ldr	r3, [r3, #0]
 8104ada:	4a4b      	ldr	r2, [pc, #300]	; (8104c08 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8104adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8104ae0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8104ae2:	f7fd fb45 	bl	8102170 <HAL_GetTick>
 8104ae6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8104aea:	e00b      	b.n	8104b04 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8104aec:	f7fd fb40 	bl	8102170 <HAL_GetTick>
 8104af0:	4602      	mov	r2, r0
 8104af2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8104af6:	1ad3      	subs	r3, r2, r3
 8104af8:	2b64      	cmp	r3, #100	; 0x64
 8104afa:	d903      	bls.n	8104b04 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8104afc:	2303      	movs	r3, #3
 8104afe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104b02:	e005      	b.n	8104b10 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8104b04:	4b40      	ldr	r3, [pc, #256]	; (8104c08 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8104b06:	681b      	ldr	r3, [r3, #0]
 8104b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104b0c:	2b00      	cmp	r3, #0
 8104b0e:	d0ed      	beq.n	8104aec <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8104b10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104b14:	2b00      	cmp	r3, #0
 8104b16:	d179      	bne.n	8104c0c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8104b18:	4b3a      	ldr	r3, [pc, #232]	; (8104c04 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104b1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8104b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104b20:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8104b24:	4053      	eors	r3, r2
 8104b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8104b2a:	2b00      	cmp	r3, #0
 8104b2c:	d015      	beq.n	8104b5a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8104b2e:	4b35      	ldr	r3, [pc, #212]	; (8104c04 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104b32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8104b36:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8104b3a:	4b32      	ldr	r3, [pc, #200]	; (8104c04 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104b3e:	4a31      	ldr	r2, [pc, #196]	; (8104c04 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8104b44:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8104b46:	4b2f      	ldr	r3, [pc, #188]	; (8104c04 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104b4a:	4a2e      	ldr	r2, [pc, #184]	; (8104c04 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104b4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8104b50:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8104b52:	4a2c      	ldr	r2, [pc, #176]	; (8104c04 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104b54:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104b58:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8104b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104b5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8104b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104b66:	d118      	bne.n	8104b9a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8104b68:	f7fd fb02 	bl	8102170 <HAL_GetTick>
 8104b6c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8104b70:	e00d      	b.n	8104b8e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8104b72:	f7fd fafd 	bl	8102170 <HAL_GetTick>
 8104b76:	4602      	mov	r2, r0
 8104b78:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8104b7c:	1ad2      	subs	r2, r2, r3
 8104b7e:	f241 3388 	movw	r3, #5000	; 0x1388
 8104b82:	429a      	cmp	r2, r3
 8104b84:	d903      	bls.n	8104b8e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8104b86:	2303      	movs	r3, #3
 8104b88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8104b8c:	e005      	b.n	8104b9a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8104b8e:	4b1d      	ldr	r3, [pc, #116]	; (8104c04 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104b92:	f003 0302 	and.w	r3, r3, #2
 8104b96:	2b00      	cmp	r3, #0
 8104b98:	d0eb      	beq.n	8104b72 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8104b9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104b9e:	2b00      	cmp	r3, #0
 8104ba0:	d12b      	bne.n	8104bfa <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8104ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104ba6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8104baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8104bae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104bb2:	d110      	bne.n	8104bd6 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8104bb4:	4b13      	ldr	r3, [pc, #76]	; (8104c04 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104bb6:	691b      	ldr	r3, [r3, #16]
 8104bb8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8104bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104bc0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8104bc4:	091b      	lsrs	r3, r3, #4
 8104bc6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8104bca:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8104bce:	4a0d      	ldr	r2, [pc, #52]	; (8104c04 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104bd0:	430b      	orrs	r3, r1
 8104bd2:	6113      	str	r3, [r2, #16]
 8104bd4:	e005      	b.n	8104be2 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8104bd6:	4b0b      	ldr	r3, [pc, #44]	; (8104c04 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104bd8:	691b      	ldr	r3, [r3, #16]
 8104bda:	4a0a      	ldr	r2, [pc, #40]	; (8104c04 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104bdc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8104be0:	6113      	str	r3, [r2, #16]
 8104be2:	4b08      	ldr	r3, [pc, #32]	; (8104c04 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104be4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8104be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104bea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8104bee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8104bf2:	4a04      	ldr	r2, [pc, #16]	; (8104c04 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104bf4:	430b      	orrs	r3, r1
 8104bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8104bf8:	e00c      	b.n	8104c14 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8104bfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104bfe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8104c02:	e007      	b.n	8104c14 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8104c04:	58024400 	.word	0x58024400
 8104c08:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104c0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104c10:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8104c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104c1c:	f002 0301 	and.w	r3, r2, #1
 8104c20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8104c24:	2300      	movs	r3, #0
 8104c26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8104c2a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8104c2e:	460b      	mov	r3, r1
 8104c30:	4313      	orrs	r3, r2
 8104c32:	f000 8089 	beq.w	8104d48 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8104c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104c3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104c3c:	2b28      	cmp	r3, #40	; 0x28
 8104c3e:	d86b      	bhi.n	8104d18 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8104c40:	a201      	add	r2, pc, #4	; (adr r2, 8104c48 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8104c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104c46:	bf00      	nop
 8104c48:	08104d21 	.word	0x08104d21
 8104c4c:	08104d19 	.word	0x08104d19
 8104c50:	08104d19 	.word	0x08104d19
 8104c54:	08104d19 	.word	0x08104d19
 8104c58:	08104d19 	.word	0x08104d19
 8104c5c:	08104d19 	.word	0x08104d19
 8104c60:	08104d19 	.word	0x08104d19
 8104c64:	08104d19 	.word	0x08104d19
 8104c68:	08104ced 	.word	0x08104ced
 8104c6c:	08104d19 	.word	0x08104d19
 8104c70:	08104d19 	.word	0x08104d19
 8104c74:	08104d19 	.word	0x08104d19
 8104c78:	08104d19 	.word	0x08104d19
 8104c7c:	08104d19 	.word	0x08104d19
 8104c80:	08104d19 	.word	0x08104d19
 8104c84:	08104d19 	.word	0x08104d19
 8104c88:	08104d03 	.word	0x08104d03
 8104c8c:	08104d19 	.word	0x08104d19
 8104c90:	08104d19 	.word	0x08104d19
 8104c94:	08104d19 	.word	0x08104d19
 8104c98:	08104d19 	.word	0x08104d19
 8104c9c:	08104d19 	.word	0x08104d19
 8104ca0:	08104d19 	.word	0x08104d19
 8104ca4:	08104d19 	.word	0x08104d19
 8104ca8:	08104d21 	.word	0x08104d21
 8104cac:	08104d19 	.word	0x08104d19
 8104cb0:	08104d19 	.word	0x08104d19
 8104cb4:	08104d19 	.word	0x08104d19
 8104cb8:	08104d19 	.word	0x08104d19
 8104cbc:	08104d19 	.word	0x08104d19
 8104cc0:	08104d19 	.word	0x08104d19
 8104cc4:	08104d19 	.word	0x08104d19
 8104cc8:	08104d21 	.word	0x08104d21
 8104ccc:	08104d19 	.word	0x08104d19
 8104cd0:	08104d19 	.word	0x08104d19
 8104cd4:	08104d19 	.word	0x08104d19
 8104cd8:	08104d19 	.word	0x08104d19
 8104cdc:	08104d19 	.word	0x08104d19
 8104ce0:	08104d19 	.word	0x08104d19
 8104ce4:	08104d19 	.word	0x08104d19
 8104ce8:	08104d21 	.word	0x08104d21
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104cf0:	3308      	adds	r3, #8
 8104cf2:	2101      	movs	r1, #1
 8104cf4:	4618      	mov	r0, r3
 8104cf6:	f001 fe95 	bl	8106a24 <RCCEx_PLL2_Config>
 8104cfa:	4603      	mov	r3, r0
 8104cfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8104d00:	e00f      	b.n	8104d22 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104d06:	3328      	adds	r3, #40	; 0x28
 8104d08:	2101      	movs	r1, #1
 8104d0a:	4618      	mov	r0, r3
 8104d0c:	f001 ff3c 	bl	8106b88 <RCCEx_PLL3_Config>
 8104d10:	4603      	mov	r3, r0
 8104d12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8104d16:	e004      	b.n	8104d22 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104d18:	2301      	movs	r3, #1
 8104d1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104d1e:	e000      	b.n	8104d22 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8104d20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104d22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104d26:	2b00      	cmp	r3, #0
 8104d28:	d10a      	bne.n	8104d40 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8104d2a:	4bbf      	ldr	r3, [pc, #764]	; (8105028 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104d2e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8104d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104d36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104d38:	4abb      	ldr	r2, [pc, #748]	; (8105028 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104d3a:	430b      	orrs	r3, r1
 8104d3c:	6553      	str	r3, [r2, #84]	; 0x54
 8104d3e:	e003      	b.n	8104d48 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104d40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104d44:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8104d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104d50:	f002 0302 	and.w	r3, r2, #2
 8104d54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8104d58:	2300      	movs	r3, #0
 8104d5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8104d5e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8104d62:	460b      	mov	r3, r1
 8104d64:	4313      	orrs	r3, r2
 8104d66:	d041      	beq.n	8104dec <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8104d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104d6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8104d6e:	2b05      	cmp	r3, #5
 8104d70:	d824      	bhi.n	8104dbc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8104d72:	a201      	add	r2, pc, #4	; (adr r2, 8104d78 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8104d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104d78:	08104dc5 	.word	0x08104dc5
 8104d7c:	08104d91 	.word	0x08104d91
 8104d80:	08104da7 	.word	0x08104da7
 8104d84:	08104dc5 	.word	0x08104dc5
 8104d88:	08104dc5 	.word	0x08104dc5
 8104d8c:	08104dc5 	.word	0x08104dc5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104d94:	3308      	adds	r3, #8
 8104d96:	2101      	movs	r1, #1
 8104d98:	4618      	mov	r0, r3
 8104d9a:	f001 fe43 	bl	8106a24 <RCCEx_PLL2_Config>
 8104d9e:	4603      	mov	r3, r0
 8104da0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8104da4:	e00f      	b.n	8104dc6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104daa:	3328      	adds	r3, #40	; 0x28
 8104dac:	2101      	movs	r1, #1
 8104dae:	4618      	mov	r0, r3
 8104db0:	f001 feea 	bl	8106b88 <RCCEx_PLL3_Config>
 8104db4:	4603      	mov	r3, r0
 8104db6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8104dba:	e004      	b.n	8104dc6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104dbc:	2301      	movs	r3, #1
 8104dbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104dc2:	e000      	b.n	8104dc6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8104dc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104dc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104dca:	2b00      	cmp	r3, #0
 8104dcc:	d10a      	bne.n	8104de4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8104dce:	4b96      	ldr	r3, [pc, #600]	; (8105028 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104dd2:	f023 0107 	bic.w	r1, r3, #7
 8104dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104dda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8104ddc:	4a92      	ldr	r2, [pc, #584]	; (8105028 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104dde:	430b      	orrs	r3, r1
 8104de0:	6553      	str	r3, [r2, #84]	; 0x54
 8104de2:	e003      	b.n	8104dec <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104de4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104de8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8104dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104df4:	f002 0304 	and.w	r3, r2, #4
 8104df8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8104dfc:	2300      	movs	r3, #0
 8104dfe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8104e02:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8104e06:	460b      	mov	r3, r1
 8104e08:	4313      	orrs	r3, r2
 8104e0a:	d044      	beq.n	8104e96 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8104e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8104e14:	2b05      	cmp	r3, #5
 8104e16:	d825      	bhi.n	8104e64 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8104e18:	a201      	add	r2, pc, #4	; (adr r2, 8104e20 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8104e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104e1e:	bf00      	nop
 8104e20:	08104e6d 	.word	0x08104e6d
 8104e24:	08104e39 	.word	0x08104e39
 8104e28:	08104e4f 	.word	0x08104e4f
 8104e2c:	08104e6d 	.word	0x08104e6d
 8104e30:	08104e6d 	.word	0x08104e6d
 8104e34:	08104e6d 	.word	0x08104e6d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104e3c:	3308      	adds	r3, #8
 8104e3e:	2101      	movs	r1, #1
 8104e40:	4618      	mov	r0, r3
 8104e42:	f001 fdef 	bl	8106a24 <RCCEx_PLL2_Config>
 8104e46:	4603      	mov	r3, r0
 8104e48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8104e4c:	e00f      	b.n	8104e6e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104e52:	3328      	adds	r3, #40	; 0x28
 8104e54:	2101      	movs	r1, #1
 8104e56:	4618      	mov	r0, r3
 8104e58:	f001 fe96 	bl	8106b88 <RCCEx_PLL3_Config>
 8104e5c:	4603      	mov	r3, r0
 8104e5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8104e62:	e004      	b.n	8104e6e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104e64:	2301      	movs	r3, #1
 8104e66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104e6a:	e000      	b.n	8104e6e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8104e6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104e6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104e72:	2b00      	cmp	r3, #0
 8104e74:	d10b      	bne.n	8104e8e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8104e76:	4b6c      	ldr	r3, [pc, #432]	; (8105028 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104e7a:	f023 0107 	bic.w	r1, r3, #7
 8104e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104e82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8104e86:	4a68      	ldr	r2, [pc, #416]	; (8105028 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104e88:	430b      	orrs	r3, r1
 8104e8a:	6593      	str	r3, [r2, #88]	; 0x58
 8104e8c:	e003      	b.n	8104e96 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104e8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104e92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8104e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104e9e:	f002 0320 	and.w	r3, r2, #32
 8104ea2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8104ea6:	2300      	movs	r3, #0
 8104ea8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8104eac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8104eb0:	460b      	mov	r3, r1
 8104eb2:	4313      	orrs	r3, r2
 8104eb4:	d055      	beq.n	8104f62 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8104eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8104ebe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104ec2:	d033      	beq.n	8104f2c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8104ec4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104ec8:	d82c      	bhi.n	8104f24 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8104eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104ece:	d02f      	beq.n	8104f30 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8104ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104ed4:	d826      	bhi.n	8104f24 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8104ed6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104eda:	d02b      	beq.n	8104f34 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8104edc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104ee0:	d820      	bhi.n	8104f24 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8104ee2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104ee6:	d012      	beq.n	8104f0e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8104ee8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104eec:	d81a      	bhi.n	8104f24 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8104eee:	2b00      	cmp	r3, #0
 8104ef0:	d022      	beq.n	8104f38 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8104ef2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104ef6:	d115      	bne.n	8104f24 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104efc:	3308      	adds	r3, #8
 8104efe:	2100      	movs	r1, #0
 8104f00:	4618      	mov	r0, r3
 8104f02:	f001 fd8f 	bl	8106a24 <RCCEx_PLL2_Config>
 8104f06:	4603      	mov	r3, r0
 8104f08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8104f0c:	e015      	b.n	8104f3a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104f12:	3328      	adds	r3, #40	; 0x28
 8104f14:	2102      	movs	r1, #2
 8104f16:	4618      	mov	r0, r3
 8104f18:	f001 fe36 	bl	8106b88 <RCCEx_PLL3_Config>
 8104f1c:	4603      	mov	r3, r0
 8104f1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8104f22:	e00a      	b.n	8104f3a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104f24:	2301      	movs	r3, #1
 8104f26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104f2a:	e006      	b.n	8104f3a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8104f2c:	bf00      	nop
 8104f2e:	e004      	b.n	8104f3a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8104f30:	bf00      	nop
 8104f32:	e002      	b.n	8104f3a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8104f34:	bf00      	nop
 8104f36:	e000      	b.n	8104f3a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8104f38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104f3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104f3e:	2b00      	cmp	r3, #0
 8104f40:	d10b      	bne.n	8104f5a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8104f42:	4b39      	ldr	r3, [pc, #228]	; (8105028 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104f46:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8104f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8104f52:	4a35      	ldr	r2, [pc, #212]	; (8105028 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104f54:	430b      	orrs	r3, r1
 8104f56:	6553      	str	r3, [r2, #84]	; 0x54
 8104f58:	e003      	b.n	8104f62 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104f5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104f5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8104f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104f6a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8104f6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8104f72:	2300      	movs	r3, #0
 8104f74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8104f78:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8104f7c:	460b      	mov	r3, r1
 8104f7e:	4313      	orrs	r3, r2
 8104f80:	d058      	beq.n	8105034 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8104f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104f86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8104f8a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8104f8e:	d033      	beq.n	8104ff8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8104f90:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8104f94:	d82c      	bhi.n	8104ff0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8104f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104f9a:	d02f      	beq.n	8104ffc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8104f9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104fa0:	d826      	bhi.n	8104ff0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8104fa2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8104fa6:	d02b      	beq.n	8105000 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8104fa8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8104fac:	d820      	bhi.n	8104ff0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8104fae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8104fb2:	d012      	beq.n	8104fda <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8104fb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8104fb8:	d81a      	bhi.n	8104ff0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8104fba:	2b00      	cmp	r3, #0
 8104fbc:	d022      	beq.n	8105004 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8104fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8104fc2:	d115      	bne.n	8104ff0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104fc8:	3308      	adds	r3, #8
 8104fca:	2100      	movs	r1, #0
 8104fcc:	4618      	mov	r0, r3
 8104fce:	f001 fd29 	bl	8106a24 <RCCEx_PLL2_Config>
 8104fd2:	4603      	mov	r3, r0
 8104fd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8104fd8:	e015      	b.n	8105006 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104fde:	3328      	adds	r3, #40	; 0x28
 8104fe0:	2102      	movs	r1, #2
 8104fe2:	4618      	mov	r0, r3
 8104fe4:	f001 fdd0 	bl	8106b88 <RCCEx_PLL3_Config>
 8104fe8:	4603      	mov	r3, r0
 8104fea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8104fee:	e00a      	b.n	8105006 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104ff0:	2301      	movs	r3, #1
 8104ff2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104ff6:	e006      	b.n	8105006 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8104ff8:	bf00      	nop
 8104ffa:	e004      	b.n	8105006 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8104ffc:	bf00      	nop
 8104ffe:	e002      	b.n	8105006 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8105000:	bf00      	nop
 8105002:	e000      	b.n	8105006 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8105004:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105006:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810500a:	2b00      	cmp	r3, #0
 810500c:	d10e      	bne.n	810502c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810500e:	4b06      	ldr	r3, [pc, #24]	; (8105028 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105012:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8105016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810501a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810501e:	4a02      	ldr	r2, [pc, #8]	; (8105028 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105020:	430b      	orrs	r3, r1
 8105022:	6593      	str	r3, [r2, #88]	; 0x58
 8105024:	e006      	b.n	8105034 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8105026:	bf00      	nop
 8105028:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810502c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105030:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8105034:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105038:	e9d3 2300 	ldrd	r2, r3, [r3]
 810503c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8105040:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8105044:	2300      	movs	r3, #0
 8105046:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 810504a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 810504e:	460b      	mov	r3, r1
 8105050:	4313      	orrs	r3, r2
 8105052:	d055      	beq.n	8105100 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8105054:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105058:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810505c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8105060:	d033      	beq.n	81050ca <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8105062:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8105066:	d82c      	bhi.n	81050c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8105068:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810506c:	d02f      	beq.n	81050ce <HAL_RCCEx_PeriphCLKConfig+0xdde>
 810506e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8105072:	d826      	bhi.n	81050c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8105074:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8105078:	d02b      	beq.n	81050d2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 810507a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 810507e:	d820      	bhi.n	81050c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8105080:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105084:	d012      	beq.n	81050ac <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8105086:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810508a:	d81a      	bhi.n	81050c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 810508c:	2b00      	cmp	r3, #0
 810508e:	d022      	beq.n	81050d6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8105090:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105094:	d115      	bne.n	81050c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105096:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810509a:	3308      	adds	r3, #8
 810509c:	2100      	movs	r1, #0
 810509e:	4618      	mov	r0, r3
 81050a0:	f001 fcc0 	bl	8106a24 <RCCEx_PLL2_Config>
 81050a4:	4603      	mov	r3, r0
 81050a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 81050aa:	e015      	b.n	81050d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81050ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81050b0:	3328      	adds	r3, #40	; 0x28
 81050b2:	2102      	movs	r1, #2
 81050b4:	4618      	mov	r0, r3
 81050b6:	f001 fd67 	bl	8106b88 <RCCEx_PLL3_Config>
 81050ba:	4603      	mov	r3, r0
 81050bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 81050c0:	e00a      	b.n	81050d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81050c2:	2301      	movs	r3, #1
 81050c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81050c8:	e006      	b.n	81050d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81050ca:	bf00      	nop
 81050cc:	e004      	b.n	81050d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81050ce:	bf00      	nop
 81050d0:	e002      	b.n	81050d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81050d2:	bf00      	nop
 81050d4:	e000      	b.n	81050d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81050d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 81050d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81050dc:	2b00      	cmp	r3, #0
 81050de:	d10b      	bne.n	81050f8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 81050e0:	4ba1      	ldr	r3, [pc, #644]	; (8105368 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81050e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81050e4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 81050e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81050ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81050f0:	4a9d      	ldr	r2, [pc, #628]	; (8105368 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81050f2:	430b      	orrs	r3, r1
 81050f4:	6593      	str	r3, [r2, #88]	; 0x58
 81050f6:	e003      	b.n	8105100 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81050f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81050fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8105100:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105108:	f002 0308 	and.w	r3, r2, #8
 810510c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8105110:	2300      	movs	r3, #0
 8105112:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8105116:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 810511a:	460b      	mov	r3, r1
 810511c:	4313      	orrs	r3, r2
 810511e:	d01e      	beq.n	810515e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8105120:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105124:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810512c:	d10c      	bne.n	8105148 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810512e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105132:	3328      	adds	r3, #40	; 0x28
 8105134:	2102      	movs	r1, #2
 8105136:	4618      	mov	r0, r3
 8105138:	f001 fd26 	bl	8106b88 <RCCEx_PLL3_Config>
 810513c:	4603      	mov	r3, r0
 810513e:	2b00      	cmp	r3, #0
 8105140:	d002      	beq.n	8105148 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8105142:	2301      	movs	r3, #1
 8105144:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8105148:	4b87      	ldr	r3, [pc, #540]	; (8105368 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810514a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810514c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8105150:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105154:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105158:	4a83      	ldr	r2, [pc, #524]	; (8105368 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810515a:	430b      	orrs	r3, r1
 810515c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810515e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105166:	f002 0310 	and.w	r3, r2, #16
 810516a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 810516e:	2300      	movs	r3, #0
 8105170:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8105174:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8105178:	460b      	mov	r3, r1
 810517a:	4313      	orrs	r3, r2
 810517c:	d01e      	beq.n	81051bc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 810517e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105182:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8105186:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810518a:	d10c      	bne.n	81051a6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810518c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105190:	3328      	adds	r3, #40	; 0x28
 8105192:	2102      	movs	r1, #2
 8105194:	4618      	mov	r0, r3
 8105196:	f001 fcf7 	bl	8106b88 <RCCEx_PLL3_Config>
 810519a:	4603      	mov	r3, r0
 810519c:	2b00      	cmp	r3, #0
 810519e:	d002      	beq.n	81051a6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 81051a0:	2301      	movs	r3, #1
 81051a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 81051a6:	4b70      	ldr	r3, [pc, #448]	; (8105368 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81051a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81051aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 81051ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81051b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81051b6:	4a6c      	ldr	r2, [pc, #432]	; (8105368 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81051b8:	430b      	orrs	r3, r1
 81051ba:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 81051bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81051c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81051c4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 81051c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 81051cc:	2300      	movs	r3, #0
 81051ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 81051d2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 81051d6:	460b      	mov	r3, r1
 81051d8:	4313      	orrs	r3, r2
 81051da:	d03e      	beq.n	810525a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 81051dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81051e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 81051e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81051e8:	d022      	beq.n	8105230 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 81051ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81051ee:	d81b      	bhi.n	8105228 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 81051f0:	2b00      	cmp	r3, #0
 81051f2:	d003      	beq.n	81051fc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 81051f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81051f8:	d00b      	beq.n	8105212 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 81051fa:	e015      	b.n	8105228 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81051fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105200:	3308      	adds	r3, #8
 8105202:	2100      	movs	r1, #0
 8105204:	4618      	mov	r0, r3
 8105206:	f001 fc0d 	bl	8106a24 <RCCEx_PLL2_Config>
 810520a:	4603      	mov	r3, r0
 810520c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8105210:	e00f      	b.n	8105232 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105216:	3328      	adds	r3, #40	; 0x28
 8105218:	2102      	movs	r1, #2
 810521a:	4618      	mov	r0, r3
 810521c:	f001 fcb4 	bl	8106b88 <RCCEx_PLL3_Config>
 8105220:	4603      	mov	r3, r0
 8105222:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8105226:	e004      	b.n	8105232 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105228:	2301      	movs	r3, #1
 810522a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810522e:	e000      	b.n	8105232 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8105230:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105232:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105236:	2b00      	cmp	r3, #0
 8105238:	d10b      	bne.n	8105252 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 810523a:	4b4b      	ldr	r3, [pc, #300]	; (8105368 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810523c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810523e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8105242:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105246:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 810524a:	4a47      	ldr	r2, [pc, #284]	; (8105368 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810524c:	430b      	orrs	r3, r1
 810524e:	6593      	str	r3, [r2, #88]	; 0x58
 8105250:	e003      	b.n	810525a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105252:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105256:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810525a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810525e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105262:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8105266:	67bb      	str	r3, [r7, #120]	; 0x78
 8105268:	2300      	movs	r3, #0
 810526a:	67fb      	str	r3, [r7, #124]	; 0x7c
 810526c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8105270:	460b      	mov	r3, r1
 8105272:	4313      	orrs	r3, r2
 8105274:	d03b      	beq.n	81052ee <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8105276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810527a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810527e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8105282:	d01f      	beq.n	81052c4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8105284:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8105288:	d818      	bhi.n	81052bc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 810528a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810528e:	d003      	beq.n	8105298 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8105290:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8105294:	d007      	beq.n	81052a6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8105296:	e011      	b.n	81052bc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105298:	4b33      	ldr	r3, [pc, #204]	; (8105368 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810529a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810529c:	4a32      	ldr	r2, [pc, #200]	; (8105368 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810529e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81052a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 81052a4:	e00f      	b.n	81052c6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81052a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81052aa:	3328      	adds	r3, #40	; 0x28
 81052ac:	2101      	movs	r1, #1
 81052ae:	4618      	mov	r0, r3
 81052b0:	f001 fc6a 	bl	8106b88 <RCCEx_PLL3_Config>
 81052b4:	4603      	mov	r3, r0
 81052b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 81052ba:	e004      	b.n	81052c6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81052bc:	2301      	movs	r3, #1
 81052be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81052c2:	e000      	b.n	81052c6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 81052c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81052c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81052ca:	2b00      	cmp	r3, #0
 81052cc:	d10b      	bne.n	81052e6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 81052ce:	4b26      	ldr	r3, [pc, #152]	; (8105368 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81052d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81052d2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 81052d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81052da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81052de:	4a22      	ldr	r2, [pc, #136]	; (8105368 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81052e0:	430b      	orrs	r3, r1
 81052e2:	6553      	str	r3, [r2, #84]	; 0x54
 81052e4:	e003      	b.n	81052ee <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81052e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81052ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81052ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81052f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81052f6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 81052fa:	673b      	str	r3, [r7, #112]	; 0x70
 81052fc:	2300      	movs	r3, #0
 81052fe:	677b      	str	r3, [r7, #116]	; 0x74
 8105300:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8105304:	460b      	mov	r3, r1
 8105306:	4313      	orrs	r3, r2
 8105308:	d034      	beq.n	8105374 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 810530a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810530e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105310:	2b00      	cmp	r3, #0
 8105312:	d003      	beq.n	810531c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8105314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105318:	d007      	beq.n	810532a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 810531a:	e011      	b.n	8105340 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810531c:	4b12      	ldr	r3, [pc, #72]	; (8105368 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810531e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105320:	4a11      	ldr	r2, [pc, #68]	; (8105368 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105322:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105326:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8105328:	e00e      	b.n	8105348 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810532a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810532e:	3308      	adds	r3, #8
 8105330:	2102      	movs	r1, #2
 8105332:	4618      	mov	r0, r3
 8105334:	f001 fb76 	bl	8106a24 <RCCEx_PLL2_Config>
 8105338:	4603      	mov	r3, r0
 810533a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 810533e:	e003      	b.n	8105348 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8105340:	2301      	movs	r3, #1
 8105342:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105346:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105348:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810534c:	2b00      	cmp	r3, #0
 810534e:	d10d      	bne.n	810536c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8105350:	4b05      	ldr	r3, [pc, #20]	; (8105368 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105354:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8105358:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810535c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810535e:	4a02      	ldr	r2, [pc, #8]	; (8105368 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105360:	430b      	orrs	r3, r1
 8105362:	64d3      	str	r3, [r2, #76]	; 0x4c
 8105364:	e006      	b.n	8105374 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8105366:	bf00      	nop
 8105368:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810536c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105370:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8105374:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105378:	e9d3 2300 	ldrd	r2, r3, [r3]
 810537c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8105380:	66bb      	str	r3, [r7, #104]	; 0x68
 8105382:	2300      	movs	r3, #0
 8105384:	66fb      	str	r3, [r7, #108]	; 0x6c
 8105386:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 810538a:	460b      	mov	r3, r1
 810538c:	4313      	orrs	r3, r2
 810538e:	d00c      	beq.n	81053aa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8105390:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105394:	3328      	adds	r3, #40	; 0x28
 8105396:	2102      	movs	r1, #2
 8105398:	4618      	mov	r0, r3
 810539a:	f001 fbf5 	bl	8106b88 <RCCEx_PLL3_Config>
 810539e:	4603      	mov	r3, r0
 81053a0:	2b00      	cmp	r3, #0
 81053a2:	d002      	beq.n	81053aa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 81053a4:	2301      	movs	r3, #1
 81053a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 81053aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81053ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 81053b2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 81053b6:	663b      	str	r3, [r7, #96]	; 0x60
 81053b8:	2300      	movs	r3, #0
 81053ba:	667b      	str	r3, [r7, #100]	; 0x64
 81053bc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 81053c0:	460b      	mov	r3, r1
 81053c2:	4313      	orrs	r3, r2
 81053c4:	d038      	beq.n	8105438 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 81053c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81053ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81053ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81053d2:	d018      	beq.n	8105406 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 81053d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81053d8:	d811      	bhi.n	81053fe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 81053da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81053de:	d014      	beq.n	810540a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 81053e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81053e4:	d80b      	bhi.n	81053fe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 81053e6:	2b00      	cmp	r3, #0
 81053e8:	d011      	beq.n	810540e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 81053ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81053ee:	d106      	bne.n	81053fe <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81053f0:	4bc3      	ldr	r3, [pc, #780]	; (8105700 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81053f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81053f4:	4ac2      	ldr	r2, [pc, #776]	; (8105700 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81053f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81053fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 81053fc:	e008      	b.n	8105410 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81053fe:	2301      	movs	r3, #1
 8105400:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105404:	e004      	b.n	8105410 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8105406:	bf00      	nop
 8105408:	e002      	b.n	8105410 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 810540a:	bf00      	nop
 810540c:	e000      	b.n	8105410 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 810540e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105410:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105414:	2b00      	cmp	r3, #0
 8105416:	d10b      	bne.n	8105430 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8105418:	4bb9      	ldr	r3, [pc, #740]	; (8105700 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810541a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810541c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8105420:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105424:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8105428:	4ab5      	ldr	r2, [pc, #724]	; (8105700 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810542a:	430b      	orrs	r3, r1
 810542c:	6553      	str	r3, [r2, #84]	; 0x54
 810542e:	e003      	b.n	8105438 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105430:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105434:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8105438:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810543c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105440:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8105444:	65bb      	str	r3, [r7, #88]	; 0x58
 8105446:	2300      	movs	r3, #0
 8105448:	65fb      	str	r3, [r7, #92]	; 0x5c
 810544a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 810544e:	460b      	mov	r3, r1
 8105450:	4313      	orrs	r3, r2
 8105452:	d009      	beq.n	8105468 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8105454:	4baa      	ldr	r3, [pc, #680]	; (8105700 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105458:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 810545c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8105462:	4aa7      	ldr	r2, [pc, #668]	; (8105700 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105464:	430b      	orrs	r3, r1
 8105466:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8105468:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810546c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105470:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8105474:	653b      	str	r3, [r7, #80]	; 0x50
 8105476:	2300      	movs	r3, #0
 8105478:	657b      	str	r3, [r7, #84]	; 0x54
 810547a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 810547e:	460b      	mov	r3, r1
 8105480:	4313      	orrs	r3, r2
 8105482:	d00a      	beq.n	810549a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8105484:	4b9e      	ldr	r3, [pc, #632]	; (8105700 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105486:	691b      	ldr	r3, [r3, #16]
 8105488:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 810548c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105490:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8105494:	4a9a      	ldr	r2, [pc, #616]	; (8105700 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105496:	430b      	orrs	r3, r1
 8105498:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 810549a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810549e:	e9d3 2300 	ldrd	r2, r3, [r3]
 81054a2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 81054a6:	64bb      	str	r3, [r7, #72]	; 0x48
 81054a8:	2300      	movs	r3, #0
 81054aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 81054ac:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 81054b0:	460b      	mov	r3, r1
 81054b2:	4313      	orrs	r3, r2
 81054b4:	d009      	beq.n	81054ca <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 81054b6:	4b92      	ldr	r3, [pc, #584]	; (8105700 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81054b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81054ba:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 81054be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81054c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81054c4:	4a8e      	ldr	r2, [pc, #568]	; (8105700 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81054c6:	430b      	orrs	r3, r1
 81054c8:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 81054ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81054ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 81054d2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 81054d6:	643b      	str	r3, [r7, #64]	; 0x40
 81054d8:	2300      	movs	r3, #0
 81054da:	647b      	str	r3, [r7, #68]	; 0x44
 81054dc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 81054e0:	460b      	mov	r3, r1
 81054e2:	4313      	orrs	r3, r2
 81054e4:	d00e      	beq.n	8105504 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 81054e6:	4b86      	ldr	r3, [pc, #536]	; (8105700 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81054e8:	691b      	ldr	r3, [r3, #16]
 81054ea:	4a85      	ldr	r2, [pc, #532]	; (8105700 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81054ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 81054f0:	6113      	str	r3, [r2, #16]
 81054f2:	4b83      	ldr	r3, [pc, #524]	; (8105700 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81054f4:	6919      	ldr	r1, [r3, #16]
 81054f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81054fa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 81054fe:	4a80      	ldr	r2, [pc, #512]	; (8105700 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105500:	430b      	orrs	r3, r1
 8105502:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8105504:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105508:	e9d3 2300 	ldrd	r2, r3, [r3]
 810550c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8105510:	63bb      	str	r3, [r7, #56]	; 0x38
 8105512:	2300      	movs	r3, #0
 8105514:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105516:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 810551a:	460b      	mov	r3, r1
 810551c:	4313      	orrs	r3, r2
 810551e:	d009      	beq.n	8105534 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8105520:	4b77      	ldr	r3, [pc, #476]	; (8105700 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105524:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8105528:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810552c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810552e:	4a74      	ldr	r2, [pc, #464]	; (8105700 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105530:	430b      	orrs	r3, r1
 8105532:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8105534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105538:	e9d3 2300 	ldrd	r2, r3, [r3]
 810553c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8105540:	633b      	str	r3, [r7, #48]	; 0x30
 8105542:	2300      	movs	r3, #0
 8105544:	637b      	str	r3, [r7, #52]	; 0x34
 8105546:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 810554a:	460b      	mov	r3, r1
 810554c:	4313      	orrs	r3, r2
 810554e:	d00a      	beq.n	8105566 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8105550:	4b6b      	ldr	r3, [pc, #428]	; (8105700 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105554:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8105558:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810555c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8105560:	4a67      	ldr	r2, [pc, #412]	; (8105700 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105562:	430b      	orrs	r3, r1
 8105564:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8105566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810556a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810556e:	2100      	movs	r1, #0
 8105570:	62b9      	str	r1, [r7, #40]	; 0x28
 8105572:	f003 0301 	and.w	r3, r3, #1
 8105576:	62fb      	str	r3, [r7, #44]	; 0x2c
 8105578:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 810557c:	460b      	mov	r3, r1
 810557e:	4313      	orrs	r3, r2
 8105580:	d011      	beq.n	81055a6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105582:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105586:	3308      	adds	r3, #8
 8105588:	2100      	movs	r1, #0
 810558a:	4618      	mov	r0, r3
 810558c:	f001 fa4a 	bl	8106a24 <RCCEx_PLL2_Config>
 8105590:	4603      	mov	r3, r0
 8105592:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8105596:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810559a:	2b00      	cmp	r3, #0
 810559c:	d003      	beq.n	81055a6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810559e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81055a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 81055a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81055aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81055ae:	2100      	movs	r1, #0
 81055b0:	6239      	str	r1, [r7, #32]
 81055b2:	f003 0302 	and.w	r3, r3, #2
 81055b6:	627b      	str	r3, [r7, #36]	; 0x24
 81055b8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 81055bc:	460b      	mov	r3, r1
 81055be:	4313      	orrs	r3, r2
 81055c0:	d011      	beq.n	81055e6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81055c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81055c6:	3308      	adds	r3, #8
 81055c8:	2101      	movs	r1, #1
 81055ca:	4618      	mov	r0, r3
 81055cc:	f001 fa2a 	bl	8106a24 <RCCEx_PLL2_Config>
 81055d0:	4603      	mov	r3, r0
 81055d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 81055d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81055da:	2b00      	cmp	r3, #0
 81055dc:	d003      	beq.n	81055e6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81055de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81055e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 81055e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81055ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 81055ee:	2100      	movs	r1, #0
 81055f0:	61b9      	str	r1, [r7, #24]
 81055f2:	f003 0304 	and.w	r3, r3, #4
 81055f6:	61fb      	str	r3, [r7, #28]
 81055f8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 81055fc:	460b      	mov	r3, r1
 81055fe:	4313      	orrs	r3, r2
 8105600:	d011      	beq.n	8105626 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105602:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105606:	3308      	adds	r3, #8
 8105608:	2102      	movs	r1, #2
 810560a:	4618      	mov	r0, r3
 810560c:	f001 fa0a 	bl	8106a24 <RCCEx_PLL2_Config>
 8105610:	4603      	mov	r3, r0
 8105612:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8105616:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810561a:	2b00      	cmp	r3, #0
 810561c:	d003      	beq.n	8105626 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810561e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105622:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8105626:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810562a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810562e:	2100      	movs	r1, #0
 8105630:	6139      	str	r1, [r7, #16]
 8105632:	f003 0308 	and.w	r3, r3, #8
 8105636:	617b      	str	r3, [r7, #20]
 8105638:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 810563c:	460b      	mov	r3, r1
 810563e:	4313      	orrs	r3, r2
 8105640:	d011      	beq.n	8105666 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105642:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105646:	3328      	adds	r3, #40	; 0x28
 8105648:	2100      	movs	r1, #0
 810564a:	4618      	mov	r0, r3
 810564c:	f001 fa9c 	bl	8106b88 <RCCEx_PLL3_Config>
 8105650:	4603      	mov	r3, r0
 8105652:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8105656:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810565a:	2b00      	cmp	r3, #0
 810565c:	d003      	beq.n	8105666 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810565e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105662:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8105666:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810566a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810566e:	2100      	movs	r1, #0
 8105670:	60b9      	str	r1, [r7, #8]
 8105672:	f003 0310 	and.w	r3, r3, #16
 8105676:	60fb      	str	r3, [r7, #12]
 8105678:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 810567c:	460b      	mov	r3, r1
 810567e:	4313      	orrs	r3, r2
 8105680:	d011      	beq.n	81056a6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105682:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105686:	3328      	adds	r3, #40	; 0x28
 8105688:	2101      	movs	r1, #1
 810568a:	4618      	mov	r0, r3
 810568c:	f001 fa7c 	bl	8106b88 <RCCEx_PLL3_Config>
 8105690:	4603      	mov	r3, r0
 8105692:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8105696:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810569a:	2b00      	cmp	r3, #0
 810569c:	d003      	beq.n	81056a6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810569e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81056a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 81056a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81056aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81056ae:	2100      	movs	r1, #0
 81056b0:	6039      	str	r1, [r7, #0]
 81056b2:	f003 0320 	and.w	r3, r3, #32
 81056b6:	607b      	str	r3, [r7, #4]
 81056b8:	e9d7 1200 	ldrd	r1, r2, [r7]
 81056bc:	460b      	mov	r3, r1
 81056be:	4313      	orrs	r3, r2
 81056c0:	d011      	beq.n	81056e6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81056c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81056c6:	3328      	adds	r3, #40	; 0x28
 81056c8:	2102      	movs	r1, #2
 81056ca:	4618      	mov	r0, r3
 81056cc:	f001 fa5c 	bl	8106b88 <RCCEx_PLL3_Config>
 81056d0:	4603      	mov	r3, r0
 81056d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 81056d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81056da:	2b00      	cmp	r3, #0
 81056dc:	d003      	beq.n	81056e6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81056de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81056e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 81056e6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 81056ea:	2b00      	cmp	r3, #0
 81056ec:	d101      	bne.n	81056f2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 81056ee:	2300      	movs	r3, #0
 81056f0:	e000      	b.n	81056f4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 81056f2:	2301      	movs	r3, #1
}
 81056f4:	4618      	mov	r0, r3
 81056f6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 81056fa:	46bd      	mov	sp, r7
 81056fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8105700:	58024400 	.word	0x58024400

08105704 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8105704:	b580      	push	{r7, lr}
 8105706:	b090      	sub	sp, #64	; 0x40
 8105708:	af00      	add	r7, sp, #0
 810570a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 810570e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105712:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8105716:	430b      	orrs	r3, r1
 8105718:	f040 8094 	bne.w	8105844 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 810571c:	4b9e      	ldr	r3, [pc, #632]	; (8105998 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810571e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105720:	f003 0307 	and.w	r3, r3, #7
 8105724:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8105726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105728:	2b04      	cmp	r3, #4
 810572a:	f200 8087 	bhi.w	810583c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 810572e:	a201      	add	r2, pc, #4	; (adr r2, 8105734 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8105730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105734:	08105749 	.word	0x08105749
 8105738:	08105771 	.word	0x08105771
 810573c:	08105799 	.word	0x08105799
 8105740:	08105835 	.word	0x08105835
 8105744:	081057c1 	.word	0x081057c1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105748:	4b93      	ldr	r3, [pc, #588]	; (8105998 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810574a:	681b      	ldr	r3, [r3, #0]
 810574c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8105750:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105754:	d108      	bne.n	8105768 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810575a:	4618      	mov	r0, r3
 810575c:	f001 f810 	bl	8106780 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8105760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105762:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105764:	f000 bd45 	b.w	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105768:	2300      	movs	r3, #0
 810576a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810576c:	f000 bd41 	b.w	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105770:	4b89      	ldr	r3, [pc, #548]	; (8105998 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105772:	681b      	ldr	r3, [r3, #0]
 8105774:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105778:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810577c:	d108      	bne.n	8105790 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810577e:	f107 0318 	add.w	r3, r7, #24
 8105782:	4618      	mov	r0, r3
 8105784:	f000 fd54 	bl	8106230 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8105788:	69bb      	ldr	r3, [r7, #24]
 810578a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810578c:	f000 bd31 	b.w	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105790:	2300      	movs	r3, #0
 8105792:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105794:	f000 bd2d 	b.w	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105798:	4b7f      	ldr	r3, [pc, #508]	; (8105998 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810579a:	681b      	ldr	r3, [r3, #0]
 810579c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81057a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81057a4:	d108      	bne.n	81057b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81057a6:	f107 030c 	add.w	r3, r7, #12
 81057aa:	4618      	mov	r0, r3
 81057ac:	f000 fe94 	bl	81064d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81057b0:	68fb      	ldr	r3, [r7, #12]
 81057b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81057b4:	f000 bd1d 	b.w	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81057b8:	2300      	movs	r3, #0
 81057ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81057bc:	f000 bd19 	b.w	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81057c0:	4b75      	ldr	r3, [pc, #468]	; (8105998 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81057c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81057c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81057c8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81057ca:	4b73      	ldr	r3, [pc, #460]	; (8105998 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81057cc:	681b      	ldr	r3, [r3, #0]
 81057ce:	f003 0304 	and.w	r3, r3, #4
 81057d2:	2b04      	cmp	r3, #4
 81057d4:	d10c      	bne.n	81057f0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 81057d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81057d8:	2b00      	cmp	r3, #0
 81057da:	d109      	bne.n	81057f0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81057dc:	4b6e      	ldr	r3, [pc, #440]	; (8105998 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81057de:	681b      	ldr	r3, [r3, #0]
 81057e0:	08db      	lsrs	r3, r3, #3
 81057e2:	f003 0303 	and.w	r3, r3, #3
 81057e6:	4a6d      	ldr	r2, [pc, #436]	; (810599c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 81057e8:	fa22 f303 	lsr.w	r3, r2, r3
 81057ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 81057ee:	e01f      	b.n	8105830 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81057f0:	4b69      	ldr	r3, [pc, #420]	; (8105998 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81057f2:	681b      	ldr	r3, [r3, #0]
 81057f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81057f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81057fc:	d106      	bne.n	810580c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 81057fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105800:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105804:	d102      	bne.n	810580c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8105806:	4b66      	ldr	r3, [pc, #408]	; (81059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8105808:	63fb      	str	r3, [r7, #60]	; 0x3c
 810580a:	e011      	b.n	8105830 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810580c:	4b62      	ldr	r3, [pc, #392]	; (8105998 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810580e:	681b      	ldr	r3, [r3, #0]
 8105810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105814:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105818:	d106      	bne.n	8105828 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 810581a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810581c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105820:	d102      	bne.n	8105828 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8105822:	4b60      	ldr	r3, [pc, #384]	; (81059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8105824:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105826:	e003      	b.n	8105830 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8105828:	2300      	movs	r3, #0
 810582a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 810582c:	f000 bce1 	b.w	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8105830:	f000 bcdf 	b.w	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8105834:	4b5c      	ldr	r3, [pc, #368]	; (81059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8105836:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105838:	f000 bcdb 	b.w	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810583c:	2300      	movs	r3, #0
 810583e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105840:	f000 bcd7 	b.w	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8105844:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105848:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 810584c:	430b      	orrs	r3, r1
 810584e:	f040 80ad 	bne.w	81059ac <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8105852:	4b51      	ldr	r3, [pc, #324]	; (8105998 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105856:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 810585a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 810585c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810585e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105862:	d056      	beq.n	8105912 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8105864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810586a:	f200 8090 	bhi.w	810598e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 810586e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105870:	2bc0      	cmp	r3, #192	; 0xc0
 8105872:	f000 8088 	beq.w	8105986 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8105876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105878:	2bc0      	cmp	r3, #192	; 0xc0
 810587a:	f200 8088 	bhi.w	810598e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 810587e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105880:	2b80      	cmp	r3, #128	; 0x80
 8105882:	d032      	beq.n	81058ea <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8105884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105886:	2b80      	cmp	r3, #128	; 0x80
 8105888:	f200 8081 	bhi.w	810598e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 810588c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810588e:	2b00      	cmp	r3, #0
 8105890:	d003      	beq.n	810589a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8105892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105894:	2b40      	cmp	r3, #64	; 0x40
 8105896:	d014      	beq.n	81058c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8105898:	e079      	b.n	810598e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810589a:	4b3f      	ldr	r3, [pc, #252]	; (8105998 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810589c:	681b      	ldr	r3, [r3, #0]
 810589e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81058a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81058a6:	d108      	bne.n	81058ba <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81058a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81058ac:	4618      	mov	r0, r3
 81058ae:	f000 ff67 	bl	8106780 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81058b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81058b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81058b6:	f000 bc9c 	b.w	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81058ba:	2300      	movs	r3, #0
 81058bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81058be:	f000 bc98 	b.w	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81058c2:	4b35      	ldr	r3, [pc, #212]	; (8105998 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81058c4:	681b      	ldr	r3, [r3, #0]
 81058c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81058ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81058ce:	d108      	bne.n	81058e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81058d0:	f107 0318 	add.w	r3, r7, #24
 81058d4:	4618      	mov	r0, r3
 81058d6:	f000 fcab 	bl	8106230 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81058da:	69bb      	ldr	r3, [r7, #24]
 81058dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81058de:	f000 bc88 	b.w	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81058e2:	2300      	movs	r3, #0
 81058e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81058e6:	f000 bc84 	b.w	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81058ea:	4b2b      	ldr	r3, [pc, #172]	; (8105998 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81058ec:	681b      	ldr	r3, [r3, #0]
 81058ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81058f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81058f6:	d108      	bne.n	810590a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81058f8:	f107 030c 	add.w	r3, r7, #12
 81058fc:	4618      	mov	r0, r3
 81058fe:	f000 fdeb 	bl	81064d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8105902:	68fb      	ldr	r3, [r7, #12]
 8105904:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105906:	f000 bc74 	b.w	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810590a:	2300      	movs	r3, #0
 810590c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810590e:	f000 bc70 	b.w	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8105912:	4b21      	ldr	r3, [pc, #132]	; (8105998 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105916:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810591a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810591c:	4b1e      	ldr	r3, [pc, #120]	; (8105998 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810591e:	681b      	ldr	r3, [r3, #0]
 8105920:	f003 0304 	and.w	r3, r3, #4
 8105924:	2b04      	cmp	r3, #4
 8105926:	d10c      	bne.n	8105942 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8105928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810592a:	2b00      	cmp	r3, #0
 810592c:	d109      	bne.n	8105942 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810592e:	4b1a      	ldr	r3, [pc, #104]	; (8105998 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105930:	681b      	ldr	r3, [r3, #0]
 8105932:	08db      	lsrs	r3, r3, #3
 8105934:	f003 0303 	and.w	r3, r3, #3
 8105938:	4a18      	ldr	r2, [pc, #96]	; (810599c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 810593a:	fa22 f303 	lsr.w	r3, r2, r3
 810593e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105940:	e01f      	b.n	8105982 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105942:	4b15      	ldr	r3, [pc, #84]	; (8105998 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105944:	681b      	ldr	r3, [r3, #0]
 8105946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810594a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810594e:	d106      	bne.n	810595e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8105950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105952:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105956:	d102      	bne.n	810595e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8105958:	4b11      	ldr	r3, [pc, #68]	; (81059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 810595a:	63fb      	str	r3, [r7, #60]	; 0x3c
 810595c:	e011      	b.n	8105982 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810595e:	4b0e      	ldr	r3, [pc, #56]	; (8105998 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105960:	681b      	ldr	r3, [r3, #0]
 8105962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105966:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810596a:	d106      	bne.n	810597a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 810596c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810596e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105972:	d102      	bne.n	810597a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8105974:	4b0b      	ldr	r3, [pc, #44]	; (81059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8105976:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105978:	e003      	b.n	8105982 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810597a:	2300      	movs	r3, #0
 810597c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 810597e:	f000 bc38 	b.w	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8105982:	f000 bc36 	b.w	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8105986:	4b08      	ldr	r3, [pc, #32]	; (81059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8105988:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810598a:	f000 bc32 	b.w	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810598e:	2300      	movs	r3, #0
 8105990:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105992:	f000 bc2e 	b.w	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8105996:	bf00      	nop
 8105998:	58024400 	.word	0x58024400
 810599c:	03d09000 	.word	0x03d09000
 81059a0:	003d0900 	.word	0x003d0900
 81059a4:	007a1200 	.word	0x007a1200
 81059a8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 81059ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 81059b0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 81059b4:	430b      	orrs	r3, r1
 81059b6:	f040 809c 	bne.w	8105af2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 81059ba:	4b9e      	ldr	r3, [pc, #632]	; (8105c34 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81059bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81059be:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 81059c2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 81059c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81059c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 81059ca:	d054      	beq.n	8105a76 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 81059cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81059ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 81059d2:	f200 808b 	bhi.w	8105aec <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 81059d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81059d8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 81059dc:	f000 8083 	beq.w	8105ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 81059e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81059e2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 81059e6:	f200 8081 	bhi.w	8105aec <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 81059ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81059ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81059f0:	d02f      	beq.n	8105a52 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 81059f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81059f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81059f8:	d878      	bhi.n	8105aec <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 81059fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81059fc:	2b00      	cmp	r3, #0
 81059fe:	d004      	beq.n	8105a0a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8105a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105a02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8105a06:	d012      	beq.n	8105a2e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8105a08:	e070      	b.n	8105aec <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105a0a:	4b8a      	ldr	r3, [pc, #552]	; (8105c34 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105a0c:	681b      	ldr	r3, [r3, #0]
 8105a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8105a12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105a16:	d107      	bne.n	8105a28 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105a18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8105a1c:	4618      	mov	r0, r3
 8105a1e:	f000 feaf 	bl	8106780 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8105a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105a24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105a26:	e3e4      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105a28:	2300      	movs	r3, #0
 8105a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105a2c:	e3e1      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105a2e:	4b81      	ldr	r3, [pc, #516]	; (8105c34 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105a30:	681b      	ldr	r3, [r3, #0]
 8105a32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105a36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8105a3a:	d107      	bne.n	8105a4c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105a3c:	f107 0318 	add.w	r3, r7, #24
 8105a40:	4618      	mov	r0, r3
 8105a42:	f000 fbf5 	bl	8106230 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8105a46:	69bb      	ldr	r3, [r7, #24]
 8105a48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105a4a:	e3d2      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105a4c:	2300      	movs	r3, #0
 8105a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105a50:	e3cf      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105a52:	4b78      	ldr	r3, [pc, #480]	; (8105c34 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105a54:	681b      	ldr	r3, [r3, #0]
 8105a56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105a5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105a5e:	d107      	bne.n	8105a70 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105a60:	f107 030c 	add.w	r3, r7, #12
 8105a64:	4618      	mov	r0, r3
 8105a66:	f000 fd37 	bl	81064d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8105a6a:	68fb      	ldr	r3, [r7, #12]
 8105a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105a6e:	e3c0      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105a70:	2300      	movs	r3, #0
 8105a72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105a74:	e3bd      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8105a76:	4b6f      	ldr	r3, [pc, #444]	; (8105c34 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105a7a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8105a7e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105a80:	4b6c      	ldr	r3, [pc, #432]	; (8105c34 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105a82:	681b      	ldr	r3, [r3, #0]
 8105a84:	f003 0304 	and.w	r3, r3, #4
 8105a88:	2b04      	cmp	r3, #4
 8105a8a:	d10c      	bne.n	8105aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8105a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105a8e:	2b00      	cmp	r3, #0
 8105a90:	d109      	bne.n	8105aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105a92:	4b68      	ldr	r3, [pc, #416]	; (8105c34 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105a94:	681b      	ldr	r3, [r3, #0]
 8105a96:	08db      	lsrs	r3, r3, #3
 8105a98:	f003 0303 	and.w	r3, r3, #3
 8105a9c:	4a66      	ldr	r2, [pc, #408]	; (8105c38 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8105a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8105aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105aa4:	e01e      	b.n	8105ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105aa6:	4b63      	ldr	r3, [pc, #396]	; (8105c34 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105aa8:	681b      	ldr	r3, [r3, #0]
 8105aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105aae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105ab2:	d106      	bne.n	8105ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8105ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105ab6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105aba:	d102      	bne.n	8105ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8105abc:	4b5f      	ldr	r3, [pc, #380]	; (8105c3c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8105abe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105ac0:	e010      	b.n	8105ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8105ac2:	4b5c      	ldr	r3, [pc, #368]	; (8105c34 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105ac4:	681b      	ldr	r3, [r3, #0]
 8105ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105aca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105ace:	d106      	bne.n	8105ade <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8105ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105ad2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105ad6:	d102      	bne.n	8105ade <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8105ad8:	4b59      	ldr	r3, [pc, #356]	; (8105c40 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8105ada:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105adc:	e002      	b.n	8105ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8105ade:	2300      	movs	r3, #0
 8105ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8105ae2:	e386      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8105ae4:	e385      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8105ae6:	4b57      	ldr	r3, [pc, #348]	; (8105c44 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8105ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105aea:	e382      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8105aec:	2300      	movs	r3, #0
 8105aee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105af0:	e37f      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8105af2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105af6:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8105afa:	430b      	orrs	r3, r1
 8105afc:	f040 80a7 	bne.w	8105c4e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8105b00:	4b4c      	ldr	r3, [pc, #304]	; (8105c34 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105b04:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8105b08:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8105b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105b0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8105b10:	d055      	beq.n	8105bbe <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8105b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105b14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8105b18:	f200 8096 	bhi.w	8105c48 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8105b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105b1e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8105b22:	f000 8084 	beq.w	8105c2e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8105b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105b28:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8105b2c:	f200 808c 	bhi.w	8105c48 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8105b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105b32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105b36:	d030      	beq.n	8105b9a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8105b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105b3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105b3e:	f200 8083 	bhi.w	8105c48 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8105b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105b44:	2b00      	cmp	r3, #0
 8105b46:	d004      	beq.n	8105b52 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8105b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105b4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8105b4e:	d012      	beq.n	8105b76 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8105b50:	e07a      	b.n	8105c48 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105b52:	4b38      	ldr	r3, [pc, #224]	; (8105c34 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105b54:	681b      	ldr	r3, [r3, #0]
 8105b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8105b5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105b5e:	d107      	bne.n	8105b70 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105b60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8105b64:	4618      	mov	r0, r3
 8105b66:	f000 fe0b 	bl	8106780 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8105b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105b6e:	e340      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105b70:	2300      	movs	r3, #0
 8105b72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105b74:	e33d      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105b76:	4b2f      	ldr	r3, [pc, #188]	; (8105c34 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105b78:	681b      	ldr	r3, [r3, #0]
 8105b7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105b7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8105b82:	d107      	bne.n	8105b94 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105b84:	f107 0318 	add.w	r3, r7, #24
 8105b88:	4618      	mov	r0, r3
 8105b8a:	f000 fb51 	bl	8106230 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8105b8e:	69bb      	ldr	r3, [r7, #24]
 8105b90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105b92:	e32e      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105b94:	2300      	movs	r3, #0
 8105b96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105b98:	e32b      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105b9a:	4b26      	ldr	r3, [pc, #152]	; (8105c34 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105b9c:	681b      	ldr	r3, [r3, #0]
 8105b9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105ba2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105ba6:	d107      	bne.n	8105bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105ba8:	f107 030c 	add.w	r3, r7, #12
 8105bac:	4618      	mov	r0, r3
 8105bae:	f000 fc93 	bl	81064d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8105bb2:	68fb      	ldr	r3, [r7, #12]
 8105bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105bb6:	e31c      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105bb8:	2300      	movs	r3, #0
 8105bba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105bbc:	e319      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8105bbe:	4b1d      	ldr	r3, [pc, #116]	; (8105c34 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105bc2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8105bc6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105bc8:	4b1a      	ldr	r3, [pc, #104]	; (8105c34 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105bca:	681b      	ldr	r3, [r3, #0]
 8105bcc:	f003 0304 	and.w	r3, r3, #4
 8105bd0:	2b04      	cmp	r3, #4
 8105bd2:	d10c      	bne.n	8105bee <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8105bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105bd6:	2b00      	cmp	r3, #0
 8105bd8:	d109      	bne.n	8105bee <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105bda:	4b16      	ldr	r3, [pc, #88]	; (8105c34 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105bdc:	681b      	ldr	r3, [r3, #0]
 8105bde:	08db      	lsrs	r3, r3, #3
 8105be0:	f003 0303 	and.w	r3, r3, #3
 8105be4:	4a14      	ldr	r2, [pc, #80]	; (8105c38 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8105be6:	fa22 f303 	lsr.w	r3, r2, r3
 8105bea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105bec:	e01e      	b.n	8105c2c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105bee:	4b11      	ldr	r3, [pc, #68]	; (8105c34 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105bf0:	681b      	ldr	r3, [r3, #0]
 8105bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105bf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105bfa:	d106      	bne.n	8105c0a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8105bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105bfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105c02:	d102      	bne.n	8105c0a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8105c04:	4b0d      	ldr	r3, [pc, #52]	; (8105c3c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8105c06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105c08:	e010      	b.n	8105c2c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8105c0a:	4b0a      	ldr	r3, [pc, #40]	; (8105c34 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105c0c:	681b      	ldr	r3, [r3, #0]
 8105c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105c12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105c16:	d106      	bne.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8105c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105c1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105c1e:	d102      	bne.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8105c20:	4b07      	ldr	r3, [pc, #28]	; (8105c40 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8105c22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105c24:	e002      	b.n	8105c2c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8105c26:	2300      	movs	r3, #0
 8105c28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8105c2a:	e2e2      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8105c2c:	e2e1      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8105c2e:	4b05      	ldr	r3, [pc, #20]	; (8105c44 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8105c30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105c32:	e2de      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8105c34:	58024400 	.word	0x58024400
 8105c38:	03d09000 	.word	0x03d09000
 8105c3c:	003d0900 	.word	0x003d0900
 8105c40:	007a1200 	.word	0x007a1200
 8105c44:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8105c48:	2300      	movs	r3, #0
 8105c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105c4c:	e2d1      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8105c4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105c52:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8105c56:	430b      	orrs	r3, r1
 8105c58:	f040 809c 	bne.w	8105d94 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8105c5c:	4b93      	ldr	r3, [pc, #588]	; (8105eac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105c60:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8105c64:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8105c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105c68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105c6c:	d054      	beq.n	8105d18 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8105c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105c70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105c74:	f200 808b 	bhi.w	8105d8e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8105c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105c7a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8105c7e:	f000 8083 	beq.w	8105d88 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8105c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105c84:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8105c88:	f200 8081 	bhi.w	8105d8e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8105c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105c92:	d02f      	beq.n	8105cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8105c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105c96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105c9a:	d878      	bhi.n	8105d8e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8105c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105c9e:	2b00      	cmp	r3, #0
 8105ca0:	d004      	beq.n	8105cac <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8105ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105ca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105ca8:	d012      	beq.n	8105cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8105caa:	e070      	b.n	8105d8e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105cac:	4b7f      	ldr	r3, [pc, #508]	; (8105eac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105cae:	681b      	ldr	r3, [r3, #0]
 8105cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8105cb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105cb8:	d107      	bne.n	8105cca <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8105cbe:	4618      	mov	r0, r3
 8105cc0:	f000 fd5e 	bl	8106780 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8105cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105cc8:	e293      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105cca:	2300      	movs	r3, #0
 8105ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105cce:	e290      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105cd0:	4b76      	ldr	r3, [pc, #472]	; (8105eac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105cd2:	681b      	ldr	r3, [r3, #0]
 8105cd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105cd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8105cdc:	d107      	bne.n	8105cee <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105cde:	f107 0318 	add.w	r3, r7, #24
 8105ce2:	4618      	mov	r0, r3
 8105ce4:	f000 faa4 	bl	8106230 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8105ce8:	69bb      	ldr	r3, [r7, #24]
 8105cea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105cec:	e281      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105cee:	2300      	movs	r3, #0
 8105cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105cf2:	e27e      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105cf4:	4b6d      	ldr	r3, [pc, #436]	; (8105eac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105cf6:	681b      	ldr	r3, [r3, #0]
 8105cf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105cfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105d00:	d107      	bne.n	8105d12 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105d02:	f107 030c 	add.w	r3, r7, #12
 8105d06:	4618      	mov	r0, r3
 8105d08:	f000 fbe6 	bl	81064d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8105d0c:	68fb      	ldr	r3, [r7, #12]
 8105d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105d10:	e26f      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105d12:	2300      	movs	r3, #0
 8105d14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105d16:	e26c      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8105d18:	4b64      	ldr	r3, [pc, #400]	; (8105eac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105d1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8105d20:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105d22:	4b62      	ldr	r3, [pc, #392]	; (8105eac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105d24:	681b      	ldr	r3, [r3, #0]
 8105d26:	f003 0304 	and.w	r3, r3, #4
 8105d2a:	2b04      	cmp	r3, #4
 8105d2c:	d10c      	bne.n	8105d48 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8105d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105d30:	2b00      	cmp	r3, #0
 8105d32:	d109      	bne.n	8105d48 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105d34:	4b5d      	ldr	r3, [pc, #372]	; (8105eac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105d36:	681b      	ldr	r3, [r3, #0]
 8105d38:	08db      	lsrs	r3, r3, #3
 8105d3a:	f003 0303 	and.w	r3, r3, #3
 8105d3e:	4a5c      	ldr	r2, [pc, #368]	; (8105eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8105d40:	fa22 f303 	lsr.w	r3, r2, r3
 8105d44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105d46:	e01e      	b.n	8105d86 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105d48:	4b58      	ldr	r3, [pc, #352]	; (8105eac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105d4a:	681b      	ldr	r3, [r3, #0]
 8105d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105d50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105d54:	d106      	bne.n	8105d64 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8105d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105d58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105d5c:	d102      	bne.n	8105d64 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8105d5e:	4b55      	ldr	r3, [pc, #340]	; (8105eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8105d60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105d62:	e010      	b.n	8105d86 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8105d64:	4b51      	ldr	r3, [pc, #324]	; (8105eac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105d66:	681b      	ldr	r3, [r3, #0]
 8105d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105d6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105d70:	d106      	bne.n	8105d80 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8105d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105d74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105d78:	d102      	bne.n	8105d80 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8105d7a:	4b4f      	ldr	r3, [pc, #316]	; (8105eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8105d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105d7e:	e002      	b.n	8105d86 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8105d80:	2300      	movs	r3, #0
 8105d82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8105d84:	e235      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8105d86:	e234      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8105d88:	4b4c      	ldr	r3, [pc, #304]	; (8105ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8105d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105d8c:	e231      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8105d8e:	2300      	movs	r3, #0
 8105d90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105d92:	e22e      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8105d94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105d98:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8105d9c:	430b      	orrs	r3, r1
 8105d9e:	f040 808f 	bne.w	8105ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8105da2:	4b42      	ldr	r3, [pc, #264]	; (8105eac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105da6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8105daa:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8105dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105dae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8105db2:	d06b      	beq.n	8105e8c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8105db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105db6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8105dba:	d874      	bhi.n	8105ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8105dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105dbe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8105dc2:	d056      	beq.n	8105e72 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8105dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105dc6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8105dca:	d86c      	bhi.n	8105ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8105dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105dce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8105dd2:	d03b      	beq.n	8105e4c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8105dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105dd6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8105dda:	d864      	bhi.n	8105ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8105ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105dde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105de2:	d021      	beq.n	8105e28 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8105de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105de6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105dea:	d85c      	bhi.n	8105ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8105dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105dee:	2b00      	cmp	r3, #0
 8105df0:	d004      	beq.n	8105dfc <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8105df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105df8:	d004      	beq.n	8105e04 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8105dfa:	e054      	b.n	8105ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8105dfc:	f7fe fa4c 	bl	8104298 <HAL_RCC_GetPCLK1Freq>
 8105e00:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8105e02:	e1f6      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105e04:	4b29      	ldr	r3, [pc, #164]	; (8105eac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105e06:	681b      	ldr	r3, [r3, #0]
 8105e08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105e0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8105e10:	d107      	bne.n	8105e22 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105e12:	f107 0318 	add.w	r3, r7, #24
 8105e16:	4618      	mov	r0, r3
 8105e18:	f000 fa0a 	bl	8106230 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8105e1c:	69fb      	ldr	r3, [r7, #28]
 8105e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105e20:	e1e7      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105e22:	2300      	movs	r3, #0
 8105e24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105e26:	e1e4      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105e28:	4b20      	ldr	r3, [pc, #128]	; (8105eac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105e2a:	681b      	ldr	r3, [r3, #0]
 8105e2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105e30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105e34:	d107      	bne.n	8105e46 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105e36:	f107 030c 	add.w	r3, r7, #12
 8105e3a:	4618      	mov	r0, r3
 8105e3c:	f000 fb4c 	bl	81064d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8105e40:	693b      	ldr	r3, [r7, #16]
 8105e42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105e44:	e1d5      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105e46:	2300      	movs	r3, #0
 8105e48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105e4a:	e1d2      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8105e4c:	4b17      	ldr	r3, [pc, #92]	; (8105eac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105e4e:	681b      	ldr	r3, [r3, #0]
 8105e50:	f003 0304 	and.w	r3, r3, #4
 8105e54:	2b04      	cmp	r3, #4
 8105e56:	d109      	bne.n	8105e6c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105e58:	4b14      	ldr	r3, [pc, #80]	; (8105eac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105e5a:	681b      	ldr	r3, [r3, #0]
 8105e5c:	08db      	lsrs	r3, r3, #3
 8105e5e:	f003 0303 	and.w	r3, r3, #3
 8105e62:	4a13      	ldr	r2, [pc, #76]	; (8105eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8105e64:	fa22 f303 	lsr.w	r3, r2, r3
 8105e68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105e6a:	e1c2      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105e6c:	2300      	movs	r3, #0
 8105e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105e70:	e1bf      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8105e72:	4b0e      	ldr	r3, [pc, #56]	; (8105eac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105e74:	681b      	ldr	r3, [r3, #0]
 8105e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105e7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105e7e:	d102      	bne.n	8105e86 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8105e80:	4b0c      	ldr	r3, [pc, #48]	; (8105eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8105e82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105e84:	e1b5      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105e86:	2300      	movs	r3, #0
 8105e88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105e8a:	e1b2      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8105e8c:	4b07      	ldr	r3, [pc, #28]	; (8105eac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105e8e:	681b      	ldr	r3, [r3, #0]
 8105e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105e94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105e98:	d102      	bne.n	8105ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8105e9a:	4b07      	ldr	r3, [pc, #28]	; (8105eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8105e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105e9e:	e1a8      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105ea0:	2300      	movs	r3, #0
 8105ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105ea4:	e1a5      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8105ea6:	2300      	movs	r3, #0
 8105ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105eaa:	e1a2      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8105eac:	58024400 	.word	0x58024400
 8105eb0:	03d09000 	.word	0x03d09000
 8105eb4:	003d0900 	.word	0x003d0900
 8105eb8:	007a1200 	.word	0x007a1200
 8105ebc:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8105ec0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105ec4:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8105ec8:	430b      	orrs	r3, r1
 8105eca:	d173      	bne.n	8105fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8105ecc:	4b9c      	ldr	r3, [pc, #624]	; (8106140 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105ed0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8105ed4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8105ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105ed8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105edc:	d02f      	beq.n	8105f3e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8105ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105ee0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105ee4:	d863      	bhi.n	8105fae <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8105ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105ee8:	2b00      	cmp	r3, #0
 8105eea:	d004      	beq.n	8105ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8105eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105ef2:	d012      	beq.n	8105f1a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8105ef4:	e05b      	b.n	8105fae <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105ef6:	4b92      	ldr	r3, [pc, #584]	; (8106140 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105ef8:	681b      	ldr	r3, [r3, #0]
 8105efa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105efe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8105f02:	d107      	bne.n	8105f14 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105f04:	f107 0318 	add.w	r3, r7, #24
 8105f08:	4618      	mov	r0, r3
 8105f0a:	f000 f991 	bl	8106230 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8105f0e:	69bb      	ldr	r3, [r7, #24]
 8105f10:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105f12:	e16e      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105f14:	2300      	movs	r3, #0
 8105f16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105f18:	e16b      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105f1a:	4b89      	ldr	r3, [pc, #548]	; (8106140 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105f1c:	681b      	ldr	r3, [r3, #0]
 8105f1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105f22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105f26:	d107      	bne.n	8105f38 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105f28:	f107 030c 	add.w	r3, r7, #12
 8105f2c:	4618      	mov	r0, r3
 8105f2e:	f000 fad3 	bl	81064d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8105f32:	697b      	ldr	r3, [r7, #20]
 8105f34:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105f36:	e15c      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105f38:	2300      	movs	r3, #0
 8105f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105f3c:	e159      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8105f3e:	4b80      	ldr	r3, [pc, #512]	; (8106140 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105f42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8105f46:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105f48:	4b7d      	ldr	r3, [pc, #500]	; (8106140 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105f4a:	681b      	ldr	r3, [r3, #0]
 8105f4c:	f003 0304 	and.w	r3, r3, #4
 8105f50:	2b04      	cmp	r3, #4
 8105f52:	d10c      	bne.n	8105f6e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8105f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105f56:	2b00      	cmp	r3, #0
 8105f58:	d109      	bne.n	8105f6e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105f5a:	4b79      	ldr	r3, [pc, #484]	; (8106140 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105f5c:	681b      	ldr	r3, [r3, #0]
 8105f5e:	08db      	lsrs	r3, r3, #3
 8105f60:	f003 0303 	and.w	r3, r3, #3
 8105f64:	4a77      	ldr	r2, [pc, #476]	; (8106144 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8105f66:	fa22 f303 	lsr.w	r3, r2, r3
 8105f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105f6c:	e01e      	b.n	8105fac <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105f6e:	4b74      	ldr	r3, [pc, #464]	; (8106140 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105f70:	681b      	ldr	r3, [r3, #0]
 8105f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105f76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105f7a:	d106      	bne.n	8105f8a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8105f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105f7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105f82:	d102      	bne.n	8105f8a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8105f84:	4b70      	ldr	r3, [pc, #448]	; (8106148 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8105f86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105f88:	e010      	b.n	8105fac <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8105f8a:	4b6d      	ldr	r3, [pc, #436]	; (8106140 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105f8c:	681b      	ldr	r3, [r3, #0]
 8105f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105f92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105f96:	d106      	bne.n	8105fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8105f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105f9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105f9e:	d102      	bne.n	8105fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8105fa0:	4b6a      	ldr	r3, [pc, #424]	; (810614c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8105fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105fa4:	e002      	b.n	8105fac <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8105fa6:	2300      	movs	r3, #0
 8105fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8105faa:	e122      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8105fac:	e121      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8105fae:	2300      	movs	r3, #0
 8105fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105fb2:	e11e      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8105fb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105fb8:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8105fbc:	430b      	orrs	r3, r1
 8105fbe:	d133      	bne.n	8106028 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8105fc0:	4b5f      	ldr	r3, [pc, #380]	; (8106140 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8105fc8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8105fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105fcc:	2b00      	cmp	r3, #0
 8105fce:	d004      	beq.n	8105fda <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8105fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105fd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105fd6:	d012      	beq.n	8105ffe <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8105fd8:	e023      	b.n	8106022 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105fda:	4b59      	ldr	r3, [pc, #356]	; (8106140 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105fdc:	681b      	ldr	r3, [r3, #0]
 8105fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8105fe2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105fe6:	d107      	bne.n	8105ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8105fec:	4618      	mov	r0, r3
 8105fee:	f000 fbc7 	bl	8106780 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8105ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105ff6:	e0fc      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105ff8:	2300      	movs	r3, #0
 8105ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105ffc:	e0f9      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105ffe:	4b50      	ldr	r3, [pc, #320]	; (8106140 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106000:	681b      	ldr	r3, [r3, #0]
 8106002:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106006:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810600a:	d107      	bne.n	810601c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810600c:	f107 0318 	add.w	r3, r7, #24
 8106010:	4618      	mov	r0, r3
 8106012:	f000 f90d 	bl	8106230 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8106016:	6a3b      	ldr	r3, [r7, #32]
 8106018:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810601a:	e0ea      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810601c:	2300      	movs	r3, #0
 810601e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106020:	e0e7      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8106022:	2300      	movs	r3, #0
 8106024:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106026:	e0e4      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8106028:	e9d7 2300 	ldrd	r2, r3, [r7]
 810602c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8106030:	430b      	orrs	r3, r1
 8106032:	f040 808d 	bne.w	8106150 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8106036:	4b42      	ldr	r3, [pc, #264]	; (8106140 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810603a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 810603e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8106040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106042:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8106046:	d06b      	beq.n	8106120 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8106048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810604a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810604e:	d874      	bhi.n	810613a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8106050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106056:	d056      	beq.n	8106106 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8106058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810605a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810605e:	d86c      	bhi.n	810613a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8106060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106062:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8106066:	d03b      	beq.n	81060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8106068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810606a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810606e:	d864      	bhi.n	810613a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8106070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106072:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106076:	d021      	beq.n	81060bc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8106078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810607a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810607e:	d85c      	bhi.n	810613a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8106080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106082:	2b00      	cmp	r3, #0
 8106084:	d004      	beq.n	8106090 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8106086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106088:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810608c:	d004      	beq.n	8106098 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 810608e:	e054      	b.n	810613a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8106090:	f000 f8b8 	bl	8106204 <HAL_RCCEx_GetD3PCLK1Freq>
 8106094:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8106096:	e0ac      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106098:	4b29      	ldr	r3, [pc, #164]	; (8106140 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810609a:	681b      	ldr	r3, [r3, #0]
 810609c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81060a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81060a4:	d107      	bne.n	81060b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81060a6:	f107 0318 	add.w	r3, r7, #24
 81060aa:	4618      	mov	r0, r3
 81060ac:	f000 f8c0 	bl	8106230 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81060b0:	69fb      	ldr	r3, [r7, #28]
 81060b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81060b4:	e09d      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81060b6:	2300      	movs	r3, #0
 81060b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81060ba:	e09a      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81060bc:	4b20      	ldr	r3, [pc, #128]	; (8106140 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81060be:	681b      	ldr	r3, [r3, #0]
 81060c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81060c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81060c8:	d107      	bne.n	81060da <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81060ca:	f107 030c 	add.w	r3, r7, #12
 81060ce:	4618      	mov	r0, r3
 81060d0:	f000 fa02 	bl	81064d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 81060d4:	693b      	ldr	r3, [r7, #16]
 81060d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81060d8:	e08b      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81060da:	2300      	movs	r3, #0
 81060dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81060de:	e088      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 81060e0:	4b17      	ldr	r3, [pc, #92]	; (8106140 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81060e2:	681b      	ldr	r3, [r3, #0]
 81060e4:	f003 0304 	and.w	r3, r3, #4
 81060e8:	2b04      	cmp	r3, #4
 81060ea:	d109      	bne.n	8106100 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81060ec:	4b14      	ldr	r3, [pc, #80]	; (8106140 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81060ee:	681b      	ldr	r3, [r3, #0]
 81060f0:	08db      	lsrs	r3, r3, #3
 81060f2:	f003 0303 	and.w	r3, r3, #3
 81060f6:	4a13      	ldr	r2, [pc, #76]	; (8106144 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 81060f8:	fa22 f303 	lsr.w	r3, r2, r3
 81060fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81060fe:	e078      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106100:	2300      	movs	r3, #0
 8106102:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106104:	e075      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8106106:	4b0e      	ldr	r3, [pc, #56]	; (8106140 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106108:	681b      	ldr	r3, [r3, #0]
 810610a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810610e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106112:	d102      	bne.n	810611a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8106114:	4b0c      	ldr	r3, [pc, #48]	; (8106148 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8106116:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106118:	e06b      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810611a:	2300      	movs	r3, #0
 810611c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810611e:	e068      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8106120:	4b07      	ldr	r3, [pc, #28]	; (8106140 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106122:	681b      	ldr	r3, [r3, #0]
 8106124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106128:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810612c:	d102      	bne.n	8106134 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 810612e:	4b07      	ldr	r3, [pc, #28]	; (810614c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8106130:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106132:	e05e      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106134:	2300      	movs	r3, #0
 8106136:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106138:	e05b      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 810613a:	2300      	movs	r3, #0
 810613c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810613e:	e058      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8106140:	58024400 	.word	0x58024400
 8106144:	03d09000 	.word	0x03d09000
 8106148:	003d0900 	.word	0x003d0900
 810614c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8106150:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106154:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8106158:	430b      	orrs	r3, r1
 810615a:	d148      	bne.n	81061ee <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 810615c:	4b27      	ldr	r3, [pc, #156]	; (81061fc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810615e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106160:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106164:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8106166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106168:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810616c:	d02a      	beq.n	81061c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 810616e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106170:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106174:	d838      	bhi.n	81061e8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8106176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106178:	2b00      	cmp	r3, #0
 810617a:	d004      	beq.n	8106186 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 810617c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810617e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106182:	d00d      	beq.n	81061a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8106184:	e030      	b.n	81061e8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8106186:	4b1d      	ldr	r3, [pc, #116]	; (81061fc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8106188:	681b      	ldr	r3, [r3, #0]
 810618a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810618e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106192:	d102      	bne.n	810619a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8106194:	4b1a      	ldr	r3, [pc, #104]	; (8106200 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8106196:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106198:	e02b      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810619a:	2300      	movs	r3, #0
 810619c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810619e:	e028      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81061a0:	4b16      	ldr	r3, [pc, #88]	; (81061fc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 81061a2:	681b      	ldr	r3, [r3, #0]
 81061a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81061a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81061ac:	d107      	bne.n	81061be <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81061ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81061b2:	4618      	mov	r0, r3
 81061b4:	f000 fae4 	bl	8106780 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81061b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81061ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81061bc:	e019      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81061be:	2300      	movs	r3, #0
 81061c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81061c2:	e016      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81061c4:	4b0d      	ldr	r3, [pc, #52]	; (81061fc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 81061c6:	681b      	ldr	r3, [r3, #0]
 81061c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81061cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81061d0:	d107      	bne.n	81061e2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81061d2:	f107 0318 	add.w	r3, r7, #24
 81061d6:	4618      	mov	r0, r3
 81061d8:	f000 f82a 	bl	8106230 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81061dc:	69fb      	ldr	r3, [r7, #28]
 81061de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81061e0:	e007      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81061e2:	2300      	movs	r3, #0
 81061e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81061e6:	e004      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81061e8:	2300      	movs	r3, #0
 81061ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81061ec:	e001      	b.n	81061f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 81061ee:	2300      	movs	r3, #0
 81061f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 81061f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 81061f4:	4618      	mov	r0, r3
 81061f6:	3740      	adds	r7, #64	; 0x40
 81061f8:	46bd      	mov	sp, r7
 81061fa:	bd80      	pop	{r7, pc}
 81061fc:	58024400 	.word	0x58024400
 8106200:	007a1200 	.word	0x007a1200

08106204 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8106204:	b580      	push	{r7, lr}
 8106206:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8106208:	f7fe f814 	bl	8104234 <HAL_RCC_GetHCLKFreq>
 810620c:	4602      	mov	r2, r0
 810620e:	4b06      	ldr	r3, [pc, #24]	; (8106228 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8106210:	6a1b      	ldr	r3, [r3, #32]
 8106212:	091b      	lsrs	r3, r3, #4
 8106214:	f003 0307 	and.w	r3, r3, #7
 8106218:	4904      	ldr	r1, [pc, #16]	; (810622c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810621a:	5ccb      	ldrb	r3, [r1, r3]
 810621c:	f003 031f 	and.w	r3, r3, #31
 8106220:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8106224:	4618      	mov	r0, r3
 8106226:	bd80      	pop	{r7, pc}
 8106228:	58024400 	.word	0x58024400
 810622c:	0810dbc4 	.word	0x0810dbc4

08106230 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8106230:	b480      	push	{r7}
 8106232:	b089      	sub	sp, #36	; 0x24
 8106234:	af00      	add	r7, sp, #0
 8106236:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106238:	4ba1      	ldr	r3, [pc, #644]	; (81064c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810623a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810623c:	f003 0303 	and.w	r3, r3, #3
 8106240:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8106242:	4b9f      	ldr	r3, [pc, #636]	; (81064c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106246:	0b1b      	lsrs	r3, r3, #12
 8106248:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810624c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810624e:	4b9c      	ldr	r3, [pc, #624]	; (81064c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106252:	091b      	lsrs	r3, r3, #4
 8106254:	f003 0301 	and.w	r3, r3, #1
 8106258:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 810625a:	4b99      	ldr	r3, [pc, #612]	; (81064c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810625c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810625e:	08db      	lsrs	r3, r3, #3
 8106260:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106264:	693a      	ldr	r2, [r7, #16]
 8106266:	fb02 f303 	mul.w	r3, r2, r3
 810626a:	ee07 3a90 	vmov	s15, r3
 810626e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106272:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8106276:	697b      	ldr	r3, [r7, #20]
 8106278:	2b00      	cmp	r3, #0
 810627a:	f000 8111 	beq.w	81064a0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 810627e:	69bb      	ldr	r3, [r7, #24]
 8106280:	2b02      	cmp	r3, #2
 8106282:	f000 8083 	beq.w	810638c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8106286:	69bb      	ldr	r3, [r7, #24]
 8106288:	2b02      	cmp	r3, #2
 810628a:	f200 80a1 	bhi.w	81063d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 810628e:	69bb      	ldr	r3, [r7, #24]
 8106290:	2b00      	cmp	r3, #0
 8106292:	d003      	beq.n	810629c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8106294:	69bb      	ldr	r3, [r7, #24]
 8106296:	2b01      	cmp	r3, #1
 8106298:	d056      	beq.n	8106348 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810629a:	e099      	b.n	81063d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810629c:	4b88      	ldr	r3, [pc, #544]	; (81064c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810629e:	681b      	ldr	r3, [r3, #0]
 81062a0:	f003 0320 	and.w	r3, r3, #32
 81062a4:	2b00      	cmp	r3, #0
 81062a6:	d02d      	beq.n	8106304 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81062a8:	4b85      	ldr	r3, [pc, #532]	; (81064c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81062aa:	681b      	ldr	r3, [r3, #0]
 81062ac:	08db      	lsrs	r3, r3, #3
 81062ae:	f003 0303 	and.w	r3, r3, #3
 81062b2:	4a84      	ldr	r2, [pc, #528]	; (81064c4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 81062b4:	fa22 f303 	lsr.w	r3, r2, r3
 81062b8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81062ba:	68bb      	ldr	r3, [r7, #8]
 81062bc:	ee07 3a90 	vmov	s15, r3
 81062c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81062c4:	697b      	ldr	r3, [r7, #20]
 81062c6:	ee07 3a90 	vmov	s15, r3
 81062ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81062ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81062d2:	4b7b      	ldr	r3, [pc, #492]	; (81064c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81062d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81062d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81062da:	ee07 3a90 	vmov	s15, r3
 81062de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81062e2:	ed97 6a03 	vldr	s12, [r7, #12]
 81062e6:	eddf 5a78 	vldr	s11, [pc, #480]	; 81064c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81062ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81062ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81062f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81062f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81062fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81062fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8106302:	e087      	b.n	8106414 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8106304:	697b      	ldr	r3, [r7, #20]
 8106306:	ee07 3a90 	vmov	s15, r3
 810630a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810630e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 81064cc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8106312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106316:	4b6a      	ldr	r3, [pc, #424]	; (81064c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810631a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810631e:	ee07 3a90 	vmov	s15, r3
 8106322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106326:	ed97 6a03 	vldr	s12, [r7, #12]
 810632a:	eddf 5a67 	vldr	s11, [pc, #412]	; 81064c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810632e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106336:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810633a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810633e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106342:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106346:	e065      	b.n	8106414 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8106348:	697b      	ldr	r3, [r7, #20]
 810634a:	ee07 3a90 	vmov	s15, r3
 810634e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106352:	eddf 6a5f 	vldr	s13, [pc, #380]	; 81064d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8106356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810635a:	4b59      	ldr	r3, [pc, #356]	; (81064c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810635c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810635e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106362:	ee07 3a90 	vmov	s15, r3
 8106366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810636a:	ed97 6a03 	vldr	s12, [r7, #12]
 810636e:	eddf 5a56 	vldr	s11, [pc, #344]	; 81064c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8106372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810637a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810637e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106386:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810638a:	e043      	b.n	8106414 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810638c:	697b      	ldr	r3, [r7, #20]
 810638e:	ee07 3a90 	vmov	s15, r3
 8106392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106396:	eddf 6a4f 	vldr	s13, [pc, #316]	; 81064d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810639a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810639e:	4b48      	ldr	r3, [pc, #288]	; (81064c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81063a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81063a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81063a6:	ee07 3a90 	vmov	s15, r3
 81063aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81063ae:	ed97 6a03 	vldr	s12, [r7, #12]
 81063b2:	eddf 5a45 	vldr	s11, [pc, #276]	; 81064c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81063b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81063ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81063be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81063c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81063c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81063ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81063ce:	e021      	b.n	8106414 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81063d0:	697b      	ldr	r3, [r7, #20]
 81063d2:	ee07 3a90 	vmov	s15, r3
 81063d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81063da:	eddf 6a3d 	vldr	s13, [pc, #244]	; 81064d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81063de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81063e2:	4b37      	ldr	r3, [pc, #220]	; (81064c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81063e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81063e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81063ea:	ee07 3a90 	vmov	s15, r3
 81063ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81063f2:	ed97 6a03 	vldr	s12, [r7, #12]
 81063f6:	eddf 5a34 	vldr	s11, [pc, #208]	; 81064c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81063fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81063fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106402:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810640a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810640e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106412:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8106414:	4b2a      	ldr	r3, [pc, #168]	; (81064c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106418:	0a5b      	lsrs	r3, r3, #9
 810641a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810641e:	ee07 3a90 	vmov	s15, r3
 8106422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106426:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810642a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810642e:	edd7 6a07 	vldr	s13, [r7, #28]
 8106432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106436:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810643a:	ee17 2a90 	vmov	r2, s15
 810643e:	687b      	ldr	r3, [r7, #4]
 8106440:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8106442:	4b1f      	ldr	r3, [pc, #124]	; (81064c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106446:	0c1b      	lsrs	r3, r3, #16
 8106448:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810644c:	ee07 3a90 	vmov	s15, r3
 8106450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106454:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106458:	ee37 7a87 	vadd.f32	s14, s15, s14
 810645c:	edd7 6a07 	vldr	s13, [r7, #28]
 8106460:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106464:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106468:	ee17 2a90 	vmov	r2, s15
 810646c:	687b      	ldr	r3, [r7, #4]
 810646e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8106470:	4b13      	ldr	r3, [pc, #76]	; (81064c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106474:	0e1b      	lsrs	r3, r3, #24
 8106476:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810647a:	ee07 3a90 	vmov	s15, r3
 810647e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106482:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106486:	ee37 7a87 	vadd.f32	s14, s15, s14
 810648a:	edd7 6a07 	vldr	s13, [r7, #28]
 810648e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106492:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106496:	ee17 2a90 	vmov	r2, s15
 810649a:	687b      	ldr	r3, [r7, #4]
 810649c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 810649e:	e008      	b.n	81064b2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 81064a0:	687b      	ldr	r3, [r7, #4]
 81064a2:	2200      	movs	r2, #0
 81064a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 81064a6:	687b      	ldr	r3, [r7, #4]
 81064a8:	2200      	movs	r2, #0
 81064aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 81064ac:	687b      	ldr	r3, [r7, #4]
 81064ae:	2200      	movs	r2, #0
 81064b0:	609a      	str	r2, [r3, #8]
}
 81064b2:	bf00      	nop
 81064b4:	3724      	adds	r7, #36	; 0x24
 81064b6:	46bd      	mov	sp, r7
 81064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81064bc:	4770      	bx	lr
 81064be:	bf00      	nop
 81064c0:	58024400 	.word	0x58024400
 81064c4:	03d09000 	.word	0x03d09000
 81064c8:	46000000 	.word	0x46000000
 81064cc:	4c742400 	.word	0x4c742400
 81064d0:	4a742400 	.word	0x4a742400
 81064d4:	4af42400 	.word	0x4af42400

081064d8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 81064d8:	b480      	push	{r7}
 81064da:	b089      	sub	sp, #36	; 0x24
 81064dc:	af00      	add	r7, sp, #0
 81064de:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81064e0:	4ba1      	ldr	r3, [pc, #644]	; (8106768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81064e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81064e4:	f003 0303 	and.w	r3, r3, #3
 81064e8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 81064ea:	4b9f      	ldr	r3, [pc, #636]	; (8106768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81064ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81064ee:	0d1b      	lsrs	r3, r3, #20
 81064f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81064f4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81064f6:	4b9c      	ldr	r3, [pc, #624]	; (8106768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81064f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81064fa:	0a1b      	lsrs	r3, r3, #8
 81064fc:	f003 0301 	and.w	r3, r3, #1
 8106500:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8106502:	4b99      	ldr	r3, [pc, #612]	; (8106768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106506:	08db      	lsrs	r3, r3, #3
 8106508:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810650c:	693a      	ldr	r2, [r7, #16]
 810650e:	fb02 f303 	mul.w	r3, r2, r3
 8106512:	ee07 3a90 	vmov	s15, r3
 8106516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810651a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 810651e:	697b      	ldr	r3, [r7, #20]
 8106520:	2b00      	cmp	r3, #0
 8106522:	f000 8111 	beq.w	8106748 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8106526:	69bb      	ldr	r3, [r7, #24]
 8106528:	2b02      	cmp	r3, #2
 810652a:	f000 8083 	beq.w	8106634 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 810652e:	69bb      	ldr	r3, [r7, #24]
 8106530:	2b02      	cmp	r3, #2
 8106532:	f200 80a1 	bhi.w	8106678 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8106536:	69bb      	ldr	r3, [r7, #24]
 8106538:	2b00      	cmp	r3, #0
 810653a:	d003      	beq.n	8106544 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 810653c:	69bb      	ldr	r3, [r7, #24]
 810653e:	2b01      	cmp	r3, #1
 8106540:	d056      	beq.n	81065f0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8106542:	e099      	b.n	8106678 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106544:	4b88      	ldr	r3, [pc, #544]	; (8106768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106546:	681b      	ldr	r3, [r3, #0]
 8106548:	f003 0320 	and.w	r3, r3, #32
 810654c:	2b00      	cmp	r3, #0
 810654e:	d02d      	beq.n	81065ac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106550:	4b85      	ldr	r3, [pc, #532]	; (8106768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106552:	681b      	ldr	r3, [r3, #0]
 8106554:	08db      	lsrs	r3, r3, #3
 8106556:	f003 0303 	and.w	r3, r3, #3
 810655a:	4a84      	ldr	r2, [pc, #528]	; (810676c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 810655c:	fa22 f303 	lsr.w	r3, r2, r3
 8106560:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8106562:	68bb      	ldr	r3, [r7, #8]
 8106564:	ee07 3a90 	vmov	s15, r3
 8106568:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810656c:	697b      	ldr	r3, [r7, #20]
 810656e:	ee07 3a90 	vmov	s15, r3
 8106572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810657a:	4b7b      	ldr	r3, [pc, #492]	; (8106768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810657c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810657e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106582:	ee07 3a90 	vmov	s15, r3
 8106586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810658a:	ed97 6a03 	vldr	s12, [r7, #12]
 810658e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8106770 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810659a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810659e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81065a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81065a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81065aa:	e087      	b.n	81066bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81065ac:	697b      	ldr	r3, [r7, #20]
 81065ae:	ee07 3a90 	vmov	s15, r3
 81065b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81065b6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8106774 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 81065ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81065be:	4b6a      	ldr	r3, [pc, #424]	; (8106768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81065c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81065c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81065c6:	ee07 3a90 	vmov	s15, r3
 81065ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81065ce:	ed97 6a03 	vldr	s12, [r7, #12]
 81065d2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8106770 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81065d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81065da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81065de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81065e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81065e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81065ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81065ee:	e065      	b.n	81066bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81065f0:	697b      	ldr	r3, [r7, #20]
 81065f2:	ee07 3a90 	vmov	s15, r3
 81065f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81065fa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8106778 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81065fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106602:	4b59      	ldr	r3, [pc, #356]	; (8106768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810660a:	ee07 3a90 	vmov	s15, r3
 810660e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106612:	ed97 6a03 	vldr	s12, [r7, #12]
 8106616:	eddf 5a56 	vldr	s11, [pc, #344]	; 8106770 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810661a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810661e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106622:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810662a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810662e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106632:	e043      	b.n	81066bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8106634:	697b      	ldr	r3, [r7, #20]
 8106636:	ee07 3a90 	vmov	s15, r3
 810663a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810663e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 810677c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8106642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106646:	4b48      	ldr	r3, [pc, #288]	; (8106768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810664a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810664e:	ee07 3a90 	vmov	s15, r3
 8106652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106656:	ed97 6a03 	vldr	s12, [r7, #12]
 810665a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8106770 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810665e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106666:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810666a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810666e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106672:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106676:	e021      	b.n	81066bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8106678:	697b      	ldr	r3, [r7, #20]
 810667a:	ee07 3a90 	vmov	s15, r3
 810667e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106682:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8106778 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8106686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810668a:	4b37      	ldr	r3, [pc, #220]	; (8106768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810668c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810668e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106692:	ee07 3a90 	vmov	s15, r3
 8106696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810669a:	ed97 6a03 	vldr	s12, [r7, #12]
 810669e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8106770 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81066a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81066a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81066aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81066ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81066b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81066b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81066ba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 81066bc:	4b2a      	ldr	r3, [pc, #168]	; (8106768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81066be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81066c0:	0a5b      	lsrs	r3, r3, #9
 81066c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81066c6:	ee07 3a90 	vmov	s15, r3
 81066ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81066ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81066d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 81066d6:	edd7 6a07 	vldr	s13, [r7, #28]
 81066da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81066de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81066e2:	ee17 2a90 	vmov	r2, s15
 81066e6:	687b      	ldr	r3, [r7, #4]
 81066e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 81066ea:	4b1f      	ldr	r3, [pc, #124]	; (8106768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81066ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81066ee:	0c1b      	lsrs	r3, r3, #16
 81066f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81066f4:	ee07 3a90 	vmov	s15, r3
 81066f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81066fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106700:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106704:	edd7 6a07 	vldr	s13, [r7, #28]
 8106708:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810670c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106710:	ee17 2a90 	vmov	r2, s15
 8106714:	687b      	ldr	r3, [r7, #4]
 8106716:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8106718:	4b13      	ldr	r3, [pc, #76]	; (8106768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810671a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810671c:	0e1b      	lsrs	r3, r3, #24
 810671e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106722:	ee07 3a90 	vmov	s15, r3
 8106726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810672a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810672e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106732:	edd7 6a07 	vldr	s13, [r7, #28]
 8106736:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810673a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810673e:	ee17 2a90 	vmov	r2, s15
 8106742:	687b      	ldr	r3, [r7, #4]
 8106744:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8106746:	e008      	b.n	810675a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8106748:	687b      	ldr	r3, [r7, #4]
 810674a:	2200      	movs	r2, #0
 810674c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 810674e:	687b      	ldr	r3, [r7, #4]
 8106750:	2200      	movs	r2, #0
 8106752:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8106754:	687b      	ldr	r3, [r7, #4]
 8106756:	2200      	movs	r2, #0
 8106758:	609a      	str	r2, [r3, #8]
}
 810675a:	bf00      	nop
 810675c:	3724      	adds	r7, #36	; 0x24
 810675e:	46bd      	mov	sp, r7
 8106760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106764:	4770      	bx	lr
 8106766:	bf00      	nop
 8106768:	58024400 	.word	0x58024400
 810676c:	03d09000 	.word	0x03d09000
 8106770:	46000000 	.word	0x46000000
 8106774:	4c742400 	.word	0x4c742400
 8106778:	4a742400 	.word	0x4a742400
 810677c:	4af42400 	.word	0x4af42400

08106780 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8106780:	b480      	push	{r7}
 8106782:	b089      	sub	sp, #36	; 0x24
 8106784:	af00      	add	r7, sp, #0
 8106786:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106788:	4ba0      	ldr	r3, [pc, #640]	; (8106a0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810678a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810678c:	f003 0303 	and.w	r3, r3, #3
 8106790:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8106792:	4b9e      	ldr	r3, [pc, #632]	; (8106a0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106796:	091b      	lsrs	r3, r3, #4
 8106798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810679c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 810679e:	4b9b      	ldr	r3, [pc, #620]	; (8106a0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81067a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81067a2:	f003 0301 	and.w	r3, r3, #1
 81067a6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81067a8:	4b98      	ldr	r3, [pc, #608]	; (8106a0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81067aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81067ac:	08db      	lsrs	r3, r3, #3
 81067ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81067b2:	693a      	ldr	r2, [r7, #16]
 81067b4:	fb02 f303 	mul.w	r3, r2, r3
 81067b8:	ee07 3a90 	vmov	s15, r3
 81067bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81067c0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 81067c4:	697b      	ldr	r3, [r7, #20]
 81067c6:	2b00      	cmp	r3, #0
 81067c8:	f000 8111 	beq.w	81069ee <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 81067cc:	69bb      	ldr	r3, [r7, #24]
 81067ce:	2b02      	cmp	r3, #2
 81067d0:	f000 8083 	beq.w	81068da <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 81067d4:	69bb      	ldr	r3, [r7, #24]
 81067d6:	2b02      	cmp	r3, #2
 81067d8:	f200 80a1 	bhi.w	810691e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 81067dc:	69bb      	ldr	r3, [r7, #24]
 81067de:	2b00      	cmp	r3, #0
 81067e0:	d003      	beq.n	81067ea <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 81067e2:	69bb      	ldr	r3, [r7, #24]
 81067e4:	2b01      	cmp	r3, #1
 81067e6:	d056      	beq.n	8106896 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 81067e8:	e099      	b.n	810691e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81067ea:	4b88      	ldr	r3, [pc, #544]	; (8106a0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81067ec:	681b      	ldr	r3, [r3, #0]
 81067ee:	f003 0320 	and.w	r3, r3, #32
 81067f2:	2b00      	cmp	r3, #0
 81067f4:	d02d      	beq.n	8106852 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81067f6:	4b85      	ldr	r3, [pc, #532]	; (8106a0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81067f8:	681b      	ldr	r3, [r3, #0]
 81067fa:	08db      	lsrs	r3, r3, #3
 81067fc:	f003 0303 	and.w	r3, r3, #3
 8106800:	4a83      	ldr	r2, [pc, #524]	; (8106a10 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8106802:	fa22 f303 	lsr.w	r3, r2, r3
 8106806:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106808:	68bb      	ldr	r3, [r7, #8]
 810680a:	ee07 3a90 	vmov	s15, r3
 810680e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106812:	697b      	ldr	r3, [r7, #20]
 8106814:	ee07 3a90 	vmov	s15, r3
 8106818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810681c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106820:	4b7a      	ldr	r3, [pc, #488]	; (8106a0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106828:	ee07 3a90 	vmov	s15, r3
 810682c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106830:	ed97 6a03 	vldr	s12, [r7, #12]
 8106834:	eddf 5a77 	vldr	s11, [pc, #476]	; 8106a14 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8106838:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810683c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106840:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106844:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106848:	ee67 7a27 	vmul.f32	s15, s14, s15
 810684c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8106850:	e087      	b.n	8106962 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106852:	697b      	ldr	r3, [r7, #20]
 8106854:	ee07 3a90 	vmov	s15, r3
 8106858:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810685c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8106a18 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8106860:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106864:	4b69      	ldr	r3, [pc, #420]	; (8106a0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810686c:	ee07 3a90 	vmov	s15, r3
 8106870:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106874:	ed97 6a03 	vldr	s12, [r7, #12]
 8106878:	eddf 5a66 	vldr	s11, [pc, #408]	; 8106a14 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810687c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106880:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106884:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106888:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810688c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106890:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106894:	e065      	b.n	8106962 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106896:	697b      	ldr	r3, [r7, #20]
 8106898:	ee07 3a90 	vmov	s15, r3
 810689c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81068a0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8106a1c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 81068a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81068a8:	4b58      	ldr	r3, [pc, #352]	; (8106a0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81068aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81068ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81068b0:	ee07 3a90 	vmov	s15, r3
 81068b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81068b8:	ed97 6a03 	vldr	s12, [r7, #12]
 81068bc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8106a14 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81068c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81068c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81068c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81068cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81068d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 81068d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81068d8:	e043      	b.n	8106962 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81068da:	697b      	ldr	r3, [r7, #20]
 81068dc:	ee07 3a90 	vmov	s15, r3
 81068e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81068e4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8106a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 81068e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81068ec:	4b47      	ldr	r3, [pc, #284]	; (8106a0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81068ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81068f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81068f4:	ee07 3a90 	vmov	s15, r3
 81068f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81068fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8106900:	eddf 5a44 	vldr	s11, [pc, #272]	; 8106a14 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8106904:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106908:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810690c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106910:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106914:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106918:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810691c:	e021      	b.n	8106962 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810691e:	697b      	ldr	r3, [r7, #20]
 8106920:	ee07 3a90 	vmov	s15, r3
 8106924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106928:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8106a18 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 810692c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106930:	4b36      	ldr	r3, [pc, #216]	; (8106a0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106938:	ee07 3a90 	vmov	s15, r3
 810693c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106940:	ed97 6a03 	vldr	s12, [r7, #12]
 8106944:	eddf 5a33 	vldr	s11, [pc, #204]	; 8106a14 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8106948:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810694c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106950:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106954:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106958:	ee67 7a27 	vmul.f32	s15, s14, s15
 810695c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106960:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8106962:	4b2a      	ldr	r3, [pc, #168]	; (8106a0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106966:	0a5b      	lsrs	r3, r3, #9
 8106968:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810696c:	ee07 3a90 	vmov	s15, r3
 8106970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106974:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106978:	ee37 7a87 	vadd.f32	s14, s15, s14
 810697c:	edd7 6a07 	vldr	s13, [r7, #28]
 8106980:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106984:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106988:	ee17 2a90 	vmov	r2, s15
 810698c:	687b      	ldr	r3, [r7, #4]
 810698e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8106990:	4b1e      	ldr	r3, [pc, #120]	; (8106a0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106994:	0c1b      	lsrs	r3, r3, #16
 8106996:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810699a:	ee07 3a90 	vmov	s15, r3
 810699e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81069a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81069a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 81069aa:	edd7 6a07 	vldr	s13, [r7, #28]
 81069ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81069b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81069b6:	ee17 2a90 	vmov	r2, s15
 81069ba:	687b      	ldr	r3, [r7, #4]
 81069bc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 81069be:	4b13      	ldr	r3, [pc, #76]	; (8106a0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81069c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81069c2:	0e1b      	lsrs	r3, r3, #24
 81069c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81069c8:	ee07 3a90 	vmov	s15, r3
 81069cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81069d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81069d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 81069d8:	edd7 6a07 	vldr	s13, [r7, #28]
 81069dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81069e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81069e4:	ee17 2a90 	vmov	r2, s15
 81069e8:	687b      	ldr	r3, [r7, #4]
 81069ea:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 81069ec:	e008      	b.n	8106a00 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 81069ee:	687b      	ldr	r3, [r7, #4]
 81069f0:	2200      	movs	r2, #0
 81069f2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 81069f4:	687b      	ldr	r3, [r7, #4]
 81069f6:	2200      	movs	r2, #0
 81069f8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 81069fa:	687b      	ldr	r3, [r7, #4]
 81069fc:	2200      	movs	r2, #0
 81069fe:	609a      	str	r2, [r3, #8]
}
 8106a00:	bf00      	nop
 8106a02:	3724      	adds	r7, #36	; 0x24
 8106a04:	46bd      	mov	sp, r7
 8106a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106a0a:	4770      	bx	lr
 8106a0c:	58024400 	.word	0x58024400
 8106a10:	03d09000 	.word	0x03d09000
 8106a14:	46000000 	.word	0x46000000
 8106a18:	4c742400 	.word	0x4c742400
 8106a1c:	4a742400 	.word	0x4a742400
 8106a20:	4af42400 	.word	0x4af42400

08106a24 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8106a24:	b580      	push	{r7, lr}
 8106a26:	b084      	sub	sp, #16
 8106a28:	af00      	add	r7, sp, #0
 8106a2a:	6078      	str	r0, [r7, #4]
 8106a2c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8106a2e:	2300      	movs	r3, #0
 8106a30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8106a32:	4b54      	ldr	r3, [pc, #336]	; (8106b84 <RCCEx_PLL2_Config+0x160>)
 8106a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106a36:	f003 0303 	and.w	r3, r3, #3
 8106a3a:	2b03      	cmp	r3, #3
 8106a3c:	d101      	bne.n	8106a42 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8106a3e:	2301      	movs	r3, #1
 8106a40:	e09b      	b.n	8106b7a <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8106a42:	4b50      	ldr	r3, [pc, #320]	; (8106b84 <RCCEx_PLL2_Config+0x160>)
 8106a44:	681b      	ldr	r3, [r3, #0]
 8106a46:	4a4f      	ldr	r2, [pc, #316]	; (8106b84 <RCCEx_PLL2_Config+0x160>)
 8106a48:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8106a4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106a4e:	f7fb fb8f 	bl	8102170 <HAL_GetTick>
 8106a52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8106a54:	e008      	b.n	8106a68 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8106a56:	f7fb fb8b 	bl	8102170 <HAL_GetTick>
 8106a5a:	4602      	mov	r2, r0
 8106a5c:	68bb      	ldr	r3, [r7, #8]
 8106a5e:	1ad3      	subs	r3, r2, r3
 8106a60:	2b02      	cmp	r3, #2
 8106a62:	d901      	bls.n	8106a68 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8106a64:	2303      	movs	r3, #3
 8106a66:	e088      	b.n	8106b7a <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8106a68:	4b46      	ldr	r3, [pc, #280]	; (8106b84 <RCCEx_PLL2_Config+0x160>)
 8106a6a:	681b      	ldr	r3, [r3, #0]
 8106a6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106a70:	2b00      	cmp	r3, #0
 8106a72:	d1f0      	bne.n	8106a56 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8106a74:	4b43      	ldr	r3, [pc, #268]	; (8106b84 <RCCEx_PLL2_Config+0x160>)
 8106a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106a78:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8106a7c:	687b      	ldr	r3, [r7, #4]
 8106a7e:	681b      	ldr	r3, [r3, #0]
 8106a80:	031b      	lsls	r3, r3, #12
 8106a82:	4940      	ldr	r1, [pc, #256]	; (8106b84 <RCCEx_PLL2_Config+0x160>)
 8106a84:	4313      	orrs	r3, r2
 8106a86:	628b      	str	r3, [r1, #40]	; 0x28
 8106a88:	687b      	ldr	r3, [r7, #4]
 8106a8a:	685b      	ldr	r3, [r3, #4]
 8106a8c:	3b01      	subs	r3, #1
 8106a8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8106a92:	687b      	ldr	r3, [r7, #4]
 8106a94:	689b      	ldr	r3, [r3, #8]
 8106a96:	3b01      	subs	r3, #1
 8106a98:	025b      	lsls	r3, r3, #9
 8106a9a:	b29b      	uxth	r3, r3
 8106a9c:	431a      	orrs	r2, r3
 8106a9e:	687b      	ldr	r3, [r7, #4]
 8106aa0:	68db      	ldr	r3, [r3, #12]
 8106aa2:	3b01      	subs	r3, #1
 8106aa4:	041b      	lsls	r3, r3, #16
 8106aa6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8106aaa:	431a      	orrs	r2, r3
 8106aac:	687b      	ldr	r3, [r7, #4]
 8106aae:	691b      	ldr	r3, [r3, #16]
 8106ab0:	3b01      	subs	r3, #1
 8106ab2:	061b      	lsls	r3, r3, #24
 8106ab4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8106ab8:	4932      	ldr	r1, [pc, #200]	; (8106b84 <RCCEx_PLL2_Config+0x160>)
 8106aba:	4313      	orrs	r3, r2
 8106abc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8106abe:	4b31      	ldr	r3, [pc, #196]	; (8106b84 <RCCEx_PLL2_Config+0x160>)
 8106ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106ac2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8106ac6:	687b      	ldr	r3, [r7, #4]
 8106ac8:	695b      	ldr	r3, [r3, #20]
 8106aca:	492e      	ldr	r1, [pc, #184]	; (8106b84 <RCCEx_PLL2_Config+0x160>)
 8106acc:	4313      	orrs	r3, r2
 8106ace:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8106ad0:	4b2c      	ldr	r3, [pc, #176]	; (8106b84 <RCCEx_PLL2_Config+0x160>)
 8106ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106ad4:	f023 0220 	bic.w	r2, r3, #32
 8106ad8:	687b      	ldr	r3, [r7, #4]
 8106ada:	699b      	ldr	r3, [r3, #24]
 8106adc:	4929      	ldr	r1, [pc, #164]	; (8106b84 <RCCEx_PLL2_Config+0x160>)
 8106ade:	4313      	orrs	r3, r2
 8106ae0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8106ae2:	4b28      	ldr	r3, [pc, #160]	; (8106b84 <RCCEx_PLL2_Config+0x160>)
 8106ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106ae6:	4a27      	ldr	r2, [pc, #156]	; (8106b84 <RCCEx_PLL2_Config+0x160>)
 8106ae8:	f023 0310 	bic.w	r3, r3, #16
 8106aec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8106aee:	4b25      	ldr	r3, [pc, #148]	; (8106b84 <RCCEx_PLL2_Config+0x160>)
 8106af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106af2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8106af6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8106afa:	687a      	ldr	r2, [r7, #4]
 8106afc:	69d2      	ldr	r2, [r2, #28]
 8106afe:	00d2      	lsls	r2, r2, #3
 8106b00:	4920      	ldr	r1, [pc, #128]	; (8106b84 <RCCEx_PLL2_Config+0x160>)
 8106b02:	4313      	orrs	r3, r2
 8106b04:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8106b06:	4b1f      	ldr	r3, [pc, #124]	; (8106b84 <RCCEx_PLL2_Config+0x160>)
 8106b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106b0a:	4a1e      	ldr	r2, [pc, #120]	; (8106b84 <RCCEx_PLL2_Config+0x160>)
 8106b0c:	f043 0310 	orr.w	r3, r3, #16
 8106b10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8106b12:	683b      	ldr	r3, [r7, #0]
 8106b14:	2b00      	cmp	r3, #0
 8106b16:	d106      	bne.n	8106b26 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8106b18:	4b1a      	ldr	r3, [pc, #104]	; (8106b84 <RCCEx_PLL2_Config+0x160>)
 8106b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106b1c:	4a19      	ldr	r2, [pc, #100]	; (8106b84 <RCCEx_PLL2_Config+0x160>)
 8106b1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8106b22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8106b24:	e00f      	b.n	8106b46 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8106b26:	683b      	ldr	r3, [r7, #0]
 8106b28:	2b01      	cmp	r3, #1
 8106b2a:	d106      	bne.n	8106b3a <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8106b2c:	4b15      	ldr	r3, [pc, #84]	; (8106b84 <RCCEx_PLL2_Config+0x160>)
 8106b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106b30:	4a14      	ldr	r2, [pc, #80]	; (8106b84 <RCCEx_PLL2_Config+0x160>)
 8106b32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8106b36:	62d3      	str	r3, [r2, #44]	; 0x2c
 8106b38:	e005      	b.n	8106b46 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8106b3a:	4b12      	ldr	r3, [pc, #72]	; (8106b84 <RCCEx_PLL2_Config+0x160>)
 8106b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106b3e:	4a11      	ldr	r2, [pc, #68]	; (8106b84 <RCCEx_PLL2_Config+0x160>)
 8106b40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8106b44:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8106b46:	4b0f      	ldr	r3, [pc, #60]	; (8106b84 <RCCEx_PLL2_Config+0x160>)
 8106b48:	681b      	ldr	r3, [r3, #0]
 8106b4a:	4a0e      	ldr	r2, [pc, #56]	; (8106b84 <RCCEx_PLL2_Config+0x160>)
 8106b4c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8106b50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106b52:	f7fb fb0d 	bl	8102170 <HAL_GetTick>
 8106b56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8106b58:	e008      	b.n	8106b6c <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8106b5a:	f7fb fb09 	bl	8102170 <HAL_GetTick>
 8106b5e:	4602      	mov	r2, r0
 8106b60:	68bb      	ldr	r3, [r7, #8]
 8106b62:	1ad3      	subs	r3, r2, r3
 8106b64:	2b02      	cmp	r3, #2
 8106b66:	d901      	bls.n	8106b6c <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8106b68:	2303      	movs	r3, #3
 8106b6a:	e006      	b.n	8106b7a <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8106b6c:	4b05      	ldr	r3, [pc, #20]	; (8106b84 <RCCEx_PLL2_Config+0x160>)
 8106b6e:	681b      	ldr	r3, [r3, #0]
 8106b70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106b74:	2b00      	cmp	r3, #0
 8106b76:	d0f0      	beq.n	8106b5a <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8106b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8106b7a:	4618      	mov	r0, r3
 8106b7c:	3710      	adds	r7, #16
 8106b7e:	46bd      	mov	sp, r7
 8106b80:	bd80      	pop	{r7, pc}
 8106b82:	bf00      	nop
 8106b84:	58024400 	.word	0x58024400

08106b88 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8106b88:	b580      	push	{r7, lr}
 8106b8a:	b084      	sub	sp, #16
 8106b8c:	af00      	add	r7, sp, #0
 8106b8e:	6078      	str	r0, [r7, #4]
 8106b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8106b92:	2300      	movs	r3, #0
 8106b94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8106b96:	4b54      	ldr	r3, [pc, #336]	; (8106ce8 <RCCEx_PLL3_Config+0x160>)
 8106b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106b9a:	f003 0303 	and.w	r3, r3, #3
 8106b9e:	2b03      	cmp	r3, #3
 8106ba0:	d101      	bne.n	8106ba6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8106ba2:	2301      	movs	r3, #1
 8106ba4:	e09b      	b.n	8106cde <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8106ba6:	4b50      	ldr	r3, [pc, #320]	; (8106ce8 <RCCEx_PLL3_Config+0x160>)
 8106ba8:	681b      	ldr	r3, [r3, #0]
 8106baa:	4a4f      	ldr	r2, [pc, #316]	; (8106ce8 <RCCEx_PLL3_Config+0x160>)
 8106bac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8106bb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106bb2:	f7fb fadd 	bl	8102170 <HAL_GetTick>
 8106bb6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8106bb8:	e008      	b.n	8106bcc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8106bba:	f7fb fad9 	bl	8102170 <HAL_GetTick>
 8106bbe:	4602      	mov	r2, r0
 8106bc0:	68bb      	ldr	r3, [r7, #8]
 8106bc2:	1ad3      	subs	r3, r2, r3
 8106bc4:	2b02      	cmp	r3, #2
 8106bc6:	d901      	bls.n	8106bcc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8106bc8:	2303      	movs	r3, #3
 8106bca:	e088      	b.n	8106cde <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8106bcc:	4b46      	ldr	r3, [pc, #280]	; (8106ce8 <RCCEx_PLL3_Config+0x160>)
 8106bce:	681b      	ldr	r3, [r3, #0]
 8106bd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106bd4:	2b00      	cmp	r3, #0
 8106bd6:	d1f0      	bne.n	8106bba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8106bd8:	4b43      	ldr	r3, [pc, #268]	; (8106ce8 <RCCEx_PLL3_Config+0x160>)
 8106bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106bdc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8106be0:	687b      	ldr	r3, [r7, #4]
 8106be2:	681b      	ldr	r3, [r3, #0]
 8106be4:	051b      	lsls	r3, r3, #20
 8106be6:	4940      	ldr	r1, [pc, #256]	; (8106ce8 <RCCEx_PLL3_Config+0x160>)
 8106be8:	4313      	orrs	r3, r2
 8106bea:	628b      	str	r3, [r1, #40]	; 0x28
 8106bec:	687b      	ldr	r3, [r7, #4]
 8106bee:	685b      	ldr	r3, [r3, #4]
 8106bf0:	3b01      	subs	r3, #1
 8106bf2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8106bf6:	687b      	ldr	r3, [r7, #4]
 8106bf8:	689b      	ldr	r3, [r3, #8]
 8106bfa:	3b01      	subs	r3, #1
 8106bfc:	025b      	lsls	r3, r3, #9
 8106bfe:	b29b      	uxth	r3, r3
 8106c00:	431a      	orrs	r2, r3
 8106c02:	687b      	ldr	r3, [r7, #4]
 8106c04:	68db      	ldr	r3, [r3, #12]
 8106c06:	3b01      	subs	r3, #1
 8106c08:	041b      	lsls	r3, r3, #16
 8106c0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8106c0e:	431a      	orrs	r2, r3
 8106c10:	687b      	ldr	r3, [r7, #4]
 8106c12:	691b      	ldr	r3, [r3, #16]
 8106c14:	3b01      	subs	r3, #1
 8106c16:	061b      	lsls	r3, r3, #24
 8106c18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8106c1c:	4932      	ldr	r1, [pc, #200]	; (8106ce8 <RCCEx_PLL3_Config+0x160>)
 8106c1e:	4313      	orrs	r3, r2
 8106c20:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8106c22:	4b31      	ldr	r3, [pc, #196]	; (8106ce8 <RCCEx_PLL3_Config+0x160>)
 8106c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106c26:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8106c2a:	687b      	ldr	r3, [r7, #4]
 8106c2c:	695b      	ldr	r3, [r3, #20]
 8106c2e:	492e      	ldr	r1, [pc, #184]	; (8106ce8 <RCCEx_PLL3_Config+0x160>)
 8106c30:	4313      	orrs	r3, r2
 8106c32:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8106c34:	4b2c      	ldr	r3, [pc, #176]	; (8106ce8 <RCCEx_PLL3_Config+0x160>)
 8106c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106c38:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8106c3c:	687b      	ldr	r3, [r7, #4]
 8106c3e:	699b      	ldr	r3, [r3, #24]
 8106c40:	4929      	ldr	r1, [pc, #164]	; (8106ce8 <RCCEx_PLL3_Config+0x160>)
 8106c42:	4313      	orrs	r3, r2
 8106c44:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8106c46:	4b28      	ldr	r3, [pc, #160]	; (8106ce8 <RCCEx_PLL3_Config+0x160>)
 8106c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106c4a:	4a27      	ldr	r2, [pc, #156]	; (8106ce8 <RCCEx_PLL3_Config+0x160>)
 8106c4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8106c50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8106c52:	4b25      	ldr	r3, [pc, #148]	; (8106ce8 <RCCEx_PLL3_Config+0x160>)
 8106c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106c56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8106c5a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8106c5e:	687a      	ldr	r2, [r7, #4]
 8106c60:	69d2      	ldr	r2, [r2, #28]
 8106c62:	00d2      	lsls	r2, r2, #3
 8106c64:	4920      	ldr	r1, [pc, #128]	; (8106ce8 <RCCEx_PLL3_Config+0x160>)
 8106c66:	4313      	orrs	r3, r2
 8106c68:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8106c6a:	4b1f      	ldr	r3, [pc, #124]	; (8106ce8 <RCCEx_PLL3_Config+0x160>)
 8106c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106c6e:	4a1e      	ldr	r2, [pc, #120]	; (8106ce8 <RCCEx_PLL3_Config+0x160>)
 8106c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8106c74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8106c76:	683b      	ldr	r3, [r7, #0]
 8106c78:	2b00      	cmp	r3, #0
 8106c7a:	d106      	bne.n	8106c8a <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8106c7c:	4b1a      	ldr	r3, [pc, #104]	; (8106ce8 <RCCEx_PLL3_Config+0x160>)
 8106c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106c80:	4a19      	ldr	r2, [pc, #100]	; (8106ce8 <RCCEx_PLL3_Config+0x160>)
 8106c82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8106c86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8106c88:	e00f      	b.n	8106caa <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8106c8a:	683b      	ldr	r3, [r7, #0]
 8106c8c:	2b01      	cmp	r3, #1
 8106c8e:	d106      	bne.n	8106c9e <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8106c90:	4b15      	ldr	r3, [pc, #84]	; (8106ce8 <RCCEx_PLL3_Config+0x160>)
 8106c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106c94:	4a14      	ldr	r2, [pc, #80]	; (8106ce8 <RCCEx_PLL3_Config+0x160>)
 8106c96:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8106c9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8106c9c:	e005      	b.n	8106caa <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8106c9e:	4b12      	ldr	r3, [pc, #72]	; (8106ce8 <RCCEx_PLL3_Config+0x160>)
 8106ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106ca2:	4a11      	ldr	r2, [pc, #68]	; (8106ce8 <RCCEx_PLL3_Config+0x160>)
 8106ca4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8106ca8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8106caa:	4b0f      	ldr	r3, [pc, #60]	; (8106ce8 <RCCEx_PLL3_Config+0x160>)
 8106cac:	681b      	ldr	r3, [r3, #0]
 8106cae:	4a0e      	ldr	r2, [pc, #56]	; (8106ce8 <RCCEx_PLL3_Config+0x160>)
 8106cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8106cb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106cb6:	f7fb fa5b 	bl	8102170 <HAL_GetTick>
 8106cba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8106cbc:	e008      	b.n	8106cd0 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8106cbe:	f7fb fa57 	bl	8102170 <HAL_GetTick>
 8106cc2:	4602      	mov	r2, r0
 8106cc4:	68bb      	ldr	r3, [r7, #8]
 8106cc6:	1ad3      	subs	r3, r2, r3
 8106cc8:	2b02      	cmp	r3, #2
 8106cca:	d901      	bls.n	8106cd0 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8106ccc:	2303      	movs	r3, #3
 8106cce:	e006      	b.n	8106cde <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8106cd0:	4b05      	ldr	r3, [pc, #20]	; (8106ce8 <RCCEx_PLL3_Config+0x160>)
 8106cd2:	681b      	ldr	r3, [r3, #0]
 8106cd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106cd8:	2b00      	cmp	r3, #0
 8106cda:	d0f0      	beq.n	8106cbe <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8106cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8106cde:	4618      	mov	r0, r3
 8106ce0:	3710      	adds	r7, #16
 8106ce2:	46bd      	mov	sp, r7
 8106ce4:	bd80      	pop	{r7, pc}
 8106ce6:	bf00      	nop
 8106ce8:	58024400 	.word	0x58024400

08106cec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8106cec:	b580      	push	{r7, lr}
 8106cee:	b082      	sub	sp, #8
 8106cf0:	af00      	add	r7, sp, #0
 8106cf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8106cf4:	687b      	ldr	r3, [r7, #4]
 8106cf6:	2b00      	cmp	r3, #0
 8106cf8:	d101      	bne.n	8106cfe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8106cfa:	2301      	movs	r3, #1
 8106cfc:	e049      	b.n	8106d92 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8106cfe:	687b      	ldr	r3, [r7, #4]
 8106d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8106d04:	b2db      	uxtb	r3, r3
 8106d06:	2b00      	cmp	r3, #0
 8106d08:	d106      	bne.n	8106d18 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8106d0a:	687b      	ldr	r3, [r7, #4]
 8106d0c:	2200      	movs	r2, #0
 8106d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8106d12:	6878      	ldr	r0, [r7, #4]
 8106d14:	f7fa ff52 	bl	8101bbc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106d18:	687b      	ldr	r3, [r7, #4]
 8106d1a:	2202      	movs	r2, #2
 8106d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8106d20:	687b      	ldr	r3, [r7, #4]
 8106d22:	681a      	ldr	r2, [r3, #0]
 8106d24:	687b      	ldr	r3, [r7, #4]
 8106d26:	3304      	adds	r3, #4
 8106d28:	4619      	mov	r1, r3
 8106d2a:	4610      	mov	r0, r2
 8106d2c:	f000 fcd4 	bl	81076d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8106d30:	687b      	ldr	r3, [r7, #4]
 8106d32:	2201      	movs	r2, #1
 8106d34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106d38:	687b      	ldr	r3, [r7, #4]
 8106d3a:	2201      	movs	r2, #1
 8106d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8106d40:	687b      	ldr	r3, [r7, #4]
 8106d42:	2201      	movs	r2, #1
 8106d44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8106d48:	687b      	ldr	r3, [r7, #4]
 8106d4a:	2201      	movs	r2, #1
 8106d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8106d50:	687b      	ldr	r3, [r7, #4]
 8106d52:	2201      	movs	r2, #1
 8106d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8106d58:	687b      	ldr	r3, [r7, #4]
 8106d5a:	2201      	movs	r2, #1
 8106d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8106d60:	687b      	ldr	r3, [r7, #4]
 8106d62:	2201      	movs	r2, #1
 8106d64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106d68:	687b      	ldr	r3, [r7, #4]
 8106d6a:	2201      	movs	r2, #1
 8106d6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8106d70:	687b      	ldr	r3, [r7, #4]
 8106d72:	2201      	movs	r2, #1
 8106d74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8106d78:	687b      	ldr	r3, [r7, #4]
 8106d7a:	2201      	movs	r2, #1
 8106d7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8106d80:	687b      	ldr	r3, [r7, #4]
 8106d82:	2201      	movs	r2, #1
 8106d84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8106d88:	687b      	ldr	r3, [r7, #4]
 8106d8a:	2201      	movs	r2, #1
 8106d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8106d90:	2300      	movs	r3, #0
}
 8106d92:	4618      	mov	r0, r3
 8106d94:	3708      	adds	r7, #8
 8106d96:	46bd      	mov	sp, r7
 8106d98:	bd80      	pop	{r7, pc}
	...

08106d9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8106d9c:	b580      	push	{r7, lr}
 8106d9e:	b084      	sub	sp, #16
 8106da0:	af00      	add	r7, sp, #0
 8106da2:	6078      	str	r0, [r7, #4]
 8106da4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8106da6:	683b      	ldr	r3, [r7, #0]
 8106da8:	2b00      	cmp	r3, #0
 8106daa:	d109      	bne.n	8106dc0 <HAL_TIM_PWM_Start+0x24>
 8106dac:	687b      	ldr	r3, [r7, #4]
 8106dae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8106db2:	b2db      	uxtb	r3, r3
 8106db4:	2b01      	cmp	r3, #1
 8106db6:	bf14      	ite	ne
 8106db8:	2301      	movne	r3, #1
 8106dba:	2300      	moveq	r3, #0
 8106dbc:	b2db      	uxtb	r3, r3
 8106dbe:	e03c      	b.n	8106e3a <HAL_TIM_PWM_Start+0x9e>
 8106dc0:	683b      	ldr	r3, [r7, #0]
 8106dc2:	2b04      	cmp	r3, #4
 8106dc4:	d109      	bne.n	8106dda <HAL_TIM_PWM_Start+0x3e>
 8106dc6:	687b      	ldr	r3, [r7, #4]
 8106dc8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8106dcc:	b2db      	uxtb	r3, r3
 8106dce:	2b01      	cmp	r3, #1
 8106dd0:	bf14      	ite	ne
 8106dd2:	2301      	movne	r3, #1
 8106dd4:	2300      	moveq	r3, #0
 8106dd6:	b2db      	uxtb	r3, r3
 8106dd8:	e02f      	b.n	8106e3a <HAL_TIM_PWM_Start+0x9e>
 8106dda:	683b      	ldr	r3, [r7, #0]
 8106ddc:	2b08      	cmp	r3, #8
 8106dde:	d109      	bne.n	8106df4 <HAL_TIM_PWM_Start+0x58>
 8106de0:	687b      	ldr	r3, [r7, #4]
 8106de2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8106de6:	b2db      	uxtb	r3, r3
 8106de8:	2b01      	cmp	r3, #1
 8106dea:	bf14      	ite	ne
 8106dec:	2301      	movne	r3, #1
 8106dee:	2300      	moveq	r3, #0
 8106df0:	b2db      	uxtb	r3, r3
 8106df2:	e022      	b.n	8106e3a <HAL_TIM_PWM_Start+0x9e>
 8106df4:	683b      	ldr	r3, [r7, #0]
 8106df6:	2b0c      	cmp	r3, #12
 8106df8:	d109      	bne.n	8106e0e <HAL_TIM_PWM_Start+0x72>
 8106dfa:	687b      	ldr	r3, [r7, #4]
 8106dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8106e00:	b2db      	uxtb	r3, r3
 8106e02:	2b01      	cmp	r3, #1
 8106e04:	bf14      	ite	ne
 8106e06:	2301      	movne	r3, #1
 8106e08:	2300      	moveq	r3, #0
 8106e0a:	b2db      	uxtb	r3, r3
 8106e0c:	e015      	b.n	8106e3a <HAL_TIM_PWM_Start+0x9e>
 8106e0e:	683b      	ldr	r3, [r7, #0]
 8106e10:	2b10      	cmp	r3, #16
 8106e12:	d109      	bne.n	8106e28 <HAL_TIM_PWM_Start+0x8c>
 8106e14:	687b      	ldr	r3, [r7, #4]
 8106e16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8106e1a:	b2db      	uxtb	r3, r3
 8106e1c:	2b01      	cmp	r3, #1
 8106e1e:	bf14      	ite	ne
 8106e20:	2301      	movne	r3, #1
 8106e22:	2300      	moveq	r3, #0
 8106e24:	b2db      	uxtb	r3, r3
 8106e26:	e008      	b.n	8106e3a <HAL_TIM_PWM_Start+0x9e>
 8106e28:	687b      	ldr	r3, [r7, #4]
 8106e2a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8106e2e:	b2db      	uxtb	r3, r3
 8106e30:	2b01      	cmp	r3, #1
 8106e32:	bf14      	ite	ne
 8106e34:	2301      	movne	r3, #1
 8106e36:	2300      	moveq	r3, #0
 8106e38:	b2db      	uxtb	r3, r3
 8106e3a:	2b00      	cmp	r3, #0
 8106e3c:	d001      	beq.n	8106e42 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8106e3e:	2301      	movs	r3, #1
 8106e40:	e0a1      	b.n	8106f86 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8106e42:	683b      	ldr	r3, [r7, #0]
 8106e44:	2b00      	cmp	r3, #0
 8106e46:	d104      	bne.n	8106e52 <HAL_TIM_PWM_Start+0xb6>
 8106e48:	687b      	ldr	r3, [r7, #4]
 8106e4a:	2202      	movs	r2, #2
 8106e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8106e50:	e023      	b.n	8106e9a <HAL_TIM_PWM_Start+0xfe>
 8106e52:	683b      	ldr	r3, [r7, #0]
 8106e54:	2b04      	cmp	r3, #4
 8106e56:	d104      	bne.n	8106e62 <HAL_TIM_PWM_Start+0xc6>
 8106e58:	687b      	ldr	r3, [r7, #4]
 8106e5a:	2202      	movs	r2, #2
 8106e5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8106e60:	e01b      	b.n	8106e9a <HAL_TIM_PWM_Start+0xfe>
 8106e62:	683b      	ldr	r3, [r7, #0]
 8106e64:	2b08      	cmp	r3, #8
 8106e66:	d104      	bne.n	8106e72 <HAL_TIM_PWM_Start+0xd6>
 8106e68:	687b      	ldr	r3, [r7, #4]
 8106e6a:	2202      	movs	r2, #2
 8106e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8106e70:	e013      	b.n	8106e9a <HAL_TIM_PWM_Start+0xfe>
 8106e72:	683b      	ldr	r3, [r7, #0]
 8106e74:	2b0c      	cmp	r3, #12
 8106e76:	d104      	bne.n	8106e82 <HAL_TIM_PWM_Start+0xe6>
 8106e78:	687b      	ldr	r3, [r7, #4]
 8106e7a:	2202      	movs	r2, #2
 8106e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8106e80:	e00b      	b.n	8106e9a <HAL_TIM_PWM_Start+0xfe>
 8106e82:	683b      	ldr	r3, [r7, #0]
 8106e84:	2b10      	cmp	r3, #16
 8106e86:	d104      	bne.n	8106e92 <HAL_TIM_PWM_Start+0xf6>
 8106e88:	687b      	ldr	r3, [r7, #4]
 8106e8a:	2202      	movs	r2, #2
 8106e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8106e90:	e003      	b.n	8106e9a <HAL_TIM_PWM_Start+0xfe>
 8106e92:	687b      	ldr	r3, [r7, #4]
 8106e94:	2202      	movs	r2, #2
 8106e96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8106e9a:	687b      	ldr	r3, [r7, #4]
 8106e9c:	681b      	ldr	r3, [r3, #0]
 8106e9e:	2201      	movs	r2, #1
 8106ea0:	6839      	ldr	r1, [r7, #0]
 8106ea2:	4618      	mov	r0, r3
 8106ea4:	f000 ff88 	bl	8107db8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8106ea8:	687b      	ldr	r3, [r7, #4]
 8106eaa:	681b      	ldr	r3, [r3, #0]
 8106eac:	4a38      	ldr	r2, [pc, #224]	; (8106f90 <HAL_TIM_PWM_Start+0x1f4>)
 8106eae:	4293      	cmp	r3, r2
 8106eb0:	d013      	beq.n	8106eda <HAL_TIM_PWM_Start+0x13e>
 8106eb2:	687b      	ldr	r3, [r7, #4]
 8106eb4:	681b      	ldr	r3, [r3, #0]
 8106eb6:	4a37      	ldr	r2, [pc, #220]	; (8106f94 <HAL_TIM_PWM_Start+0x1f8>)
 8106eb8:	4293      	cmp	r3, r2
 8106eba:	d00e      	beq.n	8106eda <HAL_TIM_PWM_Start+0x13e>
 8106ebc:	687b      	ldr	r3, [r7, #4]
 8106ebe:	681b      	ldr	r3, [r3, #0]
 8106ec0:	4a35      	ldr	r2, [pc, #212]	; (8106f98 <HAL_TIM_PWM_Start+0x1fc>)
 8106ec2:	4293      	cmp	r3, r2
 8106ec4:	d009      	beq.n	8106eda <HAL_TIM_PWM_Start+0x13e>
 8106ec6:	687b      	ldr	r3, [r7, #4]
 8106ec8:	681b      	ldr	r3, [r3, #0]
 8106eca:	4a34      	ldr	r2, [pc, #208]	; (8106f9c <HAL_TIM_PWM_Start+0x200>)
 8106ecc:	4293      	cmp	r3, r2
 8106ece:	d004      	beq.n	8106eda <HAL_TIM_PWM_Start+0x13e>
 8106ed0:	687b      	ldr	r3, [r7, #4]
 8106ed2:	681b      	ldr	r3, [r3, #0]
 8106ed4:	4a32      	ldr	r2, [pc, #200]	; (8106fa0 <HAL_TIM_PWM_Start+0x204>)
 8106ed6:	4293      	cmp	r3, r2
 8106ed8:	d101      	bne.n	8106ede <HAL_TIM_PWM_Start+0x142>
 8106eda:	2301      	movs	r3, #1
 8106edc:	e000      	b.n	8106ee0 <HAL_TIM_PWM_Start+0x144>
 8106ede:	2300      	movs	r3, #0
 8106ee0:	2b00      	cmp	r3, #0
 8106ee2:	d007      	beq.n	8106ef4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8106ee4:	687b      	ldr	r3, [r7, #4]
 8106ee6:	681b      	ldr	r3, [r3, #0]
 8106ee8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8106eea:	687b      	ldr	r3, [r7, #4]
 8106eec:	681b      	ldr	r3, [r3, #0]
 8106eee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8106ef2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8106ef4:	687b      	ldr	r3, [r7, #4]
 8106ef6:	681b      	ldr	r3, [r3, #0]
 8106ef8:	4a25      	ldr	r2, [pc, #148]	; (8106f90 <HAL_TIM_PWM_Start+0x1f4>)
 8106efa:	4293      	cmp	r3, r2
 8106efc:	d022      	beq.n	8106f44 <HAL_TIM_PWM_Start+0x1a8>
 8106efe:	687b      	ldr	r3, [r7, #4]
 8106f00:	681b      	ldr	r3, [r3, #0]
 8106f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106f06:	d01d      	beq.n	8106f44 <HAL_TIM_PWM_Start+0x1a8>
 8106f08:	687b      	ldr	r3, [r7, #4]
 8106f0a:	681b      	ldr	r3, [r3, #0]
 8106f0c:	4a25      	ldr	r2, [pc, #148]	; (8106fa4 <HAL_TIM_PWM_Start+0x208>)
 8106f0e:	4293      	cmp	r3, r2
 8106f10:	d018      	beq.n	8106f44 <HAL_TIM_PWM_Start+0x1a8>
 8106f12:	687b      	ldr	r3, [r7, #4]
 8106f14:	681b      	ldr	r3, [r3, #0]
 8106f16:	4a24      	ldr	r2, [pc, #144]	; (8106fa8 <HAL_TIM_PWM_Start+0x20c>)
 8106f18:	4293      	cmp	r3, r2
 8106f1a:	d013      	beq.n	8106f44 <HAL_TIM_PWM_Start+0x1a8>
 8106f1c:	687b      	ldr	r3, [r7, #4]
 8106f1e:	681b      	ldr	r3, [r3, #0]
 8106f20:	4a22      	ldr	r2, [pc, #136]	; (8106fac <HAL_TIM_PWM_Start+0x210>)
 8106f22:	4293      	cmp	r3, r2
 8106f24:	d00e      	beq.n	8106f44 <HAL_TIM_PWM_Start+0x1a8>
 8106f26:	687b      	ldr	r3, [r7, #4]
 8106f28:	681b      	ldr	r3, [r3, #0]
 8106f2a:	4a1a      	ldr	r2, [pc, #104]	; (8106f94 <HAL_TIM_PWM_Start+0x1f8>)
 8106f2c:	4293      	cmp	r3, r2
 8106f2e:	d009      	beq.n	8106f44 <HAL_TIM_PWM_Start+0x1a8>
 8106f30:	687b      	ldr	r3, [r7, #4]
 8106f32:	681b      	ldr	r3, [r3, #0]
 8106f34:	4a1e      	ldr	r2, [pc, #120]	; (8106fb0 <HAL_TIM_PWM_Start+0x214>)
 8106f36:	4293      	cmp	r3, r2
 8106f38:	d004      	beq.n	8106f44 <HAL_TIM_PWM_Start+0x1a8>
 8106f3a:	687b      	ldr	r3, [r7, #4]
 8106f3c:	681b      	ldr	r3, [r3, #0]
 8106f3e:	4a16      	ldr	r2, [pc, #88]	; (8106f98 <HAL_TIM_PWM_Start+0x1fc>)
 8106f40:	4293      	cmp	r3, r2
 8106f42:	d115      	bne.n	8106f70 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8106f44:	687b      	ldr	r3, [r7, #4]
 8106f46:	681b      	ldr	r3, [r3, #0]
 8106f48:	689a      	ldr	r2, [r3, #8]
 8106f4a:	4b1a      	ldr	r3, [pc, #104]	; (8106fb4 <HAL_TIM_PWM_Start+0x218>)
 8106f4c:	4013      	ands	r3, r2
 8106f4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106f50:	68fb      	ldr	r3, [r7, #12]
 8106f52:	2b06      	cmp	r3, #6
 8106f54:	d015      	beq.n	8106f82 <HAL_TIM_PWM_Start+0x1e6>
 8106f56:	68fb      	ldr	r3, [r7, #12]
 8106f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106f5c:	d011      	beq.n	8106f82 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8106f5e:	687b      	ldr	r3, [r7, #4]
 8106f60:	681b      	ldr	r3, [r3, #0]
 8106f62:	681a      	ldr	r2, [r3, #0]
 8106f64:	687b      	ldr	r3, [r7, #4]
 8106f66:	681b      	ldr	r3, [r3, #0]
 8106f68:	f042 0201 	orr.w	r2, r2, #1
 8106f6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106f6e:	e008      	b.n	8106f82 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8106f70:	687b      	ldr	r3, [r7, #4]
 8106f72:	681b      	ldr	r3, [r3, #0]
 8106f74:	681a      	ldr	r2, [r3, #0]
 8106f76:	687b      	ldr	r3, [r7, #4]
 8106f78:	681b      	ldr	r3, [r3, #0]
 8106f7a:	f042 0201 	orr.w	r2, r2, #1
 8106f7e:	601a      	str	r2, [r3, #0]
 8106f80:	e000      	b.n	8106f84 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106f82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8106f84:	2300      	movs	r3, #0
}
 8106f86:	4618      	mov	r0, r3
 8106f88:	3710      	adds	r7, #16
 8106f8a:	46bd      	mov	sp, r7
 8106f8c:	bd80      	pop	{r7, pc}
 8106f8e:	bf00      	nop
 8106f90:	40010000 	.word	0x40010000
 8106f94:	40010400 	.word	0x40010400
 8106f98:	40014000 	.word	0x40014000
 8106f9c:	40014400 	.word	0x40014400
 8106fa0:	40014800 	.word	0x40014800
 8106fa4:	40000400 	.word	0x40000400
 8106fa8:	40000800 	.word	0x40000800
 8106fac:	40000c00 	.word	0x40000c00
 8106fb0:	40001800 	.word	0x40001800
 8106fb4:	00010007 	.word	0x00010007

08106fb8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8106fb8:	b580      	push	{r7, lr}
 8106fba:	b086      	sub	sp, #24
 8106fbc:	af00      	add	r7, sp, #0
 8106fbe:	6078      	str	r0, [r7, #4]
 8106fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8106fc2:	687b      	ldr	r3, [r7, #4]
 8106fc4:	2b00      	cmp	r3, #0
 8106fc6:	d101      	bne.n	8106fcc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8106fc8:	2301      	movs	r3, #1
 8106fca:	e097      	b.n	81070fc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8106fcc:	687b      	ldr	r3, [r7, #4]
 8106fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8106fd2:	b2db      	uxtb	r3, r3
 8106fd4:	2b00      	cmp	r3, #0
 8106fd6:	d106      	bne.n	8106fe6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8106fd8:	687b      	ldr	r3, [r7, #4]
 8106fda:	2200      	movs	r2, #0
 8106fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8106fe0:	6878      	ldr	r0, [r7, #4]
 8106fe2:	f7fa fd83 	bl	8101aec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106fe6:	687b      	ldr	r3, [r7, #4]
 8106fe8:	2202      	movs	r2, #2
 8106fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8106fee:	687b      	ldr	r3, [r7, #4]
 8106ff0:	681b      	ldr	r3, [r3, #0]
 8106ff2:	689b      	ldr	r3, [r3, #8]
 8106ff4:	687a      	ldr	r2, [r7, #4]
 8106ff6:	6812      	ldr	r2, [r2, #0]
 8106ff8:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8106ffc:	f023 0307 	bic.w	r3, r3, #7
 8107000:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8107002:	687b      	ldr	r3, [r7, #4]
 8107004:	681a      	ldr	r2, [r3, #0]
 8107006:	687b      	ldr	r3, [r7, #4]
 8107008:	3304      	adds	r3, #4
 810700a:	4619      	mov	r1, r3
 810700c:	4610      	mov	r0, r2
 810700e:	f000 fb63 	bl	81076d8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8107012:	687b      	ldr	r3, [r7, #4]
 8107014:	681b      	ldr	r3, [r3, #0]
 8107016:	689b      	ldr	r3, [r3, #8]
 8107018:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 810701a:	687b      	ldr	r3, [r7, #4]
 810701c:	681b      	ldr	r3, [r3, #0]
 810701e:	699b      	ldr	r3, [r3, #24]
 8107020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8107022:	687b      	ldr	r3, [r7, #4]
 8107024:	681b      	ldr	r3, [r3, #0]
 8107026:	6a1b      	ldr	r3, [r3, #32]
 8107028:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 810702a:	683b      	ldr	r3, [r7, #0]
 810702c:	681b      	ldr	r3, [r3, #0]
 810702e:	697a      	ldr	r2, [r7, #20]
 8107030:	4313      	orrs	r3, r2
 8107032:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8107034:	693b      	ldr	r3, [r7, #16]
 8107036:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810703a:	f023 0303 	bic.w	r3, r3, #3
 810703e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8107040:	683b      	ldr	r3, [r7, #0]
 8107042:	689a      	ldr	r2, [r3, #8]
 8107044:	683b      	ldr	r3, [r7, #0]
 8107046:	699b      	ldr	r3, [r3, #24]
 8107048:	021b      	lsls	r3, r3, #8
 810704a:	4313      	orrs	r3, r2
 810704c:	693a      	ldr	r2, [r7, #16]
 810704e:	4313      	orrs	r3, r2
 8107050:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8107052:	693b      	ldr	r3, [r7, #16]
 8107054:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8107058:	f023 030c 	bic.w	r3, r3, #12
 810705c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 810705e:	693b      	ldr	r3, [r7, #16]
 8107060:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8107064:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8107068:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 810706a:	683b      	ldr	r3, [r7, #0]
 810706c:	68da      	ldr	r2, [r3, #12]
 810706e:	683b      	ldr	r3, [r7, #0]
 8107070:	69db      	ldr	r3, [r3, #28]
 8107072:	021b      	lsls	r3, r3, #8
 8107074:	4313      	orrs	r3, r2
 8107076:	693a      	ldr	r2, [r7, #16]
 8107078:	4313      	orrs	r3, r2
 810707a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 810707c:	683b      	ldr	r3, [r7, #0]
 810707e:	691b      	ldr	r3, [r3, #16]
 8107080:	011a      	lsls	r2, r3, #4
 8107082:	683b      	ldr	r3, [r7, #0]
 8107084:	6a1b      	ldr	r3, [r3, #32]
 8107086:	031b      	lsls	r3, r3, #12
 8107088:	4313      	orrs	r3, r2
 810708a:	693a      	ldr	r2, [r7, #16]
 810708c:	4313      	orrs	r3, r2
 810708e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8107090:	68fb      	ldr	r3, [r7, #12]
 8107092:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8107096:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8107098:	68fb      	ldr	r3, [r7, #12]
 810709a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 810709e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 81070a0:	683b      	ldr	r3, [r7, #0]
 81070a2:	685a      	ldr	r2, [r3, #4]
 81070a4:	683b      	ldr	r3, [r7, #0]
 81070a6:	695b      	ldr	r3, [r3, #20]
 81070a8:	011b      	lsls	r3, r3, #4
 81070aa:	4313      	orrs	r3, r2
 81070ac:	68fa      	ldr	r2, [r7, #12]
 81070ae:	4313      	orrs	r3, r2
 81070b0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 81070b2:	687b      	ldr	r3, [r7, #4]
 81070b4:	681b      	ldr	r3, [r3, #0]
 81070b6:	697a      	ldr	r2, [r7, #20]
 81070b8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 81070ba:	687b      	ldr	r3, [r7, #4]
 81070bc:	681b      	ldr	r3, [r3, #0]
 81070be:	693a      	ldr	r2, [r7, #16]
 81070c0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 81070c2:	687b      	ldr	r3, [r7, #4]
 81070c4:	681b      	ldr	r3, [r3, #0]
 81070c6:	68fa      	ldr	r2, [r7, #12]
 81070c8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81070ca:	687b      	ldr	r3, [r7, #4]
 81070cc:	2201      	movs	r2, #1
 81070ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 81070d2:	687b      	ldr	r3, [r7, #4]
 81070d4:	2201      	movs	r2, #1
 81070d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 81070da:	687b      	ldr	r3, [r7, #4]
 81070dc:	2201      	movs	r2, #1
 81070de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 81070e2:	687b      	ldr	r3, [r7, #4]
 81070e4:	2201      	movs	r2, #1
 81070e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 81070ea:	687b      	ldr	r3, [r7, #4]
 81070ec:	2201      	movs	r2, #1
 81070ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81070f2:	687b      	ldr	r3, [r7, #4]
 81070f4:	2201      	movs	r2, #1
 81070f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 81070fa:	2300      	movs	r3, #0
}
 81070fc:	4618      	mov	r0, r3
 81070fe:	3718      	adds	r7, #24
 8107100:	46bd      	mov	sp, r7
 8107102:	bd80      	pop	{r7, pc}

08107104 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8107104:	b580      	push	{r7, lr}
 8107106:	b084      	sub	sp, #16
 8107108:	af00      	add	r7, sp, #0
 810710a:	6078      	str	r0, [r7, #4]
 810710c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 810710e:	687b      	ldr	r3, [r7, #4]
 8107110:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8107114:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8107116:	687b      	ldr	r3, [r7, #4]
 8107118:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 810711c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 810711e:	687b      	ldr	r3, [r7, #4]
 8107120:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8107124:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8107126:	687b      	ldr	r3, [r7, #4]
 8107128:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810712c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 810712e:	683b      	ldr	r3, [r7, #0]
 8107130:	2b00      	cmp	r3, #0
 8107132:	d110      	bne.n	8107156 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8107134:	7bfb      	ldrb	r3, [r7, #15]
 8107136:	2b01      	cmp	r3, #1
 8107138:	d102      	bne.n	8107140 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 810713a:	7b7b      	ldrb	r3, [r7, #13]
 810713c:	2b01      	cmp	r3, #1
 810713e:	d001      	beq.n	8107144 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8107140:	2301      	movs	r3, #1
 8107142:	e069      	b.n	8107218 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8107144:	687b      	ldr	r3, [r7, #4]
 8107146:	2202      	movs	r2, #2
 8107148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 810714c:	687b      	ldr	r3, [r7, #4]
 810714e:	2202      	movs	r2, #2
 8107150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8107154:	e031      	b.n	81071ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8107156:	683b      	ldr	r3, [r7, #0]
 8107158:	2b04      	cmp	r3, #4
 810715a:	d110      	bne.n	810717e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 810715c:	7bbb      	ldrb	r3, [r7, #14]
 810715e:	2b01      	cmp	r3, #1
 8107160:	d102      	bne.n	8107168 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8107162:	7b3b      	ldrb	r3, [r7, #12]
 8107164:	2b01      	cmp	r3, #1
 8107166:	d001      	beq.n	810716c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8107168:	2301      	movs	r3, #1
 810716a:	e055      	b.n	8107218 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 810716c:	687b      	ldr	r3, [r7, #4]
 810716e:	2202      	movs	r2, #2
 8107170:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8107174:	687b      	ldr	r3, [r7, #4]
 8107176:	2202      	movs	r2, #2
 8107178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810717c:	e01d      	b.n	81071ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 810717e:	7bfb      	ldrb	r3, [r7, #15]
 8107180:	2b01      	cmp	r3, #1
 8107182:	d108      	bne.n	8107196 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8107184:	7bbb      	ldrb	r3, [r7, #14]
 8107186:	2b01      	cmp	r3, #1
 8107188:	d105      	bne.n	8107196 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 810718a:	7b7b      	ldrb	r3, [r7, #13]
 810718c:	2b01      	cmp	r3, #1
 810718e:	d102      	bne.n	8107196 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8107190:	7b3b      	ldrb	r3, [r7, #12]
 8107192:	2b01      	cmp	r3, #1
 8107194:	d001      	beq.n	810719a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8107196:	2301      	movs	r3, #1
 8107198:	e03e      	b.n	8107218 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 810719a:	687b      	ldr	r3, [r7, #4]
 810719c:	2202      	movs	r2, #2
 810719e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 81071a2:	687b      	ldr	r3, [r7, #4]
 81071a4:	2202      	movs	r2, #2
 81071a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 81071aa:	687b      	ldr	r3, [r7, #4]
 81071ac:	2202      	movs	r2, #2
 81071ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 81071b2:	687b      	ldr	r3, [r7, #4]
 81071b4:	2202      	movs	r2, #2
 81071b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 81071ba:	683b      	ldr	r3, [r7, #0]
 81071bc:	2b00      	cmp	r3, #0
 81071be:	d003      	beq.n	81071c8 <HAL_TIM_Encoder_Start+0xc4>
 81071c0:	683b      	ldr	r3, [r7, #0]
 81071c2:	2b04      	cmp	r3, #4
 81071c4:	d008      	beq.n	81071d8 <HAL_TIM_Encoder_Start+0xd4>
 81071c6:	e00f      	b.n	81071e8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 81071c8:	687b      	ldr	r3, [r7, #4]
 81071ca:	681b      	ldr	r3, [r3, #0]
 81071cc:	2201      	movs	r2, #1
 81071ce:	2100      	movs	r1, #0
 81071d0:	4618      	mov	r0, r3
 81071d2:	f000 fdf1 	bl	8107db8 <TIM_CCxChannelCmd>
      break;
 81071d6:	e016      	b.n	8107206 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 81071d8:	687b      	ldr	r3, [r7, #4]
 81071da:	681b      	ldr	r3, [r3, #0]
 81071dc:	2201      	movs	r2, #1
 81071de:	2104      	movs	r1, #4
 81071e0:	4618      	mov	r0, r3
 81071e2:	f000 fde9 	bl	8107db8 <TIM_CCxChannelCmd>
      break;
 81071e6:	e00e      	b.n	8107206 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 81071e8:	687b      	ldr	r3, [r7, #4]
 81071ea:	681b      	ldr	r3, [r3, #0]
 81071ec:	2201      	movs	r2, #1
 81071ee:	2100      	movs	r1, #0
 81071f0:	4618      	mov	r0, r3
 81071f2:	f000 fde1 	bl	8107db8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 81071f6:	687b      	ldr	r3, [r7, #4]
 81071f8:	681b      	ldr	r3, [r3, #0]
 81071fa:	2201      	movs	r2, #1
 81071fc:	2104      	movs	r1, #4
 81071fe:	4618      	mov	r0, r3
 8107200:	f000 fdda 	bl	8107db8 <TIM_CCxChannelCmd>
      break;
 8107204:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8107206:	687b      	ldr	r3, [r7, #4]
 8107208:	681b      	ldr	r3, [r3, #0]
 810720a:	681a      	ldr	r2, [r3, #0]
 810720c:	687b      	ldr	r3, [r7, #4]
 810720e:	681b      	ldr	r3, [r3, #0]
 8107210:	f042 0201 	orr.w	r2, r2, #1
 8107214:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8107216:	2300      	movs	r3, #0
}
 8107218:	4618      	mov	r0, r3
 810721a:	3710      	adds	r7, #16
 810721c:	46bd      	mov	sp, r7
 810721e:	bd80      	pop	{r7, pc}

08107220 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8107220:	b580      	push	{r7, lr}
 8107222:	b082      	sub	sp, #8
 8107224:	af00      	add	r7, sp, #0
 8107226:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8107228:	687b      	ldr	r3, [r7, #4]
 810722a:	681b      	ldr	r3, [r3, #0]
 810722c:	691b      	ldr	r3, [r3, #16]
 810722e:	f003 0302 	and.w	r3, r3, #2
 8107232:	2b02      	cmp	r3, #2
 8107234:	d122      	bne.n	810727c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8107236:	687b      	ldr	r3, [r7, #4]
 8107238:	681b      	ldr	r3, [r3, #0]
 810723a:	68db      	ldr	r3, [r3, #12]
 810723c:	f003 0302 	and.w	r3, r3, #2
 8107240:	2b02      	cmp	r3, #2
 8107242:	d11b      	bne.n	810727c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8107244:	687b      	ldr	r3, [r7, #4]
 8107246:	681b      	ldr	r3, [r3, #0]
 8107248:	f06f 0202 	mvn.w	r2, #2
 810724c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 810724e:	687b      	ldr	r3, [r7, #4]
 8107250:	2201      	movs	r2, #1
 8107252:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8107254:	687b      	ldr	r3, [r7, #4]
 8107256:	681b      	ldr	r3, [r3, #0]
 8107258:	699b      	ldr	r3, [r3, #24]
 810725a:	f003 0303 	and.w	r3, r3, #3
 810725e:	2b00      	cmp	r3, #0
 8107260:	d003      	beq.n	810726a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8107262:	6878      	ldr	r0, [r7, #4]
 8107264:	f000 fa1a 	bl	810769c <HAL_TIM_IC_CaptureCallback>
 8107268:	e005      	b.n	8107276 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 810726a:	6878      	ldr	r0, [r7, #4]
 810726c:	f000 fa0c 	bl	8107688 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8107270:	6878      	ldr	r0, [r7, #4]
 8107272:	f000 fa1d 	bl	81076b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8107276:	687b      	ldr	r3, [r7, #4]
 8107278:	2200      	movs	r2, #0
 810727a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 810727c:	687b      	ldr	r3, [r7, #4]
 810727e:	681b      	ldr	r3, [r3, #0]
 8107280:	691b      	ldr	r3, [r3, #16]
 8107282:	f003 0304 	and.w	r3, r3, #4
 8107286:	2b04      	cmp	r3, #4
 8107288:	d122      	bne.n	81072d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 810728a:	687b      	ldr	r3, [r7, #4]
 810728c:	681b      	ldr	r3, [r3, #0]
 810728e:	68db      	ldr	r3, [r3, #12]
 8107290:	f003 0304 	and.w	r3, r3, #4
 8107294:	2b04      	cmp	r3, #4
 8107296:	d11b      	bne.n	81072d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8107298:	687b      	ldr	r3, [r7, #4]
 810729a:	681b      	ldr	r3, [r3, #0]
 810729c:	f06f 0204 	mvn.w	r2, #4
 81072a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 81072a2:	687b      	ldr	r3, [r7, #4]
 81072a4:	2202      	movs	r2, #2
 81072a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 81072a8:	687b      	ldr	r3, [r7, #4]
 81072aa:	681b      	ldr	r3, [r3, #0]
 81072ac:	699b      	ldr	r3, [r3, #24]
 81072ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81072b2:	2b00      	cmp	r3, #0
 81072b4:	d003      	beq.n	81072be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81072b6:	6878      	ldr	r0, [r7, #4]
 81072b8:	f000 f9f0 	bl	810769c <HAL_TIM_IC_CaptureCallback>
 81072bc:	e005      	b.n	81072ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81072be:	6878      	ldr	r0, [r7, #4]
 81072c0:	f000 f9e2 	bl	8107688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81072c4:	6878      	ldr	r0, [r7, #4]
 81072c6:	f000 f9f3 	bl	81076b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81072ca:	687b      	ldr	r3, [r7, #4]
 81072cc:	2200      	movs	r2, #0
 81072ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 81072d0:	687b      	ldr	r3, [r7, #4]
 81072d2:	681b      	ldr	r3, [r3, #0]
 81072d4:	691b      	ldr	r3, [r3, #16]
 81072d6:	f003 0308 	and.w	r3, r3, #8
 81072da:	2b08      	cmp	r3, #8
 81072dc:	d122      	bne.n	8107324 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 81072de:	687b      	ldr	r3, [r7, #4]
 81072e0:	681b      	ldr	r3, [r3, #0]
 81072e2:	68db      	ldr	r3, [r3, #12]
 81072e4:	f003 0308 	and.w	r3, r3, #8
 81072e8:	2b08      	cmp	r3, #8
 81072ea:	d11b      	bne.n	8107324 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 81072ec:	687b      	ldr	r3, [r7, #4]
 81072ee:	681b      	ldr	r3, [r3, #0]
 81072f0:	f06f 0208 	mvn.w	r2, #8
 81072f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 81072f6:	687b      	ldr	r3, [r7, #4]
 81072f8:	2204      	movs	r2, #4
 81072fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 81072fc:	687b      	ldr	r3, [r7, #4]
 81072fe:	681b      	ldr	r3, [r3, #0]
 8107300:	69db      	ldr	r3, [r3, #28]
 8107302:	f003 0303 	and.w	r3, r3, #3
 8107306:	2b00      	cmp	r3, #0
 8107308:	d003      	beq.n	8107312 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810730a:	6878      	ldr	r0, [r7, #4]
 810730c:	f000 f9c6 	bl	810769c <HAL_TIM_IC_CaptureCallback>
 8107310:	e005      	b.n	810731e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8107312:	6878      	ldr	r0, [r7, #4]
 8107314:	f000 f9b8 	bl	8107688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8107318:	6878      	ldr	r0, [r7, #4]
 810731a:	f000 f9c9 	bl	81076b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810731e:	687b      	ldr	r3, [r7, #4]
 8107320:	2200      	movs	r2, #0
 8107322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8107324:	687b      	ldr	r3, [r7, #4]
 8107326:	681b      	ldr	r3, [r3, #0]
 8107328:	691b      	ldr	r3, [r3, #16]
 810732a:	f003 0310 	and.w	r3, r3, #16
 810732e:	2b10      	cmp	r3, #16
 8107330:	d122      	bne.n	8107378 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8107332:	687b      	ldr	r3, [r7, #4]
 8107334:	681b      	ldr	r3, [r3, #0]
 8107336:	68db      	ldr	r3, [r3, #12]
 8107338:	f003 0310 	and.w	r3, r3, #16
 810733c:	2b10      	cmp	r3, #16
 810733e:	d11b      	bne.n	8107378 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8107340:	687b      	ldr	r3, [r7, #4]
 8107342:	681b      	ldr	r3, [r3, #0]
 8107344:	f06f 0210 	mvn.w	r2, #16
 8107348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 810734a:	687b      	ldr	r3, [r7, #4]
 810734c:	2208      	movs	r2, #8
 810734e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8107350:	687b      	ldr	r3, [r7, #4]
 8107352:	681b      	ldr	r3, [r3, #0]
 8107354:	69db      	ldr	r3, [r3, #28]
 8107356:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810735a:	2b00      	cmp	r3, #0
 810735c:	d003      	beq.n	8107366 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810735e:	6878      	ldr	r0, [r7, #4]
 8107360:	f000 f99c 	bl	810769c <HAL_TIM_IC_CaptureCallback>
 8107364:	e005      	b.n	8107372 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8107366:	6878      	ldr	r0, [r7, #4]
 8107368:	f000 f98e 	bl	8107688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810736c:	6878      	ldr	r0, [r7, #4]
 810736e:	f000 f99f 	bl	81076b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8107372:	687b      	ldr	r3, [r7, #4]
 8107374:	2200      	movs	r2, #0
 8107376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8107378:	687b      	ldr	r3, [r7, #4]
 810737a:	681b      	ldr	r3, [r3, #0]
 810737c:	691b      	ldr	r3, [r3, #16]
 810737e:	f003 0301 	and.w	r3, r3, #1
 8107382:	2b01      	cmp	r3, #1
 8107384:	d10e      	bne.n	81073a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8107386:	687b      	ldr	r3, [r7, #4]
 8107388:	681b      	ldr	r3, [r3, #0]
 810738a:	68db      	ldr	r3, [r3, #12]
 810738c:	f003 0301 	and.w	r3, r3, #1
 8107390:	2b01      	cmp	r3, #1
 8107392:	d107      	bne.n	81073a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8107394:	687b      	ldr	r3, [r7, #4]
 8107396:	681b      	ldr	r3, [r3, #0]
 8107398:	f06f 0201 	mvn.w	r2, #1
 810739c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 810739e:	6878      	ldr	r0, [r7, #4]
 81073a0:	f7fa faea 	bl	8101978 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 81073a4:	687b      	ldr	r3, [r7, #4]
 81073a6:	681b      	ldr	r3, [r3, #0]
 81073a8:	691b      	ldr	r3, [r3, #16]
 81073aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81073ae:	2b80      	cmp	r3, #128	; 0x80
 81073b0:	d10e      	bne.n	81073d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 81073b2:	687b      	ldr	r3, [r7, #4]
 81073b4:	681b      	ldr	r3, [r3, #0]
 81073b6:	68db      	ldr	r3, [r3, #12]
 81073b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81073bc:	2b80      	cmp	r3, #128	; 0x80
 81073be:	d107      	bne.n	81073d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 81073c0:	687b      	ldr	r3, [r7, #4]
 81073c2:	681b      	ldr	r3, [r3, #0]
 81073c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 81073c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 81073ca:	6878      	ldr	r0, [r7, #4]
 81073cc:	f000 fdb2 	bl	8107f34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 81073d0:	687b      	ldr	r3, [r7, #4]
 81073d2:	681b      	ldr	r3, [r3, #0]
 81073d4:	691b      	ldr	r3, [r3, #16]
 81073d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81073da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81073de:	d10e      	bne.n	81073fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 81073e0:	687b      	ldr	r3, [r7, #4]
 81073e2:	681b      	ldr	r3, [r3, #0]
 81073e4:	68db      	ldr	r3, [r3, #12]
 81073e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81073ea:	2b80      	cmp	r3, #128	; 0x80
 81073ec:	d107      	bne.n	81073fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 81073ee:	687b      	ldr	r3, [r7, #4]
 81073f0:	681b      	ldr	r3, [r3, #0]
 81073f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 81073f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 81073f8:	6878      	ldr	r0, [r7, #4]
 81073fa:	f000 fda5 	bl	8107f48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 81073fe:	687b      	ldr	r3, [r7, #4]
 8107400:	681b      	ldr	r3, [r3, #0]
 8107402:	691b      	ldr	r3, [r3, #16]
 8107404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107408:	2b40      	cmp	r3, #64	; 0x40
 810740a:	d10e      	bne.n	810742a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 810740c:	687b      	ldr	r3, [r7, #4]
 810740e:	681b      	ldr	r3, [r3, #0]
 8107410:	68db      	ldr	r3, [r3, #12]
 8107412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107416:	2b40      	cmp	r3, #64	; 0x40
 8107418:	d107      	bne.n	810742a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 810741a:	687b      	ldr	r3, [r7, #4]
 810741c:	681b      	ldr	r3, [r3, #0]
 810741e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8107422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8107424:	6878      	ldr	r0, [r7, #4]
 8107426:	f000 f94d 	bl	81076c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 810742a:	687b      	ldr	r3, [r7, #4]
 810742c:	681b      	ldr	r3, [r3, #0]
 810742e:	691b      	ldr	r3, [r3, #16]
 8107430:	f003 0320 	and.w	r3, r3, #32
 8107434:	2b20      	cmp	r3, #32
 8107436:	d10e      	bne.n	8107456 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8107438:	687b      	ldr	r3, [r7, #4]
 810743a:	681b      	ldr	r3, [r3, #0]
 810743c:	68db      	ldr	r3, [r3, #12]
 810743e:	f003 0320 	and.w	r3, r3, #32
 8107442:	2b20      	cmp	r3, #32
 8107444:	d107      	bne.n	8107456 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8107446:	687b      	ldr	r3, [r7, #4]
 8107448:	681b      	ldr	r3, [r3, #0]
 810744a:	f06f 0220 	mvn.w	r2, #32
 810744e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8107450:	6878      	ldr	r0, [r7, #4]
 8107452:	f000 fd65 	bl	8107f20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8107456:	bf00      	nop
 8107458:	3708      	adds	r7, #8
 810745a:	46bd      	mov	sp, r7
 810745c:	bd80      	pop	{r7, pc}
	...

08107460 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8107460:	b580      	push	{r7, lr}
 8107462:	b086      	sub	sp, #24
 8107464:	af00      	add	r7, sp, #0
 8107466:	60f8      	str	r0, [r7, #12]
 8107468:	60b9      	str	r1, [r7, #8]
 810746a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810746c:	2300      	movs	r3, #0
 810746e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8107470:	68fb      	ldr	r3, [r7, #12]
 8107472:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8107476:	2b01      	cmp	r3, #1
 8107478:	d101      	bne.n	810747e <HAL_TIM_PWM_ConfigChannel+0x1e>
 810747a:	2302      	movs	r3, #2
 810747c:	e0ff      	b.n	810767e <HAL_TIM_PWM_ConfigChannel+0x21e>
 810747e:	68fb      	ldr	r3, [r7, #12]
 8107480:	2201      	movs	r2, #1
 8107482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8107486:	687b      	ldr	r3, [r7, #4]
 8107488:	2b14      	cmp	r3, #20
 810748a:	f200 80f0 	bhi.w	810766e <HAL_TIM_PWM_ConfigChannel+0x20e>
 810748e:	a201      	add	r2, pc, #4	; (adr r2, 8107494 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8107490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107494:	081074e9 	.word	0x081074e9
 8107498:	0810766f 	.word	0x0810766f
 810749c:	0810766f 	.word	0x0810766f
 81074a0:	0810766f 	.word	0x0810766f
 81074a4:	08107529 	.word	0x08107529
 81074a8:	0810766f 	.word	0x0810766f
 81074ac:	0810766f 	.word	0x0810766f
 81074b0:	0810766f 	.word	0x0810766f
 81074b4:	0810756b 	.word	0x0810756b
 81074b8:	0810766f 	.word	0x0810766f
 81074bc:	0810766f 	.word	0x0810766f
 81074c0:	0810766f 	.word	0x0810766f
 81074c4:	081075ab 	.word	0x081075ab
 81074c8:	0810766f 	.word	0x0810766f
 81074cc:	0810766f 	.word	0x0810766f
 81074d0:	0810766f 	.word	0x0810766f
 81074d4:	081075ed 	.word	0x081075ed
 81074d8:	0810766f 	.word	0x0810766f
 81074dc:	0810766f 	.word	0x0810766f
 81074e0:	0810766f 	.word	0x0810766f
 81074e4:	0810762d 	.word	0x0810762d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 81074e8:	68fb      	ldr	r3, [r7, #12]
 81074ea:	681b      	ldr	r3, [r3, #0]
 81074ec:	68b9      	ldr	r1, [r7, #8]
 81074ee:	4618      	mov	r0, r3
 81074f0:	f000 f98c 	bl	810780c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 81074f4:	68fb      	ldr	r3, [r7, #12]
 81074f6:	681b      	ldr	r3, [r3, #0]
 81074f8:	699a      	ldr	r2, [r3, #24]
 81074fa:	68fb      	ldr	r3, [r7, #12]
 81074fc:	681b      	ldr	r3, [r3, #0]
 81074fe:	f042 0208 	orr.w	r2, r2, #8
 8107502:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8107504:	68fb      	ldr	r3, [r7, #12]
 8107506:	681b      	ldr	r3, [r3, #0]
 8107508:	699a      	ldr	r2, [r3, #24]
 810750a:	68fb      	ldr	r3, [r7, #12]
 810750c:	681b      	ldr	r3, [r3, #0]
 810750e:	f022 0204 	bic.w	r2, r2, #4
 8107512:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8107514:	68fb      	ldr	r3, [r7, #12]
 8107516:	681b      	ldr	r3, [r3, #0]
 8107518:	6999      	ldr	r1, [r3, #24]
 810751a:	68bb      	ldr	r3, [r7, #8]
 810751c:	691a      	ldr	r2, [r3, #16]
 810751e:	68fb      	ldr	r3, [r7, #12]
 8107520:	681b      	ldr	r3, [r3, #0]
 8107522:	430a      	orrs	r2, r1
 8107524:	619a      	str	r2, [r3, #24]
      break;
 8107526:	e0a5      	b.n	8107674 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8107528:	68fb      	ldr	r3, [r7, #12]
 810752a:	681b      	ldr	r3, [r3, #0]
 810752c:	68b9      	ldr	r1, [r7, #8]
 810752e:	4618      	mov	r0, r3
 8107530:	f000 f9fc 	bl	810792c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8107534:	68fb      	ldr	r3, [r7, #12]
 8107536:	681b      	ldr	r3, [r3, #0]
 8107538:	699a      	ldr	r2, [r3, #24]
 810753a:	68fb      	ldr	r3, [r7, #12]
 810753c:	681b      	ldr	r3, [r3, #0]
 810753e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8107542:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8107544:	68fb      	ldr	r3, [r7, #12]
 8107546:	681b      	ldr	r3, [r3, #0]
 8107548:	699a      	ldr	r2, [r3, #24]
 810754a:	68fb      	ldr	r3, [r7, #12]
 810754c:	681b      	ldr	r3, [r3, #0]
 810754e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8107552:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8107554:	68fb      	ldr	r3, [r7, #12]
 8107556:	681b      	ldr	r3, [r3, #0]
 8107558:	6999      	ldr	r1, [r3, #24]
 810755a:	68bb      	ldr	r3, [r7, #8]
 810755c:	691b      	ldr	r3, [r3, #16]
 810755e:	021a      	lsls	r2, r3, #8
 8107560:	68fb      	ldr	r3, [r7, #12]
 8107562:	681b      	ldr	r3, [r3, #0]
 8107564:	430a      	orrs	r2, r1
 8107566:	619a      	str	r2, [r3, #24]
      break;
 8107568:	e084      	b.n	8107674 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 810756a:	68fb      	ldr	r3, [r7, #12]
 810756c:	681b      	ldr	r3, [r3, #0]
 810756e:	68b9      	ldr	r1, [r7, #8]
 8107570:	4618      	mov	r0, r3
 8107572:	f000 fa65 	bl	8107a40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8107576:	68fb      	ldr	r3, [r7, #12]
 8107578:	681b      	ldr	r3, [r3, #0]
 810757a:	69da      	ldr	r2, [r3, #28]
 810757c:	68fb      	ldr	r3, [r7, #12]
 810757e:	681b      	ldr	r3, [r3, #0]
 8107580:	f042 0208 	orr.w	r2, r2, #8
 8107584:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8107586:	68fb      	ldr	r3, [r7, #12]
 8107588:	681b      	ldr	r3, [r3, #0]
 810758a:	69da      	ldr	r2, [r3, #28]
 810758c:	68fb      	ldr	r3, [r7, #12]
 810758e:	681b      	ldr	r3, [r3, #0]
 8107590:	f022 0204 	bic.w	r2, r2, #4
 8107594:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8107596:	68fb      	ldr	r3, [r7, #12]
 8107598:	681b      	ldr	r3, [r3, #0]
 810759a:	69d9      	ldr	r1, [r3, #28]
 810759c:	68bb      	ldr	r3, [r7, #8]
 810759e:	691a      	ldr	r2, [r3, #16]
 81075a0:	68fb      	ldr	r3, [r7, #12]
 81075a2:	681b      	ldr	r3, [r3, #0]
 81075a4:	430a      	orrs	r2, r1
 81075a6:	61da      	str	r2, [r3, #28]
      break;
 81075a8:	e064      	b.n	8107674 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 81075aa:	68fb      	ldr	r3, [r7, #12]
 81075ac:	681b      	ldr	r3, [r3, #0]
 81075ae:	68b9      	ldr	r1, [r7, #8]
 81075b0:	4618      	mov	r0, r3
 81075b2:	f000 facd 	bl	8107b50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 81075b6:	68fb      	ldr	r3, [r7, #12]
 81075b8:	681b      	ldr	r3, [r3, #0]
 81075ba:	69da      	ldr	r2, [r3, #28]
 81075bc:	68fb      	ldr	r3, [r7, #12]
 81075be:	681b      	ldr	r3, [r3, #0]
 81075c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81075c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 81075c6:	68fb      	ldr	r3, [r7, #12]
 81075c8:	681b      	ldr	r3, [r3, #0]
 81075ca:	69da      	ldr	r2, [r3, #28]
 81075cc:	68fb      	ldr	r3, [r7, #12]
 81075ce:	681b      	ldr	r3, [r3, #0]
 81075d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 81075d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 81075d6:	68fb      	ldr	r3, [r7, #12]
 81075d8:	681b      	ldr	r3, [r3, #0]
 81075da:	69d9      	ldr	r1, [r3, #28]
 81075dc:	68bb      	ldr	r3, [r7, #8]
 81075de:	691b      	ldr	r3, [r3, #16]
 81075e0:	021a      	lsls	r2, r3, #8
 81075e2:	68fb      	ldr	r3, [r7, #12]
 81075e4:	681b      	ldr	r3, [r3, #0]
 81075e6:	430a      	orrs	r2, r1
 81075e8:	61da      	str	r2, [r3, #28]
      break;
 81075ea:	e043      	b.n	8107674 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 81075ec:	68fb      	ldr	r3, [r7, #12]
 81075ee:	681b      	ldr	r3, [r3, #0]
 81075f0:	68b9      	ldr	r1, [r7, #8]
 81075f2:	4618      	mov	r0, r3
 81075f4:	f000 fb16 	bl	8107c24 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 81075f8:	68fb      	ldr	r3, [r7, #12]
 81075fa:	681b      	ldr	r3, [r3, #0]
 81075fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 81075fe:	68fb      	ldr	r3, [r7, #12]
 8107600:	681b      	ldr	r3, [r3, #0]
 8107602:	f042 0208 	orr.w	r2, r2, #8
 8107606:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8107608:	68fb      	ldr	r3, [r7, #12]
 810760a:	681b      	ldr	r3, [r3, #0]
 810760c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810760e:	68fb      	ldr	r3, [r7, #12]
 8107610:	681b      	ldr	r3, [r3, #0]
 8107612:	f022 0204 	bic.w	r2, r2, #4
 8107616:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8107618:	68fb      	ldr	r3, [r7, #12]
 810761a:	681b      	ldr	r3, [r3, #0]
 810761c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 810761e:	68bb      	ldr	r3, [r7, #8]
 8107620:	691a      	ldr	r2, [r3, #16]
 8107622:	68fb      	ldr	r3, [r7, #12]
 8107624:	681b      	ldr	r3, [r3, #0]
 8107626:	430a      	orrs	r2, r1
 8107628:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 810762a:	e023      	b.n	8107674 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 810762c:	68fb      	ldr	r3, [r7, #12]
 810762e:	681b      	ldr	r3, [r3, #0]
 8107630:	68b9      	ldr	r1, [r7, #8]
 8107632:	4618      	mov	r0, r3
 8107634:	f000 fb5a 	bl	8107cec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8107638:	68fb      	ldr	r3, [r7, #12]
 810763a:	681b      	ldr	r3, [r3, #0]
 810763c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810763e:	68fb      	ldr	r3, [r7, #12]
 8107640:	681b      	ldr	r3, [r3, #0]
 8107642:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8107646:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8107648:	68fb      	ldr	r3, [r7, #12]
 810764a:	681b      	ldr	r3, [r3, #0]
 810764c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810764e:	68fb      	ldr	r3, [r7, #12]
 8107650:	681b      	ldr	r3, [r3, #0]
 8107652:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8107656:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8107658:	68fb      	ldr	r3, [r7, #12]
 810765a:	681b      	ldr	r3, [r3, #0]
 810765c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 810765e:	68bb      	ldr	r3, [r7, #8]
 8107660:	691b      	ldr	r3, [r3, #16]
 8107662:	021a      	lsls	r2, r3, #8
 8107664:	68fb      	ldr	r3, [r7, #12]
 8107666:	681b      	ldr	r3, [r3, #0]
 8107668:	430a      	orrs	r2, r1
 810766a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 810766c:	e002      	b.n	8107674 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 810766e:	2301      	movs	r3, #1
 8107670:	75fb      	strb	r3, [r7, #23]
      break;
 8107672:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8107674:	68fb      	ldr	r3, [r7, #12]
 8107676:	2200      	movs	r2, #0
 8107678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 810767c:	7dfb      	ldrb	r3, [r7, #23]
}
 810767e:	4618      	mov	r0, r3
 8107680:	3718      	adds	r7, #24
 8107682:	46bd      	mov	sp, r7
 8107684:	bd80      	pop	{r7, pc}
 8107686:	bf00      	nop

08107688 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8107688:	b480      	push	{r7}
 810768a:	b083      	sub	sp, #12
 810768c:	af00      	add	r7, sp, #0
 810768e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8107690:	bf00      	nop
 8107692:	370c      	adds	r7, #12
 8107694:	46bd      	mov	sp, r7
 8107696:	f85d 7b04 	ldr.w	r7, [sp], #4
 810769a:	4770      	bx	lr

0810769c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 810769c:	b480      	push	{r7}
 810769e:	b083      	sub	sp, #12
 81076a0:	af00      	add	r7, sp, #0
 81076a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 81076a4:	bf00      	nop
 81076a6:	370c      	adds	r7, #12
 81076a8:	46bd      	mov	sp, r7
 81076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81076ae:	4770      	bx	lr

081076b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 81076b0:	b480      	push	{r7}
 81076b2:	b083      	sub	sp, #12
 81076b4:	af00      	add	r7, sp, #0
 81076b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 81076b8:	bf00      	nop
 81076ba:	370c      	adds	r7, #12
 81076bc:	46bd      	mov	sp, r7
 81076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81076c2:	4770      	bx	lr

081076c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 81076c4:	b480      	push	{r7}
 81076c6:	b083      	sub	sp, #12
 81076c8:	af00      	add	r7, sp, #0
 81076ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 81076cc:	bf00      	nop
 81076ce:	370c      	adds	r7, #12
 81076d0:	46bd      	mov	sp, r7
 81076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81076d6:	4770      	bx	lr

081076d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 81076d8:	b480      	push	{r7}
 81076da:	b085      	sub	sp, #20
 81076dc:	af00      	add	r7, sp, #0
 81076de:	6078      	str	r0, [r7, #4]
 81076e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 81076e2:	687b      	ldr	r3, [r7, #4]
 81076e4:	681b      	ldr	r3, [r3, #0]
 81076e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 81076e8:	687b      	ldr	r3, [r7, #4]
 81076ea:	4a40      	ldr	r2, [pc, #256]	; (81077ec <TIM_Base_SetConfig+0x114>)
 81076ec:	4293      	cmp	r3, r2
 81076ee:	d013      	beq.n	8107718 <TIM_Base_SetConfig+0x40>
 81076f0:	687b      	ldr	r3, [r7, #4]
 81076f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81076f6:	d00f      	beq.n	8107718 <TIM_Base_SetConfig+0x40>
 81076f8:	687b      	ldr	r3, [r7, #4]
 81076fa:	4a3d      	ldr	r2, [pc, #244]	; (81077f0 <TIM_Base_SetConfig+0x118>)
 81076fc:	4293      	cmp	r3, r2
 81076fe:	d00b      	beq.n	8107718 <TIM_Base_SetConfig+0x40>
 8107700:	687b      	ldr	r3, [r7, #4]
 8107702:	4a3c      	ldr	r2, [pc, #240]	; (81077f4 <TIM_Base_SetConfig+0x11c>)
 8107704:	4293      	cmp	r3, r2
 8107706:	d007      	beq.n	8107718 <TIM_Base_SetConfig+0x40>
 8107708:	687b      	ldr	r3, [r7, #4]
 810770a:	4a3b      	ldr	r2, [pc, #236]	; (81077f8 <TIM_Base_SetConfig+0x120>)
 810770c:	4293      	cmp	r3, r2
 810770e:	d003      	beq.n	8107718 <TIM_Base_SetConfig+0x40>
 8107710:	687b      	ldr	r3, [r7, #4]
 8107712:	4a3a      	ldr	r2, [pc, #232]	; (81077fc <TIM_Base_SetConfig+0x124>)
 8107714:	4293      	cmp	r3, r2
 8107716:	d108      	bne.n	810772a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8107718:	68fb      	ldr	r3, [r7, #12]
 810771a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810771e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8107720:	683b      	ldr	r3, [r7, #0]
 8107722:	685b      	ldr	r3, [r3, #4]
 8107724:	68fa      	ldr	r2, [r7, #12]
 8107726:	4313      	orrs	r3, r2
 8107728:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810772a:	687b      	ldr	r3, [r7, #4]
 810772c:	4a2f      	ldr	r2, [pc, #188]	; (81077ec <TIM_Base_SetConfig+0x114>)
 810772e:	4293      	cmp	r3, r2
 8107730:	d01f      	beq.n	8107772 <TIM_Base_SetConfig+0x9a>
 8107732:	687b      	ldr	r3, [r7, #4]
 8107734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107738:	d01b      	beq.n	8107772 <TIM_Base_SetConfig+0x9a>
 810773a:	687b      	ldr	r3, [r7, #4]
 810773c:	4a2c      	ldr	r2, [pc, #176]	; (81077f0 <TIM_Base_SetConfig+0x118>)
 810773e:	4293      	cmp	r3, r2
 8107740:	d017      	beq.n	8107772 <TIM_Base_SetConfig+0x9a>
 8107742:	687b      	ldr	r3, [r7, #4]
 8107744:	4a2b      	ldr	r2, [pc, #172]	; (81077f4 <TIM_Base_SetConfig+0x11c>)
 8107746:	4293      	cmp	r3, r2
 8107748:	d013      	beq.n	8107772 <TIM_Base_SetConfig+0x9a>
 810774a:	687b      	ldr	r3, [r7, #4]
 810774c:	4a2a      	ldr	r2, [pc, #168]	; (81077f8 <TIM_Base_SetConfig+0x120>)
 810774e:	4293      	cmp	r3, r2
 8107750:	d00f      	beq.n	8107772 <TIM_Base_SetConfig+0x9a>
 8107752:	687b      	ldr	r3, [r7, #4]
 8107754:	4a29      	ldr	r2, [pc, #164]	; (81077fc <TIM_Base_SetConfig+0x124>)
 8107756:	4293      	cmp	r3, r2
 8107758:	d00b      	beq.n	8107772 <TIM_Base_SetConfig+0x9a>
 810775a:	687b      	ldr	r3, [r7, #4]
 810775c:	4a28      	ldr	r2, [pc, #160]	; (8107800 <TIM_Base_SetConfig+0x128>)
 810775e:	4293      	cmp	r3, r2
 8107760:	d007      	beq.n	8107772 <TIM_Base_SetConfig+0x9a>
 8107762:	687b      	ldr	r3, [r7, #4]
 8107764:	4a27      	ldr	r2, [pc, #156]	; (8107804 <TIM_Base_SetConfig+0x12c>)
 8107766:	4293      	cmp	r3, r2
 8107768:	d003      	beq.n	8107772 <TIM_Base_SetConfig+0x9a>
 810776a:	687b      	ldr	r3, [r7, #4]
 810776c:	4a26      	ldr	r2, [pc, #152]	; (8107808 <TIM_Base_SetConfig+0x130>)
 810776e:	4293      	cmp	r3, r2
 8107770:	d108      	bne.n	8107784 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8107772:	68fb      	ldr	r3, [r7, #12]
 8107774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8107778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810777a:	683b      	ldr	r3, [r7, #0]
 810777c:	68db      	ldr	r3, [r3, #12]
 810777e:	68fa      	ldr	r2, [r7, #12]
 8107780:	4313      	orrs	r3, r2
 8107782:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8107784:	68fb      	ldr	r3, [r7, #12]
 8107786:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 810778a:	683b      	ldr	r3, [r7, #0]
 810778c:	695b      	ldr	r3, [r3, #20]
 810778e:	4313      	orrs	r3, r2
 8107790:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8107792:	687b      	ldr	r3, [r7, #4]
 8107794:	68fa      	ldr	r2, [r7, #12]
 8107796:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8107798:	683b      	ldr	r3, [r7, #0]
 810779a:	689a      	ldr	r2, [r3, #8]
 810779c:	687b      	ldr	r3, [r7, #4]
 810779e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 81077a0:	683b      	ldr	r3, [r7, #0]
 81077a2:	681a      	ldr	r2, [r3, #0]
 81077a4:	687b      	ldr	r3, [r7, #4]
 81077a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 81077a8:	687b      	ldr	r3, [r7, #4]
 81077aa:	4a10      	ldr	r2, [pc, #64]	; (81077ec <TIM_Base_SetConfig+0x114>)
 81077ac:	4293      	cmp	r3, r2
 81077ae:	d00f      	beq.n	81077d0 <TIM_Base_SetConfig+0xf8>
 81077b0:	687b      	ldr	r3, [r7, #4]
 81077b2:	4a12      	ldr	r2, [pc, #72]	; (81077fc <TIM_Base_SetConfig+0x124>)
 81077b4:	4293      	cmp	r3, r2
 81077b6:	d00b      	beq.n	81077d0 <TIM_Base_SetConfig+0xf8>
 81077b8:	687b      	ldr	r3, [r7, #4]
 81077ba:	4a11      	ldr	r2, [pc, #68]	; (8107800 <TIM_Base_SetConfig+0x128>)
 81077bc:	4293      	cmp	r3, r2
 81077be:	d007      	beq.n	81077d0 <TIM_Base_SetConfig+0xf8>
 81077c0:	687b      	ldr	r3, [r7, #4]
 81077c2:	4a10      	ldr	r2, [pc, #64]	; (8107804 <TIM_Base_SetConfig+0x12c>)
 81077c4:	4293      	cmp	r3, r2
 81077c6:	d003      	beq.n	81077d0 <TIM_Base_SetConfig+0xf8>
 81077c8:	687b      	ldr	r3, [r7, #4]
 81077ca:	4a0f      	ldr	r2, [pc, #60]	; (8107808 <TIM_Base_SetConfig+0x130>)
 81077cc:	4293      	cmp	r3, r2
 81077ce:	d103      	bne.n	81077d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 81077d0:	683b      	ldr	r3, [r7, #0]
 81077d2:	691a      	ldr	r2, [r3, #16]
 81077d4:	687b      	ldr	r3, [r7, #4]
 81077d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 81077d8:	687b      	ldr	r3, [r7, #4]
 81077da:	2201      	movs	r2, #1
 81077dc:	615a      	str	r2, [r3, #20]
}
 81077de:	bf00      	nop
 81077e0:	3714      	adds	r7, #20
 81077e2:	46bd      	mov	sp, r7
 81077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81077e8:	4770      	bx	lr
 81077ea:	bf00      	nop
 81077ec:	40010000 	.word	0x40010000
 81077f0:	40000400 	.word	0x40000400
 81077f4:	40000800 	.word	0x40000800
 81077f8:	40000c00 	.word	0x40000c00
 81077fc:	40010400 	.word	0x40010400
 8107800:	40014000 	.word	0x40014000
 8107804:	40014400 	.word	0x40014400
 8107808:	40014800 	.word	0x40014800

0810780c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810780c:	b480      	push	{r7}
 810780e:	b087      	sub	sp, #28
 8107810:	af00      	add	r7, sp, #0
 8107812:	6078      	str	r0, [r7, #4]
 8107814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8107816:	687b      	ldr	r3, [r7, #4]
 8107818:	6a1b      	ldr	r3, [r3, #32]
 810781a:	f023 0201 	bic.w	r2, r3, #1
 810781e:	687b      	ldr	r3, [r7, #4]
 8107820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107822:	687b      	ldr	r3, [r7, #4]
 8107824:	6a1b      	ldr	r3, [r3, #32]
 8107826:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107828:	687b      	ldr	r3, [r7, #4]
 810782a:	685b      	ldr	r3, [r3, #4]
 810782c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810782e:	687b      	ldr	r3, [r7, #4]
 8107830:	699b      	ldr	r3, [r3, #24]
 8107832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8107834:	68fb      	ldr	r3, [r7, #12]
 8107836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810783a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810783e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8107840:	68fb      	ldr	r3, [r7, #12]
 8107842:	f023 0303 	bic.w	r3, r3, #3
 8107846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8107848:	683b      	ldr	r3, [r7, #0]
 810784a:	681b      	ldr	r3, [r3, #0]
 810784c:	68fa      	ldr	r2, [r7, #12]
 810784e:	4313      	orrs	r3, r2
 8107850:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8107852:	697b      	ldr	r3, [r7, #20]
 8107854:	f023 0302 	bic.w	r3, r3, #2
 8107858:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 810785a:	683b      	ldr	r3, [r7, #0]
 810785c:	689b      	ldr	r3, [r3, #8]
 810785e:	697a      	ldr	r2, [r7, #20]
 8107860:	4313      	orrs	r3, r2
 8107862:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8107864:	687b      	ldr	r3, [r7, #4]
 8107866:	4a2c      	ldr	r2, [pc, #176]	; (8107918 <TIM_OC1_SetConfig+0x10c>)
 8107868:	4293      	cmp	r3, r2
 810786a:	d00f      	beq.n	810788c <TIM_OC1_SetConfig+0x80>
 810786c:	687b      	ldr	r3, [r7, #4]
 810786e:	4a2b      	ldr	r2, [pc, #172]	; (810791c <TIM_OC1_SetConfig+0x110>)
 8107870:	4293      	cmp	r3, r2
 8107872:	d00b      	beq.n	810788c <TIM_OC1_SetConfig+0x80>
 8107874:	687b      	ldr	r3, [r7, #4]
 8107876:	4a2a      	ldr	r2, [pc, #168]	; (8107920 <TIM_OC1_SetConfig+0x114>)
 8107878:	4293      	cmp	r3, r2
 810787a:	d007      	beq.n	810788c <TIM_OC1_SetConfig+0x80>
 810787c:	687b      	ldr	r3, [r7, #4]
 810787e:	4a29      	ldr	r2, [pc, #164]	; (8107924 <TIM_OC1_SetConfig+0x118>)
 8107880:	4293      	cmp	r3, r2
 8107882:	d003      	beq.n	810788c <TIM_OC1_SetConfig+0x80>
 8107884:	687b      	ldr	r3, [r7, #4]
 8107886:	4a28      	ldr	r2, [pc, #160]	; (8107928 <TIM_OC1_SetConfig+0x11c>)
 8107888:	4293      	cmp	r3, r2
 810788a:	d10c      	bne.n	81078a6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 810788c:	697b      	ldr	r3, [r7, #20]
 810788e:	f023 0308 	bic.w	r3, r3, #8
 8107892:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8107894:	683b      	ldr	r3, [r7, #0]
 8107896:	68db      	ldr	r3, [r3, #12]
 8107898:	697a      	ldr	r2, [r7, #20]
 810789a:	4313      	orrs	r3, r2
 810789c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 810789e:	697b      	ldr	r3, [r7, #20]
 81078a0:	f023 0304 	bic.w	r3, r3, #4
 81078a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81078a6:	687b      	ldr	r3, [r7, #4]
 81078a8:	4a1b      	ldr	r2, [pc, #108]	; (8107918 <TIM_OC1_SetConfig+0x10c>)
 81078aa:	4293      	cmp	r3, r2
 81078ac:	d00f      	beq.n	81078ce <TIM_OC1_SetConfig+0xc2>
 81078ae:	687b      	ldr	r3, [r7, #4]
 81078b0:	4a1a      	ldr	r2, [pc, #104]	; (810791c <TIM_OC1_SetConfig+0x110>)
 81078b2:	4293      	cmp	r3, r2
 81078b4:	d00b      	beq.n	81078ce <TIM_OC1_SetConfig+0xc2>
 81078b6:	687b      	ldr	r3, [r7, #4]
 81078b8:	4a19      	ldr	r2, [pc, #100]	; (8107920 <TIM_OC1_SetConfig+0x114>)
 81078ba:	4293      	cmp	r3, r2
 81078bc:	d007      	beq.n	81078ce <TIM_OC1_SetConfig+0xc2>
 81078be:	687b      	ldr	r3, [r7, #4]
 81078c0:	4a18      	ldr	r2, [pc, #96]	; (8107924 <TIM_OC1_SetConfig+0x118>)
 81078c2:	4293      	cmp	r3, r2
 81078c4:	d003      	beq.n	81078ce <TIM_OC1_SetConfig+0xc2>
 81078c6:	687b      	ldr	r3, [r7, #4]
 81078c8:	4a17      	ldr	r2, [pc, #92]	; (8107928 <TIM_OC1_SetConfig+0x11c>)
 81078ca:	4293      	cmp	r3, r2
 81078cc:	d111      	bne.n	81078f2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 81078ce:	693b      	ldr	r3, [r7, #16]
 81078d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81078d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 81078d6:	693b      	ldr	r3, [r7, #16]
 81078d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 81078dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 81078de:	683b      	ldr	r3, [r7, #0]
 81078e0:	695b      	ldr	r3, [r3, #20]
 81078e2:	693a      	ldr	r2, [r7, #16]
 81078e4:	4313      	orrs	r3, r2
 81078e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 81078e8:	683b      	ldr	r3, [r7, #0]
 81078ea:	699b      	ldr	r3, [r3, #24]
 81078ec:	693a      	ldr	r2, [r7, #16]
 81078ee:	4313      	orrs	r3, r2
 81078f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81078f2:	687b      	ldr	r3, [r7, #4]
 81078f4:	693a      	ldr	r2, [r7, #16]
 81078f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 81078f8:	687b      	ldr	r3, [r7, #4]
 81078fa:	68fa      	ldr	r2, [r7, #12]
 81078fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 81078fe:	683b      	ldr	r3, [r7, #0]
 8107900:	685a      	ldr	r2, [r3, #4]
 8107902:	687b      	ldr	r3, [r7, #4]
 8107904:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107906:	687b      	ldr	r3, [r7, #4]
 8107908:	697a      	ldr	r2, [r7, #20]
 810790a:	621a      	str	r2, [r3, #32]
}
 810790c:	bf00      	nop
 810790e:	371c      	adds	r7, #28
 8107910:	46bd      	mov	sp, r7
 8107912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107916:	4770      	bx	lr
 8107918:	40010000 	.word	0x40010000
 810791c:	40010400 	.word	0x40010400
 8107920:	40014000 	.word	0x40014000
 8107924:	40014400 	.word	0x40014400
 8107928:	40014800 	.word	0x40014800

0810792c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810792c:	b480      	push	{r7}
 810792e:	b087      	sub	sp, #28
 8107930:	af00      	add	r7, sp, #0
 8107932:	6078      	str	r0, [r7, #4]
 8107934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8107936:	687b      	ldr	r3, [r7, #4]
 8107938:	6a1b      	ldr	r3, [r3, #32]
 810793a:	f023 0210 	bic.w	r2, r3, #16
 810793e:	687b      	ldr	r3, [r7, #4]
 8107940:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107942:	687b      	ldr	r3, [r7, #4]
 8107944:	6a1b      	ldr	r3, [r3, #32]
 8107946:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107948:	687b      	ldr	r3, [r7, #4]
 810794a:	685b      	ldr	r3, [r3, #4]
 810794c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810794e:	687b      	ldr	r3, [r7, #4]
 8107950:	699b      	ldr	r3, [r3, #24]
 8107952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8107954:	68fb      	ldr	r3, [r7, #12]
 8107956:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810795a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810795e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8107960:	68fb      	ldr	r3, [r7, #12]
 8107962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8107966:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8107968:	683b      	ldr	r3, [r7, #0]
 810796a:	681b      	ldr	r3, [r3, #0]
 810796c:	021b      	lsls	r3, r3, #8
 810796e:	68fa      	ldr	r2, [r7, #12]
 8107970:	4313      	orrs	r3, r2
 8107972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8107974:	697b      	ldr	r3, [r7, #20]
 8107976:	f023 0320 	bic.w	r3, r3, #32
 810797a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 810797c:	683b      	ldr	r3, [r7, #0]
 810797e:	689b      	ldr	r3, [r3, #8]
 8107980:	011b      	lsls	r3, r3, #4
 8107982:	697a      	ldr	r2, [r7, #20]
 8107984:	4313      	orrs	r3, r2
 8107986:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8107988:	687b      	ldr	r3, [r7, #4]
 810798a:	4a28      	ldr	r2, [pc, #160]	; (8107a2c <TIM_OC2_SetConfig+0x100>)
 810798c:	4293      	cmp	r3, r2
 810798e:	d003      	beq.n	8107998 <TIM_OC2_SetConfig+0x6c>
 8107990:	687b      	ldr	r3, [r7, #4]
 8107992:	4a27      	ldr	r2, [pc, #156]	; (8107a30 <TIM_OC2_SetConfig+0x104>)
 8107994:	4293      	cmp	r3, r2
 8107996:	d10d      	bne.n	81079b4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8107998:	697b      	ldr	r3, [r7, #20]
 810799a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810799e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 81079a0:	683b      	ldr	r3, [r7, #0]
 81079a2:	68db      	ldr	r3, [r3, #12]
 81079a4:	011b      	lsls	r3, r3, #4
 81079a6:	697a      	ldr	r2, [r7, #20]
 81079a8:	4313      	orrs	r3, r2
 81079aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 81079ac:	697b      	ldr	r3, [r7, #20]
 81079ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 81079b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81079b4:	687b      	ldr	r3, [r7, #4]
 81079b6:	4a1d      	ldr	r2, [pc, #116]	; (8107a2c <TIM_OC2_SetConfig+0x100>)
 81079b8:	4293      	cmp	r3, r2
 81079ba:	d00f      	beq.n	81079dc <TIM_OC2_SetConfig+0xb0>
 81079bc:	687b      	ldr	r3, [r7, #4]
 81079be:	4a1c      	ldr	r2, [pc, #112]	; (8107a30 <TIM_OC2_SetConfig+0x104>)
 81079c0:	4293      	cmp	r3, r2
 81079c2:	d00b      	beq.n	81079dc <TIM_OC2_SetConfig+0xb0>
 81079c4:	687b      	ldr	r3, [r7, #4]
 81079c6:	4a1b      	ldr	r2, [pc, #108]	; (8107a34 <TIM_OC2_SetConfig+0x108>)
 81079c8:	4293      	cmp	r3, r2
 81079ca:	d007      	beq.n	81079dc <TIM_OC2_SetConfig+0xb0>
 81079cc:	687b      	ldr	r3, [r7, #4]
 81079ce:	4a1a      	ldr	r2, [pc, #104]	; (8107a38 <TIM_OC2_SetConfig+0x10c>)
 81079d0:	4293      	cmp	r3, r2
 81079d2:	d003      	beq.n	81079dc <TIM_OC2_SetConfig+0xb0>
 81079d4:	687b      	ldr	r3, [r7, #4]
 81079d6:	4a19      	ldr	r2, [pc, #100]	; (8107a3c <TIM_OC2_SetConfig+0x110>)
 81079d8:	4293      	cmp	r3, r2
 81079da:	d113      	bne.n	8107a04 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 81079dc:	693b      	ldr	r3, [r7, #16]
 81079de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 81079e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 81079e4:	693b      	ldr	r3, [r7, #16]
 81079e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 81079ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 81079ec:	683b      	ldr	r3, [r7, #0]
 81079ee:	695b      	ldr	r3, [r3, #20]
 81079f0:	009b      	lsls	r3, r3, #2
 81079f2:	693a      	ldr	r2, [r7, #16]
 81079f4:	4313      	orrs	r3, r2
 81079f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 81079f8:	683b      	ldr	r3, [r7, #0]
 81079fa:	699b      	ldr	r3, [r3, #24]
 81079fc:	009b      	lsls	r3, r3, #2
 81079fe:	693a      	ldr	r2, [r7, #16]
 8107a00:	4313      	orrs	r3, r2
 8107a02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107a04:	687b      	ldr	r3, [r7, #4]
 8107a06:	693a      	ldr	r2, [r7, #16]
 8107a08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8107a0a:	687b      	ldr	r3, [r7, #4]
 8107a0c:	68fa      	ldr	r2, [r7, #12]
 8107a0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8107a10:	683b      	ldr	r3, [r7, #0]
 8107a12:	685a      	ldr	r2, [r3, #4]
 8107a14:	687b      	ldr	r3, [r7, #4]
 8107a16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107a18:	687b      	ldr	r3, [r7, #4]
 8107a1a:	697a      	ldr	r2, [r7, #20]
 8107a1c:	621a      	str	r2, [r3, #32]
}
 8107a1e:	bf00      	nop
 8107a20:	371c      	adds	r7, #28
 8107a22:	46bd      	mov	sp, r7
 8107a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a28:	4770      	bx	lr
 8107a2a:	bf00      	nop
 8107a2c:	40010000 	.word	0x40010000
 8107a30:	40010400 	.word	0x40010400
 8107a34:	40014000 	.word	0x40014000
 8107a38:	40014400 	.word	0x40014400
 8107a3c:	40014800 	.word	0x40014800

08107a40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8107a40:	b480      	push	{r7}
 8107a42:	b087      	sub	sp, #28
 8107a44:	af00      	add	r7, sp, #0
 8107a46:	6078      	str	r0, [r7, #4]
 8107a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8107a4a:	687b      	ldr	r3, [r7, #4]
 8107a4c:	6a1b      	ldr	r3, [r3, #32]
 8107a4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8107a52:	687b      	ldr	r3, [r7, #4]
 8107a54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107a56:	687b      	ldr	r3, [r7, #4]
 8107a58:	6a1b      	ldr	r3, [r3, #32]
 8107a5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107a5c:	687b      	ldr	r3, [r7, #4]
 8107a5e:	685b      	ldr	r3, [r3, #4]
 8107a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8107a62:	687b      	ldr	r3, [r7, #4]
 8107a64:	69db      	ldr	r3, [r3, #28]
 8107a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8107a68:	68fb      	ldr	r3, [r7, #12]
 8107a6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8107a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8107a74:	68fb      	ldr	r3, [r7, #12]
 8107a76:	f023 0303 	bic.w	r3, r3, #3
 8107a7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8107a7c:	683b      	ldr	r3, [r7, #0]
 8107a7e:	681b      	ldr	r3, [r3, #0]
 8107a80:	68fa      	ldr	r2, [r7, #12]
 8107a82:	4313      	orrs	r3, r2
 8107a84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8107a86:	697b      	ldr	r3, [r7, #20]
 8107a88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8107a8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8107a8e:	683b      	ldr	r3, [r7, #0]
 8107a90:	689b      	ldr	r3, [r3, #8]
 8107a92:	021b      	lsls	r3, r3, #8
 8107a94:	697a      	ldr	r2, [r7, #20]
 8107a96:	4313      	orrs	r3, r2
 8107a98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8107a9a:	687b      	ldr	r3, [r7, #4]
 8107a9c:	4a27      	ldr	r2, [pc, #156]	; (8107b3c <TIM_OC3_SetConfig+0xfc>)
 8107a9e:	4293      	cmp	r3, r2
 8107aa0:	d003      	beq.n	8107aaa <TIM_OC3_SetConfig+0x6a>
 8107aa2:	687b      	ldr	r3, [r7, #4]
 8107aa4:	4a26      	ldr	r2, [pc, #152]	; (8107b40 <TIM_OC3_SetConfig+0x100>)
 8107aa6:	4293      	cmp	r3, r2
 8107aa8:	d10d      	bne.n	8107ac6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8107aaa:	697b      	ldr	r3, [r7, #20]
 8107aac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8107ab0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8107ab2:	683b      	ldr	r3, [r7, #0]
 8107ab4:	68db      	ldr	r3, [r3, #12]
 8107ab6:	021b      	lsls	r3, r3, #8
 8107ab8:	697a      	ldr	r2, [r7, #20]
 8107aba:	4313      	orrs	r3, r2
 8107abc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8107abe:	697b      	ldr	r3, [r7, #20]
 8107ac0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8107ac4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107ac6:	687b      	ldr	r3, [r7, #4]
 8107ac8:	4a1c      	ldr	r2, [pc, #112]	; (8107b3c <TIM_OC3_SetConfig+0xfc>)
 8107aca:	4293      	cmp	r3, r2
 8107acc:	d00f      	beq.n	8107aee <TIM_OC3_SetConfig+0xae>
 8107ace:	687b      	ldr	r3, [r7, #4]
 8107ad0:	4a1b      	ldr	r2, [pc, #108]	; (8107b40 <TIM_OC3_SetConfig+0x100>)
 8107ad2:	4293      	cmp	r3, r2
 8107ad4:	d00b      	beq.n	8107aee <TIM_OC3_SetConfig+0xae>
 8107ad6:	687b      	ldr	r3, [r7, #4]
 8107ad8:	4a1a      	ldr	r2, [pc, #104]	; (8107b44 <TIM_OC3_SetConfig+0x104>)
 8107ada:	4293      	cmp	r3, r2
 8107adc:	d007      	beq.n	8107aee <TIM_OC3_SetConfig+0xae>
 8107ade:	687b      	ldr	r3, [r7, #4]
 8107ae0:	4a19      	ldr	r2, [pc, #100]	; (8107b48 <TIM_OC3_SetConfig+0x108>)
 8107ae2:	4293      	cmp	r3, r2
 8107ae4:	d003      	beq.n	8107aee <TIM_OC3_SetConfig+0xae>
 8107ae6:	687b      	ldr	r3, [r7, #4]
 8107ae8:	4a18      	ldr	r2, [pc, #96]	; (8107b4c <TIM_OC3_SetConfig+0x10c>)
 8107aea:	4293      	cmp	r3, r2
 8107aec:	d113      	bne.n	8107b16 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8107aee:	693b      	ldr	r3, [r7, #16]
 8107af0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8107af4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8107af6:	693b      	ldr	r3, [r7, #16]
 8107af8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8107afc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8107afe:	683b      	ldr	r3, [r7, #0]
 8107b00:	695b      	ldr	r3, [r3, #20]
 8107b02:	011b      	lsls	r3, r3, #4
 8107b04:	693a      	ldr	r2, [r7, #16]
 8107b06:	4313      	orrs	r3, r2
 8107b08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8107b0a:	683b      	ldr	r3, [r7, #0]
 8107b0c:	699b      	ldr	r3, [r3, #24]
 8107b0e:	011b      	lsls	r3, r3, #4
 8107b10:	693a      	ldr	r2, [r7, #16]
 8107b12:	4313      	orrs	r3, r2
 8107b14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107b16:	687b      	ldr	r3, [r7, #4]
 8107b18:	693a      	ldr	r2, [r7, #16]
 8107b1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8107b1c:	687b      	ldr	r3, [r7, #4]
 8107b1e:	68fa      	ldr	r2, [r7, #12]
 8107b20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8107b22:	683b      	ldr	r3, [r7, #0]
 8107b24:	685a      	ldr	r2, [r3, #4]
 8107b26:	687b      	ldr	r3, [r7, #4]
 8107b28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107b2a:	687b      	ldr	r3, [r7, #4]
 8107b2c:	697a      	ldr	r2, [r7, #20]
 8107b2e:	621a      	str	r2, [r3, #32]
}
 8107b30:	bf00      	nop
 8107b32:	371c      	adds	r7, #28
 8107b34:	46bd      	mov	sp, r7
 8107b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b3a:	4770      	bx	lr
 8107b3c:	40010000 	.word	0x40010000
 8107b40:	40010400 	.word	0x40010400
 8107b44:	40014000 	.word	0x40014000
 8107b48:	40014400 	.word	0x40014400
 8107b4c:	40014800 	.word	0x40014800

08107b50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8107b50:	b480      	push	{r7}
 8107b52:	b087      	sub	sp, #28
 8107b54:	af00      	add	r7, sp, #0
 8107b56:	6078      	str	r0, [r7, #4]
 8107b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8107b5a:	687b      	ldr	r3, [r7, #4]
 8107b5c:	6a1b      	ldr	r3, [r3, #32]
 8107b5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8107b62:	687b      	ldr	r3, [r7, #4]
 8107b64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107b66:	687b      	ldr	r3, [r7, #4]
 8107b68:	6a1b      	ldr	r3, [r3, #32]
 8107b6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107b6c:	687b      	ldr	r3, [r7, #4]
 8107b6e:	685b      	ldr	r3, [r3, #4]
 8107b70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8107b72:	687b      	ldr	r3, [r7, #4]
 8107b74:	69db      	ldr	r3, [r3, #28]
 8107b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8107b78:	68fb      	ldr	r3, [r7, #12]
 8107b7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8107b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8107b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8107b84:	68fb      	ldr	r3, [r7, #12]
 8107b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8107b8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8107b8c:	683b      	ldr	r3, [r7, #0]
 8107b8e:	681b      	ldr	r3, [r3, #0]
 8107b90:	021b      	lsls	r3, r3, #8
 8107b92:	68fa      	ldr	r2, [r7, #12]
 8107b94:	4313      	orrs	r3, r2
 8107b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8107b98:	693b      	ldr	r3, [r7, #16]
 8107b9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8107b9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8107ba0:	683b      	ldr	r3, [r7, #0]
 8107ba2:	689b      	ldr	r3, [r3, #8]
 8107ba4:	031b      	lsls	r3, r3, #12
 8107ba6:	693a      	ldr	r2, [r7, #16]
 8107ba8:	4313      	orrs	r3, r2
 8107baa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107bac:	687b      	ldr	r3, [r7, #4]
 8107bae:	4a18      	ldr	r2, [pc, #96]	; (8107c10 <TIM_OC4_SetConfig+0xc0>)
 8107bb0:	4293      	cmp	r3, r2
 8107bb2:	d00f      	beq.n	8107bd4 <TIM_OC4_SetConfig+0x84>
 8107bb4:	687b      	ldr	r3, [r7, #4]
 8107bb6:	4a17      	ldr	r2, [pc, #92]	; (8107c14 <TIM_OC4_SetConfig+0xc4>)
 8107bb8:	4293      	cmp	r3, r2
 8107bba:	d00b      	beq.n	8107bd4 <TIM_OC4_SetConfig+0x84>
 8107bbc:	687b      	ldr	r3, [r7, #4]
 8107bbe:	4a16      	ldr	r2, [pc, #88]	; (8107c18 <TIM_OC4_SetConfig+0xc8>)
 8107bc0:	4293      	cmp	r3, r2
 8107bc2:	d007      	beq.n	8107bd4 <TIM_OC4_SetConfig+0x84>
 8107bc4:	687b      	ldr	r3, [r7, #4]
 8107bc6:	4a15      	ldr	r2, [pc, #84]	; (8107c1c <TIM_OC4_SetConfig+0xcc>)
 8107bc8:	4293      	cmp	r3, r2
 8107bca:	d003      	beq.n	8107bd4 <TIM_OC4_SetConfig+0x84>
 8107bcc:	687b      	ldr	r3, [r7, #4]
 8107bce:	4a14      	ldr	r2, [pc, #80]	; (8107c20 <TIM_OC4_SetConfig+0xd0>)
 8107bd0:	4293      	cmp	r3, r2
 8107bd2:	d109      	bne.n	8107be8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8107bd4:	697b      	ldr	r3, [r7, #20]
 8107bd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8107bda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8107bdc:	683b      	ldr	r3, [r7, #0]
 8107bde:	695b      	ldr	r3, [r3, #20]
 8107be0:	019b      	lsls	r3, r3, #6
 8107be2:	697a      	ldr	r2, [r7, #20]
 8107be4:	4313      	orrs	r3, r2
 8107be6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107be8:	687b      	ldr	r3, [r7, #4]
 8107bea:	697a      	ldr	r2, [r7, #20]
 8107bec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8107bee:	687b      	ldr	r3, [r7, #4]
 8107bf0:	68fa      	ldr	r2, [r7, #12]
 8107bf2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8107bf4:	683b      	ldr	r3, [r7, #0]
 8107bf6:	685a      	ldr	r2, [r3, #4]
 8107bf8:	687b      	ldr	r3, [r7, #4]
 8107bfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107bfc:	687b      	ldr	r3, [r7, #4]
 8107bfe:	693a      	ldr	r2, [r7, #16]
 8107c00:	621a      	str	r2, [r3, #32]
}
 8107c02:	bf00      	nop
 8107c04:	371c      	adds	r7, #28
 8107c06:	46bd      	mov	sp, r7
 8107c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107c0c:	4770      	bx	lr
 8107c0e:	bf00      	nop
 8107c10:	40010000 	.word	0x40010000
 8107c14:	40010400 	.word	0x40010400
 8107c18:	40014000 	.word	0x40014000
 8107c1c:	40014400 	.word	0x40014400
 8107c20:	40014800 	.word	0x40014800

08107c24 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8107c24:	b480      	push	{r7}
 8107c26:	b087      	sub	sp, #28
 8107c28:	af00      	add	r7, sp, #0
 8107c2a:	6078      	str	r0, [r7, #4]
 8107c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8107c2e:	687b      	ldr	r3, [r7, #4]
 8107c30:	6a1b      	ldr	r3, [r3, #32]
 8107c32:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8107c36:	687b      	ldr	r3, [r7, #4]
 8107c38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107c3a:	687b      	ldr	r3, [r7, #4]
 8107c3c:	6a1b      	ldr	r3, [r3, #32]
 8107c3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107c40:	687b      	ldr	r3, [r7, #4]
 8107c42:	685b      	ldr	r3, [r3, #4]
 8107c44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8107c46:	687b      	ldr	r3, [r7, #4]
 8107c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8107c4c:	68fb      	ldr	r3, [r7, #12]
 8107c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8107c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107c56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8107c58:	683b      	ldr	r3, [r7, #0]
 8107c5a:	681b      	ldr	r3, [r3, #0]
 8107c5c:	68fa      	ldr	r2, [r7, #12]
 8107c5e:	4313      	orrs	r3, r2
 8107c60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8107c62:	693b      	ldr	r3, [r7, #16]
 8107c64:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8107c68:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8107c6a:	683b      	ldr	r3, [r7, #0]
 8107c6c:	689b      	ldr	r3, [r3, #8]
 8107c6e:	041b      	lsls	r3, r3, #16
 8107c70:	693a      	ldr	r2, [r7, #16]
 8107c72:	4313      	orrs	r3, r2
 8107c74:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107c76:	687b      	ldr	r3, [r7, #4]
 8107c78:	4a17      	ldr	r2, [pc, #92]	; (8107cd8 <TIM_OC5_SetConfig+0xb4>)
 8107c7a:	4293      	cmp	r3, r2
 8107c7c:	d00f      	beq.n	8107c9e <TIM_OC5_SetConfig+0x7a>
 8107c7e:	687b      	ldr	r3, [r7, #4]
 8107c80:	4a16      	ldr	r2, [pc, #88]	; (8107cdc <TIM_OC5_SetConfig+0xb8>)
 8107c82:	4293      	cmp	r3, r2
 8107c84:	d00b      	beq.n	8107c9e <TIM_OC5_SetConfig+0x7a>
 8107c86:	687b      	ldr	r3, [r7, #4]
 8107c88:	4a15      	ldr	r2, [pc, #84]	; (8107ce0 <TIM_OC5_SetConfig+0xbc>)
 8107c8a:	4293      	cmp	r3, r2
 8107c8c:	d007      	beq.n	8107c9e <TIM_OC5_SetConfig+0x7a>
 8107c8e:	687b      	ldr	r3, [r7, #4]
 8107c90:	4a14      	ldr	r2, [pc, #80]	; (8107ce4 <TIM_OC5_SetConfig+0xc0>)
 8107c92:	4293      	cmp	r3, r2
 8107c94:	d003      	beq.n	8107c9e <TIM_OC5_SetConfig+0x7a>
 8107c96:	687b      	ldr	r3, [r7, #4]
 8107c98:	4a13      	ldr	r2, [pc, #76]	; (8107ce8 <TIM_OC5_SetConfig+0xc4>)
 8107c9a:	4293      	cmp	r3, r2
 8107c9c:	d109      	bne.n	8107cb2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8107c9e:	697b      	ldr	r3, [r7, #20]
 8107ca0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8107ca4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8107ca6:	683b      	ldr	r3, [r7, #0]
 8107ca8:	695b      	ldr	r3, [r3, #20]
 8107caa:	021b      	lsls	r3, r3, #8
 8107cac:	697a      	ldr	r2, [r7, #20]
 8107cae:	4313      	orrs	r3, r2
 8107cb0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107cb2:	687b      	ldr	r3, [r7, #4]
 8107cb4:	697a      	ldr	r2, [r7, #20]
 8107cb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8107cb8:	687b      	ldr	r3, [r7, #4]
 8107cba:	68fa      	ldr	r2, [r7, #12]
 8107cbc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8107cbe:	683b      	ldr	r3, [r7, #0]
 8107cc0:	685a      	ldr	r2, [r3, #4]
 8107cc2:	687b      	ldr	r3, [r7, #4]
 8107cc4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107cc6:	687b      	ldr	r3, [r7, #4]
 8107cc8:	693a      	ldr	r2, [r7, #16]
 8107cca:	621a      	str	r2, [r3, #32]
}
 8107ccc:	bf00      	nop
 8107cce:	371c      	adds	r7, #28
 8107cd0:	46bd      	mov	sp, r7
 8107cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107cd6:	4770      	bx	lr
 8107cd8:	40010000 	.word	0x40010000
 8107cdc:	40010400 	.word	0x40010400
 8107ce0:	40014000 	.word	0x40014000
 8107ce4:	40014400 	.word	0x40014400
 8107ce8:	40014800 	.word	0x40014800

08107cec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8107cec:	b480      	push	{r7}
 8107cee:	b087      	sub	sp, #28
 8107cf0:	af00      	add	r7, sp, #0
 8107cf2:	6078      	str	r0, [r7, #4]
 8107cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8107cf6:	687b      	ldr	r3, [r7, #4]
 8107cf8:	6a1b      	ldr	r3, [r3, #32]
 8107cfa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8107cfe:	687b      	ldr	r3, [r7, #4]
 8107d00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107d02:	687b      	ldr	r3, [r7, #4]
 8107d04:	6a1b      	ldr	r3, [r3, #32]
 8107d06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107d08:	687b      	ldr	r3, [r7, #4]
 8107d0a:	685b      	ldr	r3, [r3, #4]
 8107d0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8107d0e:	687b      	ldr	r3, [r7, #4]
 8107d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8107d14:	68fb      	ldr	r3, [r7, #12]
 8107d16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8107d1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8107d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8107d20:	683b      	ldr	r3, [r7, #0]
 8107d22:	681b      	ldr	r3, [r3, #0]
 8107d24:	021b      	lsls	r3, r3, #8
 8107d26:	68fa      	ldr	r2, [r7, #12]
 8107d28:	4313      	orrs	r3, r2
 8107d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8107d2c:	693b      	ldr	r3, [r7, #16]
 8107d2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8107d32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8107d34:	683b      	ldr	r3, [r7, #0]
 8107d36:	689b      	ldr	r3, [r3, #8]
 8107d38:	051b      	lsls	r3, r3, #20
 8107d3a:	693a      	ldr	r2, [r7, #16]
 8107d3c:	4313      	orrs	r3, r2
 8107d3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107d40:	687b      	ldr	r3, [r7, #4]
 8107d42:	4a18      	ldr	r2, [pc, #96]	; (8107da4 <TIM_OC6_SetConfig+0xb8>)
 8107d44:	4293      	cmp	r3, r2
 8107d46:	d00f      	beq.n	8107d68 <TIM_OC6_SetConfig+0x7c>
 8107d48:	687b      	ldr	r3, [r7, #4]
 8107d4a:	4a17      	ldr	r2, [pc, #92]	; (8107da8 <TIM_OC6_SetConfig+0xbc>)
 8107d4c:	4293      	cmp	r3, r2
 8107d4e:	d00b      	beq.n	8107d68 <TIM_OC6_SetConfig+0x7c>
 8107d50:	687b      	ldr	r3, [r7, #4]
 8107d52:	4a16      	ldr	r2, [pc, #88]	; (8107dac <TIM_OC6_SetConfig+0xc0>)
 8107d54:	4293      	cmp	r3, r2
 8107d56:	d007      	beq.n	8107d68 <TIM_OC6_SetConfig+0x7c>
 8107d58:	687b      	ldr	r3, [r7, #4]
 8107d5a:	4a15      	ldr	r2, [pc, #84]	; (8107db0 <TIM_OC6_SetConfig+0xc4>)
 8107d5c:	4293      	cmp	r3, r2
 8107d5e:	d003      	beq.n	8107d68 <TIM_OC6_SetConfig+0x7c>
 8107d60:	687b      	ldr	r3, [r7, #4]
 8107d62:	4a14      	ldr	r2, [pc, #80]	; (8107db4 <TIM_OC6_SetConfig+0xc8>)
 8107d64:	4293      	cmp	r3, r2
 8107d66:	d109      	bne.n	8107d7c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8107d68:	697b      	ldr	r3, [r7, #20]
 8107d6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8107d6e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8107d70:	683b      	ldr	r3, [r7, #0]
 8107d72:	695b      	ldr	r3, [r3, #20]
 8107d74:	029b      	lsls	r3, r3, #10
 8107d76:	697a      	ldr	r2, [r7, #20]
 8107d78:	4313      	orrs	r3, r2
 8107d7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107d7c:	687b      	ldr	r3, [r7, #4]
 8107d7e:	697a      	ldr	r2, [r7, #20]
 8107d80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8107d82:	687b      	ldr	r3, [r7, #4]
 8107d84:	68fa      	ldr	r2, [r7, #12]
 8107d86:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8107d88:	683b      	ldr	r3, [r7, #0]
 8107d8a:	685a      	ldr	r2, [r3, #4]
 8107d8c:	687b      	ldr	r3, [r7, #4]
 8107d8e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107d90:	687b      	ldr	r3, [r7, #4]
 8107d92:	693a      	ldr	r2, [r7, #16]
 8107d94:	621a      	str	r2, [r3, #32]
}
 8107d96:	bf00      	nop
 8107d98:	371c      	adds	r7, #28
 8107d9a:	46bd      	mov	sp, r7
 8107d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107da0:	4770      	bx	lr
 8107da2:	bf00      	nop
 8107da4:	40010000 	.word	0x40010000
 8107da8:	40010400 	.word	0x40010400
 8107dac:	40014000 	.word	0x40014000
 8107db0:	40014400 	.word	0x40014400
 8107db4:	40014800 	.word	0x40014800

08107db8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8107db8:	b480      	push	{r7}
 8107dba:	b087      	sub	sp, #28
 8107dbc:	af00      	add	r7, sp, #0
 8107dbe:	60f8      	str	r0, [r7, #12]
 8107dc0:	60b9      	str	r1, [r7, #8]
 8107dc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8107dc4:	68bb      	ldr	r3, [r7, #8]
 8107dc6:	f003 031f 	and.w	r3, r3, #31
 8107dca:	2201      	movs	r2, #1
 8107dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8107dd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8107dd2:	68fb      	ldr	r3, [r7, #12]
 8107dd4:	6a1a      	ldr	r2, [r3, #32]
 8107dd6:	697b      	ldr	r3, [r7, #20]
 8107dd8:	43db      	mvns	r3, r3
 8107dda:	401a      	ands	r2, r3
 8107ddc:	68fb      	ldr	r3, [r7, #12]
 8107dde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8107de0:	68fb      	ldr	r3, [r7, #12]
 8107de2:	6a1a      	ldr	r2, [r3, #32]
 8107de4:	68bb      	ldr	r3, [r7, #8]
 8107de6:	f003 031f 	and.w	r3, r3, #31
 8107dea:	6879      	ldr	r1, [r7, #4]
 8107dec:	fa01 f303 	lsl.w	r3, r1, r3
 8107df0:	431a      	orrs	r2, r3
 8107df2:	68fb      	ldr	r3, [r7, #12]
 8107df4:	621a      	str	r2, [r3, #32]
}
 8107df6:	bf00      	nop
 8107df8:	371c      	adds	r7, #28
 8107dfa:	46bd      	mov	sp, r7
 8107dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107e00:	4770      	bx	lr
	...

08107e04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8107e04:	b480      	push	{r7}
 8107e06:	b085      	sub	sp, #20
 8107e08:	af00      	add	r7, sp, #0
 8107e0a:	6078      	str	r0, [r7, #4]
 8107e0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8107e0e:	687b      	ldr	r3, [r7, #4]
 8107e10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8107e14:	2b01      	cmp	r3, #1
 8107e16:	d101      	bne.n	8107e1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8107e18:	2302      	movs	r3, #2
 8107e1a:	e06d      	b.n	8107ef8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8107e1c:	687b      	ldr	r3, [r7, #4]
 8107e1e:	2201      	movs	r2, #1
 8107e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8107e24:	687b      	ldr	r3, [r7, #4]
 8107e26:	2202      	movs	r2, #2
 8107e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8107e2c:	687b      	ldr	r3, [r7, #4]
 8107e2e:	681b      	ldr	r3, [r3, #0]
 8107e30:	685b      	ldr	r3, [r3, #4]
 8107e32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8107e34:	687b      	ldr	r3, [r7, #4]
 8107e36:	681b      	ldr	r3, [r3, #0]
 8107e38:	689b      	ldr	r3, [r3, #8]
 8107e3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8107e3c:	687b      	ldr	r3, [r7, #4]
 8107e3e:	681b      	ldr	r3, [r3, #0]
 8107e40:	4a30      	ldr	r2, [pc, #192]	; (8107f04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8107e42:	4293      	cmp	r3, r2
 8107e44:	d004      	beq.n	8107e50 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8107e46:	687b      	ldr	r3, [r7, #4]
 8107e48:	681b      	ldr	r3, [r3, #0]
 8107e4a:	4a2f      	ldr	r2, [pc, #188]	; (8107f08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8107e4c:	4293      	cmp	r3, r2
 8107e4e:	d108      	bne.n	8107e62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8107e50:	68fb      	ldr	r3, [r7, #12]
 8107e52:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8107e56:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8107e58:	683b      	ldr	r3, [r7, #0]
 8107e5a:	685b      	ldr	r3, [r3, #4]
 8107e5c:	68fa      	ldr	r2, [r7, #12]
 8107e5e:	4313      	orrs	r3, r2
 8107e60:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8107e62:	68fb      	ldr	r3, [r7, #12]
 8107e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107e68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8107e6a:	683b      	ldr	r3, [r7, #0]
 8107e6c:	681b      	ldr	r3, [r3, #0]
 8107e6e:	68fa      	ldr	r2, [r7, #12]
 8107e70:	4313      	orrs	r3, r2
 8107e72:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8107e74:	687b      	ldr	r3, [r7, #4]
 8107e76:	681b      	ldr	r3, [r3, #0]
 8107e78:	68fa      	ldr	r2, [r7, #12]
 8107e7a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8107e7c:	687b      	ldr	r3, [r7, #4]
 8107e7e:	681b      	ldr	r3, [r3, #0]
 8107e80:	4a20      	ldr	r2, [pc, #128]	; (8107f04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8107e82:	4293      	cmp	r3, r2
 8107e84:	d022      	beq.n	8107ecc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107e86:	687b      	ldr	r3, [r7, #4]
 8107e88:	681b      	ldr	r3, [r3, #0]
 8107e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107e8e:	d01d      	beq.n	8107ecc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107e90:	687b      	ldr	r3, [r7, #4]
 8107e92:	681b      	ldr	r3, [r3, #0]
 8107e94:	4a1d      	ldr	r2, [pc, #116]	; (8107f0c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8107e96:	4293      	cmp	r3, r2
 8107e98:	d018      	beq.n	8107ecc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107e9a:	687b      	ldr	r3, [r7, #4]
 8107e9c:	681b      	ldr	r3, [r3, #0]
 8107e9e:	4a1c      	ldr	r2, [pc, #112]	; (8107f10 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8107ea0:	4293      	cmp	r3, r2
 8107ea2:	d013      	beq.n	8107ecc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107ea4:	687b      	ldr	r3, [r7, #4]
 8107ea6:	681b      	ldr	r3, [r3, #0]
 8107ea8:	4a1a      	ldr	r2, [pc, #104]	; (8107f14 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8107eaa:	4293      	cmp	r3, r2
 8107eac:	d00e      	beq.n	8107ecc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107eae:	687b      	ldr	r3, [r7, #4]
 8107eb0:	681b      	ldr	r3, [r3, #0]
 8107eb2:	4a15      	ldr	r2, [pc, #84]	; (8107f08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8107eb4:	4293      	cmp	r3, r2
 8107eb6:	d009      	beq.n	8107ecc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107eb8:	687b      	ldr	r3, [r7, #4]
 8107eba:	681b      	ldr	r3, [r3, #0]
 8107ebc:	4a16      	ldr	r2, [pc, #88]	; (8107f18 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8107ebe:	4293      	cmp	r3, r2
 8107ec0:	d004      	beq.n	8107ecc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107ec2:	687b      	ldr	r3, [r7, #4]
 8107ec4:	681b      	ldr	r3, [r3, #0]
 8107ec6:	4a15      	ldr	r2, [pc, #84]	; (8107f1c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8107ec8:	4293      	cmp	r3, r2
 8107eca:	d10c      	bne.n	8107ee6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8107ecc:	68bb      	ldr	r3, [r7, #8]
 8107ece:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8107ed2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8107ed4:	683b      	ldr	r3, [r7, #0]
 8107ed6:	689b      	ldr	r3, [r3, #8]
 8107ed8:	68ba      	ldr	r2, [r7, #8]
 8107eda:	4313      	orrs	r3, r2
 8107edc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8107ede:	687b      	ldr	r3, [r7, #4]
 8107ee0:	681b      	ldr	r3, [r3, #0]
 8107ee2:	68ba      	ldr	r2, [r7, #8]
 8107ee4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8107ee6:	687b      	ldr	r3, [r7, #4]
 8107ee8:	2201      	movs	r2, #1
 8107eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8107eee:	687b      	ldr	r3, [r7, #4]
 8107ef0:	2200      	movs	r2, #0
 8107ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8107ef6:	2300      	movs	r3, #0
}
 8107ef8:	4618      	mov	r0, r3
 8107efa:	3714      	adds	r7, #20
 8107efc:	46bd      	mov	sp, r7
 8107efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107f02:	4770      	bx	lr
 8107f04:	40010000 	.word	0x40010000
 8107f08:	40010400 	.word	0x40010400
 8107f0c:	40000400 	.word	0x40000400
 8107f10:	40000800 	.word	0x40000800
 8107f14:	40000c00 	.word	0x40000c00
 8107f18:	40001800 	.word	0x40001800
 8107f1c:	40014000 	.word	0x40014000

08107f20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8107f20:	b480      	push	{r7}
 8107f22:	b083      	sub	sp, #12
 8107f24:	af00      	add	r7, sp, #0
 8107f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8107f28:	bf00      	nop
 8107f2a:	370c      	adds	r7, #12
 8107f2c:	46bd      	mov	sp, r7
 8107f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107f32:	4770      	bx	lr

08107f34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8107f34:	b480      	push	{r7}
 8107f36:	b083      	sub	sp, #12
 8107f38:	af00      	add	r7, sp, #0
 8107f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8107f3c:	bf00      	nop
 8107f3e:	370c      	adds	r7, #12
 8107f40:	46bd      	mov	sp, r7
 8107f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107f46:	4770      	bx	lr

08107f48 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8107f48:	b480      	push	{r7}
 8107f4a:	b083      	sub	sp, #12
 8107f4c:	af00      	add	r7, sp, #0
 8107f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8107f50:	bf00      	nop
 8107f52:	370c      	adds	r7, #12
 8107f54:	46bd      	mov	sp, r7
 8107f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107f5a:	4770      	bx	lr

08107f5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8107f5c:	b580      	push	{r7, lr}
 8107f5e:	b082      	sub	sp, #8
 8107f60:	af00      	add	r7, sp, #0
 8107f62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8107f64:	687b      	ldr	r3, [r7, #4]
 8107f66:	2b00      	cmp	r3, #0
 8107f68:	d101      	bne.n	8107f6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8107f6a:	2301      	movs	r3, #1
 8107f6c:	e042      	b.n	8107ff4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8107f6e:	687b      	ldr	r3, [r7, #4]
 8107f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8107f74:	2b00      	cmp	r3, #0
 8107f76:	d106      	bne.n	8107f86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8107f78:	687b      	ldr	r3, [r7, #4]
 8107f7a:	2200      	movs	r2, #0
 8107f7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8107f80:	6878      	ldr	r0, [r7, #4]
 8107f82:	f7f9 febf 	bl	8101d04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8107f86:	687b      	ldr	r3, [r7, #4]
 8107f88:	2224      	movs	r2, #36	; 0x24
 8107f8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8107f8e:	687b      	ldr	r3, [r7, #4]
 8107f90:	681b      	ldr	r3, [r3, #0]
 8107f92:	681a      	ldr	r2, [r3, #0]
 8107f94:	687b      	ldr	r3, [r7, #4]
 8107f96:	681b      	ldr	r3, [r3, #0]
 8107f98:	f022 0201 	bic.w	r2, r2, #1
 8107f9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8107f9e:	6878      	ldr	r0, [r7, #4]
 8107fa0:	f000 f8ba 	bl	8108118 <UART_SetConfig>
 8107fa4:	4603      	mov	r3, r0
 8107fa6:	2b01      	cmp	r3, #1
 8107fa8:	d101      	bne.n	8107fae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8107faa:	2301      	movs	r3, #1
 8107fac:	e022      	b.n	8107ff4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8107fae:	687b      	ldr	r3, [r7, #4]
 8107fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107fb2:	2b00      	cmp	r3, #0
 8107fb4:	d002      	beq.n	8107fbc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8107fb6:	6878      	ldr	r0, [r7, #4]
 8107fb8:	f000 fe16 	bl	8108be8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8107fbc:	687b      	ldr	r3, [r7, #4]
 8107fbe:	681b      	ldr	r3, [r3, #0]
 8107fc0:	685a      	ldr	r2, [r3, #4]
 8107fc2:	687b      	ldr	r3, [r7, #4]
 8107fc4:	681b      	ldr	r3, [r3, #0]
 8107fc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8107fca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8107fcc:	687b      	ldr	r3, [r7, #4]
 8107fce:	681b      	ldr	r3, [r3, #0]
 8107fd0:	689a      	ldr	r2, [r3, #8]
 8107fd2:	687b      	ldr	r3, [r7, #4]
 8107fd4:	681b      	ldr	r3, [r3, #0]
 8107fd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8107fda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8107fdc:	687b      	ldr	r3, [r7, #4]
 8107fde:	681b      	ldr	r3, [r3, #0]
 8107fe0:	681a      	ldr	r2, [r3, #0]
 8107fe2:	687b      	ldr	r3, [r7, #4]
 8107fe4:	681b      	ldr	r3, [r3, #0]
 8107fe6:	f042 0201 	orr.w	r2, r2, #1
 8107fea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8107fec:	6878      	ldr	r0, [r7, #4]
 8107fee:	f000 fe9d 	bl	8108d2c <UART_CheckIdleState>
 8107ff2:	4603      	mov	r3, r0
}
 8107ff4:	4618      	mov	r0, r3
 8107ff6:	3708      	adds	r7, #8
 8107ff8:	46bd      	mov	sp, r7
 8107ffa:	bd80      	pop	{r7, pc}

08107ffc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8107ffc:	b580      	push	{r7, lr}
 8107ffe:	b08a      	sub	sp, #40	; 0x28
 8108000:	af02      	add	r7, sp, #8
 8108002:	60f8      	str	r0, [r7, #12]
 8108004:	60b9      	str	r1, [r7, #8]
 8108006:	603b      	str	r3, [r7, #0]
 8108008:	4613      	mov	r3, r2
 810800a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 810800c:	68fb      	ldr	r3, [r7, #12]
 810800e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8108012:	2b20      	cmp	r3, #32
 8108014:	d17b      	bne.n	810810e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8108016:	68bb      	ldr	r3, [r7, #8]
 8108018:	2b00      	cmp	r3, #0
 810801a:	d002      	beq.n	8108022 <HAL_UART_Transmit+0x26>
 810801c:	88fb      	ldrh	r3, [r7, #6]
 810801e:	2b00      	cmp	r3, #0
 8108020:	d101      	bne.n	8108026 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8108022:	2301      	movs	r3, #1
 8108024:	e074      	b.n	8108110 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8108026:	68fb      	ldr	r3, [r7, #12]
 8108028:	2200      	movs	r2, #0
 810802a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810802e:	68fb      	ldr	r3, [r7, #12]
 8108030:	2221      	movs	r2, #33	; 0x21
 8108032:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8108036:	f7fa f89b 	bl	8102170 <HAL_GetTick>
 810803a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 810803c:	68fb      	ldr	r3, [r7, #12]
 810803e:	88fa      	ldrh	r2, [r7, #6]
 8108040:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8108044:	68fb      	ldr	r3, [r7, #12]
 8108046:	88fa      	ldrh	r2, [r7, #6]
 8108048:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810804c:	68fb      	ldr	r3, [r7, #12]
 810804e:	689b      	ldr	r3, [r3, #8]
 8108050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8108054:	d108      	bne.n	8108068 <HAL_UART_Transmit+0x6c>
 8108056:	68fb      	ldr	r3, [r7, #12]
 8108058:	691b      	ldr	r3, [r3, #16]
 810805a:	2b00      	cmp	r3, #0
 810805c:	d104      	bne.n	8108068 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 810805e:	2300      	movs	r3, #0
 8108060:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8108062:	68bb      	ldr	r3, [r7, #8]
 8108064:	61bb      	str	r3, [r7, #24]
 8108066:	e003      	b.n	8108070 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8108068:	68bb      	ldr	r3, [r7, #8]
 810806a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 810806c:	2300      	movs	r3, #0
 810806e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8108070:	e030      	b.n	81080d4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8108072:	683b      	ldr	r3, [r7, #0]
 8108074:	9300      	str	r3, [sp, #0]
 8108076:	697b      	ldr	r3, [r7, #20]
 8108078:	2200      	movs	r2, #0
 810807a:	2180      	movs	r1, #128	; 0x80
 810807c:	68f8      	ldr	r0, [r7, #12]
 810807e:	f000 feff 	bl	8108e80 <UART_WaitOnFlagUntilTimeout>
 8108082:	4603      	mov	r3, r0
 8108084:	2b00      	cmp	r3, #0
 8108086:	d005      	beq.n	8108094 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8108088:	68fb      	ldr	r3, [r7, #12]
 810808a:	2220      	movs	r2, #32
 810808c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8108090:	2303      	movs	r3, #3
 8108092:	e03d      	b.n	8108110 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8108094:	69fb      	ldr	r3, [r7, #28]
 8108096:	2b00      	cmp	r3, #0
 8108098:	d10b      	bne.n	81080b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 810809a:	69bb      	ldr	r3, [r7, #24]
 810809c:	881b      	ldrh	r3, [r3, #0]
 810809e:	461a      	mov	r2, r3
 81080a0:	68fb      	ldr	r3, [r7, #12]
 81080a2:	681b      	ldr	r3, [r3, #0]
 81080a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 81080a8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 81080aa:	69bb      	ldr	r3, [r7, #24]
 81080ac:	3302      	adds	r3, #2
 81080ae:	61bb      	str	r3, [r7, #24]
 81080b0:	e007      	b.n	81080c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 81080b2:	69fb      	ldr	r3, [r7, #28]
 81080b4:	781a      	ldrb	r2, [r3, #0]
 81080b6:	68fb      	ldr	r3, [r7, #12]
 81080b8:	681b      	ldr	r3, [r3, #0]
 81080ba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 81080bc:	69fb      	ldr	r3, [r7, #28]
 81080be:	3301      	adds	r3, #1
 81080c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 81080c2:	68fb      	ldr	r3, [r7, #12]
 81080c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 81080c8:	b29b      	uxth	r3, r3
 81080ca:	3b01      	subs	r3, #1
 81080cc:	b29a      	uxth	r2, r3
 81080ce:	68fb      	ldr	r3, [r7, #12]
 81080d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 81080d4:	68fb      	ldr	r3, [r7, #12]
 81080d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 81080da:	b29b      	uxth	r3, r3
 81080dc:	2b00      	cmp	r3, #0
 81080de:	d1c8      	bne.n	8108072 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 81080e0:	683b      	ldr	r3, [r7, #0]
 81080e2:	9300      	str	r3, [sp, #0]
 81080e4:	697b      	ldr	r3, [r7, #20]
 81080e6:	2200      	movs	r2, #0
 81080e8:	2140      	movs	r1, #64	; 0x40
 81080ea:	68f8      	ldr	r0, [r7, #12]
 81080ec:	f000 fec8 	bl	8108e80 <UART_WaitOnFlagUntilTimeout>
 81080f0:	4603      	mov	r3, r0
 81080f2:	2b00      	cmp	r3, #0
 81080f4:	d005      	beq.n	8108102 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 81080f6:	68fb      	ldr	r3, [r7, #12]
 81080f8:	2220      	movs	r2, #32
 81080fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 81080fe:	2303      	movs	r3, #3
 8108100:	e006      	b.n	8108110 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8108102:	68fb      	ldr	r3, [r7, #12]
 8108104:	2220      	movs	r2, #32
 8108106:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 810810a:	2300      	movs	r3, #0
 810810c:	e000      	b.n	8108110 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 810810e:	2302      	movs	r3, #2
  }
}
 8108110:	4618      	mov	r0, r3
 8108112:	3720      	adds	r7, #32
 8108114:	46bd      	mov	sp, r7
 8108116:	bd80      	pop	{r7, pc}

08108118 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8108118:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810811c:	b092      	sub	sp, #72	; 0x48
 810811e:	af00      	add	r7, sp, #0
 8108120:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8108122:	2300      	movs	r3, #0
 8108124:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8108128:	697b      	ldr	r3, [r7, #20]
 810812a:	689a      	ldr	r2, [r3, #8]
 810812c:	697b      	ldr	r3, [r7, #20]
 810812e:	691b      	ldr	r3, [r3, #16]
 8108130:	431a      	orrs	r2, r3
 8108132:	697b      	ldr	r3, [r7, #20]
 8108134:	695b      	ldr	r3, [r3, #20]
 8108136:	431a      	orrs	r2, r3
 8108138:	697b      	ldr	r3, [r7, #20]
 810813a:	69db      	ldr	r3, [r3, #28]
 810813c:	4313      	orrs	r3, r2
 810813e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8108140:	697b      	ldr	r3, [r7, #20]
 8108142:	681b      	ldr	r3, [r3, #0]
 8108144:	681a      	ldr	r2, [r3, #0]
 8108146:	4bbd      	ldr	r3, [pc, #756]	; (810843c <UART_SetConfig+0x324>)
 8108148:	4013      	ands	r3, r2
 810814a:	697a      	ldr	r2, [r7, #20]
 810814c:	6812      	ldr	r2, [r2, #0]
 810814e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8108150:	430b      	orrs	r3, r1
 8108152:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8108154:	697b      	ldr	r3, [r7, #20]
 8108156:	681b      	ldr	r3, [r3, #0]
 8108158:	685b      	ldr	r3, [r3, #4]
 810815a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 810815e:	697b      	ldr	r3, [r7, #20]
 8108160:	68da      	ldr	r2, [r3, #12]
 8108162:	697b      	ldr	r3, [r7, #20]
 8108164:	681b      	ldr	r3, [r3, #0]
 8108166:	430a      	orrs	r2, r1
 8108168:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810816a:	697b      	ldr	r3, [r7, #20]
 810816c:	699b      	ldr	r3, [r3, #24]
 810816e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8108170:	697b      	ldr	r3, [r7, #20]
 8108172:	681b      	ldr	r3, [r3, #0]
 8108174:	4ab2      	ldr	r2, [pc, #712]	; (8108440 <UART_SetConfig+0x328>)
 8108176:	4293      	cmp	r3, r2
 8108178:	d004      	beq.n	8108184 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810817a:	697b      	ldr	r3, [r7, #20]
 810817c:	6a1b      	ldr	r3, [r3, #32]
 810817e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8108180:	4313      	orrs	r3, r2
 8108182:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8108184:	697b      	ldr	r3, [r7, #20]
 8108186:	681b      	ldr	r3, [r3, #0]
 8108188:	689b      	ldr	r3, [r3, #8]
 810818a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 810818e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8108192:	697a      	ldr	r2, [r7, #20]
 8108194:	6812      	ldr	r2, [r2, #0]
 8108196:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8108198:	430b      	orrs	r3, r1
 810819a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810819c:	697b      	ldr	r3, [r7, #20]
 810819e:	681b      	ldr	r3, [r3, #0]
 81081a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81081a2:	f023 010f 	bic.w	r1, r3, #15
 81081a6:	697b      	ldr	r3, [r7, #20]
 81081a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 81081aa:	697b      	ldr	r3, [r7, #20]
 81081ac:	681b      	ldr	r3, [r3, #0]
 81081ae:	430a      	orrs	r2, r1
 81081b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 81081b2:	697b      	ldr	r3, [r7, #20]
 81081b4:	681b      	ldr	r3, [r3, #0]
 81081b6:	4aa3      	ldr	r2, [pc, #652]	; (8108444 <UART_SetConfig+0x32c>)
 81081b8:	4293      	cmp	r3, r2
 81081ba:	d177      	bne.n	81082ac <UART_SetConfig+0x194>
 81081bc:	4ba2      	ldr	r3, [pc, #648]	; (8108448 <UART_SetConfig+0x330>)
 81081be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81081c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81081c4:	2b28      	cmp	r3, #40	; 0x28
 81081c6:	d86d      	bhi.n	81082a4 <UART_SetConfig+0x18c>
 81081c8:	a201      	add	r2, pc, #4	; (adr r2, 81081d0 <UART_SetConfig+0xb8>)
 81081ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81081ce:	bf00      	nop
 81081d0:	08108275 	.word	0x08108275
 81081d4:	081082a5 	.word	0x081082a5
 81081d8:	081082a5 	.word	0x081082a5
 81081dc:	081082a5 	.word	0x081082a5
 81081e0:	081082a5 	.word	0x081082a5
 81081e4:	081082a5 	.word	0x081082a5
 81081e8:	081082a5 	.word	0x081082a5
 81081ec:	081082a5 	.word	0x081082a5
 81081f0:	0810827d 	.word	0x0810827d
 81081f4:	081082a5 	.word	0x081082a5
 81081f8:	081082a5 	.word	0x081082a5
 81081fc:	081082a5 	.word	0x081082a5
 8108200:	081082a5 	.word	0x081082a5
 8108204:	081082a5 	.word	0x081082a5
 8108208:	081082a5 	.word	0x081082a5
 810820c:	081082a5 	.word	0x081082a5
 8108210:	08108285 	.word	0x08108285
 8108214:	081082a5 	.word	0x081082a5
 8108218:	081082a5 	.word	0x081082a5
 810821c:	081082a5 	.word	0x081082a5
 8108220:	081082a5 	.word	0x081082a5
 8108224:	081082a5 	.word	0x081082a5
 8108228:	081082a5 	.word	0x081082a5
 810822c:	081082a5 	.word	0x081082a5
 8108230:	0810828d 	.word	0x0810828d
 8108234:	081082a5 	.word	0x081082a5
 8108238:	081082a5 	.word	0x081082a5
 810823c:	081082a5 	.word	0x081082a5
 8108240:	081082a5 	.word	0x081082a5
 8108244:	081082a5 	.word	0x081082a5
 8108248:	081082a5 	.word	0x081082a5
 810824c:	081082a5 	.word	0x081082a5
 8108250:	08108295 	.word	0x08108295
 8108254:	081082a5 	.word	0x081082a5
 8108258:	081082a5 	.word	0x081082a5
 810825c:	081082a5 	.word	0x081082a5
 8108260:	081082a5 	.word	0x081082a5
 8108264:	081082a5 	.word	0x081082a5
 8108268:	081082a5 	.word	0x081082a5
 810826c:	081082a5 	.word	0x081082a5
 8108270:	0810829d 	.word	0x0810829d
 8108274:	2301      	movs	r3, #1
 8108276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810827a:	e220      	b.n	81086be <UART_SetConfig+0x5a6>
 810827c:	2304      	movs	r3, #4
 810827e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108282:	e21c      	b.n	81086be <UART_SetConfig+0x5a6>
 8108284:	2308      	movs	r3, #8
 8108286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810828a:	e218      	b.n	81086be <UART_SetConfig+0x5a6>
 810828c:	2310      	movs	r3, #16
 810828e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108292:	e214      	b.n	81086be <UART_SetConfig+0x5a6>
 8108294:	2320      	movs	r3, #32
 8108296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810829a:	e210      	b.n	81086be <UART_SetConfig+0x5a6>
 810829c:	2340      	movs	r3, #64	; 0x40
 810829e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81082a2:	e20c      	b.n	81086be <UART_SetConfig+0x5a6>
 81082a4:	2380      	movs	r3, #128	; 0x80
 81082a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81082aa:	e208      	b.n	81086be <UART_SetConfig+0x5a6>
 81082ac:	697b      	ldr	r3, [r7, #20]
 81082ae:	681b      	ldr	r3, [r3, #0]
 81082b0:	4a66      	ldr	r2, [pc, #408]	; (810844c <UART_SetConfig+0x334>)
 81082b2:	4293      	cmp	r3, r2
 81082b4:	d130      	bne.n	8108318 <UART_SetConfig+0x200>
 81082b6:	4b64      	ldr	r3, [pc, #400]	; (8108448 <UART_SetConfig+0x330>)
 81082b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81082ba:	f003 0307 	and.w	r3, r3, #7
 81082be:	2b05      	cmp	r3, #5
 81082c0:	d826      	bhi.n	8108310 <UART_SetConfig+0x1f8>
 81082c2:	a201      	add	r2, pc, #4	; (adr r2, 81082c8 <UART_SetConfig+0x1b0>)
 81082c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81082c8:	081082e1 	.word	0x081082e1
 81082cc:	081082e9 	.word	0x081082e9
 81082d0:	081082f1 	.word	0x081082f1
 81082d4:	081082f9 	.word	0x081082f9
 81082d8:	08108301 	.word	0x08108301
 81082dc:	08108309 	.word	0x08108309
 81082e0:	2300      	movs	r3, #0
 81082e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81082e6:	e1ea      	b.n	81086be <UART_SetConfig+0x5a6>
 81082e8:	2304      	movs	r3, #4
 81082ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81082ee:	e1e6      	b.n	81086be <UART_SetConfig+0x5a6>
 81082f0:	2308      	movs	r3, #8
 81082f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81082f6:	e1e2      	b.n	81086be <UART_SetConfig+0x5a6>
 81082f8:	2310      	movs	r3, #16
 81082fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81082fe:	e1de      	b.n	81086be <UART_SetConfig+0x5a6>
 8108300:	2320      	movs	r3, #32
 8108302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108306:	e1da      	b.n	81086be <UART_SetConfig+0x5a6>
 8108308:	2340      	movs	r3, #64	; 0x40
 810830a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810830e:	e1d6      	b.n	81086be <UART_SetConfig+0x5a6>
 8108310:	2380      	movs	r3, #128	; 0x80
 8108312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108316:	e1d2      	b.n	81086be <UART_SetConfig+0x5a6>
 8108318:	697b      	ldr	r3, [r7, #20]
 810831a:	681b      	ldr	r3, [r3, #0]
 810831c:	4a4c      	ldr	r2, [pc, #304]	; (8108450 <UART_SetConfig+0x338>)
 810831e:	4293      	cmp	r3, r2
 8108320:	d130      	bne.n	8108384 <UART_SetConfig+0x26c>
 8108322:	4b49      	ldr	r3, [pc, #292]	; (8108448 <UART_SetConfig+0x330>)
 8108324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108326:	f003 0307 	and.w	r3, r3, #7
 810832a:	2b05      	cmp	r3, #5
 810832c:	d826      	bhi.n	810837c <UART_SetConfig+0x264>
 810832e:	a201      	add	r2, pc, #4	; (adr r2, 8108334 <UART_SetConfig+0x21c>)
 8108330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108334:	0810834d 	.word	0x0810834d
 8108338:	08108355 	.word	0x08108355
 810833c:	0810835d 	.word	0x0810835d
 8108340:	08108365 	.word	0x08108365
 8108344:	0810836d 	.word	0x0810836d
 8108348:	08108375 	.word	0x08108375
 810834c:	2300      	movs	r3, #0
 810834e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108352:	e1b4      	b.n	81086be <UART_SetConfig+0x5a6>
 8108354:	2304      	movs	r3, #4
 8108356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810835a:	e1b0      	b.n	81086be <UART_SetConfig+0x5a6>
 810835c:	2308      	movs	r3, #8
 810835e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108362:	e1ac      	b.n	81086be <UART_SetConfig+0x5a6>
 8108364:	2310      	movs	r3, #16
 8108366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810836a:	e1a8      	b.n	81086be <UART_SetConfig+0x5a6>
 810836c:	2320      	movs	r3, #32
 810836e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108372:	e1a4      	b.n	81086be <UART_SetConfig+0x5a6>
 8108374:	2340      	movs	r3, #64	; 0x40
 8108376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810837a:	e1a0      	b.n	81086be <UART_SetConfig+0x5a6>
 810837c:	2380      	movs	r3, #128	; 0x80
 810837e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108382:	e19c      	b.n	81086be <UART_SetConfig+0x5a6>
 8108384:	697b      	ldr	r3, [r7, #20]
 8108386:	681b      	ldr	r3, [r3, #0]
 8108388:	4a32      	ldr	r2, [pc, #200]	; (8108454 <UART_SetConfig+0x33c>)
 810838a:	4293      	cmp	r3, r2
 810838c:	d130      	bne.n	81083f0 <UART_SetConfig+0x2d8>
 810838e:	4b2e      	ldr	r3, [pc, #184]	; (8108448 <UART_SetConfig+0x330>)
 8108390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108392:	f003 0307 	and.w	r3, r3, #7
 8108396:	2b05      	cmp	r3, #5
 8108398:	d826      	bhi.n	81083e8 <UART_SetConfig+0x2d0>
 810839a:	a201      	add	r2, pc, #4	; (adr r2, 81083a0 <UART_SetConfig+0x288>)
 810839c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81083a0:	081083b9 	.word	0x081083b9
 81083a4:	081083c1 	.word	0x081083c1
 81083a8:	081083c9 	.word	0x081083c9
 81083ac:	081083d1 	.word	0x081083d1
 81083b0:	081083d9 	.word	0x081083d9
 81083b4:	081083e1 	.word	0x081083e1
 81083b8:	2300      	movs	r3, #0
 81083ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81083be:	e17e      	b.n	81086be <UART_SetConfig+0x5a6>
 81083c0:	2304      	movs	r3, #4
 81083c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81083c6:	e17a      	b.n	81086be <UART_SetConfig+0x5a6>
 81083c8:	2308      	movs	r3, #8
 81083ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81083ce:	e176      	b.n	81086be <UART_SetConfig+0x5a6>
 81083d0:	2310      	movs	r3, #16
 81083d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81083d6:	e172      	b.n	81086be <UART_SetConfig+0x5a6>
 81083d8:	2320      	movs	r3, #32
 81083da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81083de:	e16e      	b.n	81086be <UART_SetConfig+0x5a6>
 81083e0:	2340      	movs	r3, #64	; 0x40
 81083e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81083e6:	e16a      	b.n	81086be <UART_SetConfig+0x5a6>
 81083e8:	2380      	movs	r3, #128	; 0x80
 81083ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81083ee:	e166      	b.n	81086be <UART_SetConfig+0x5a6>
 81083f0:	697b      	ldr	r3, [r7, #20]
 81083f2:	681b      	ldr	r3, [r3, #0]
 81083f4:	4a18      	ldr	r2, [pc, #96]	; (8108458 <UART_SetConfig+0x340>)
 81083f6:	4293      	cmp	r3, r2
 81083f8:	d140      	bne.n	810847c <UART_SetConfig+0x364>
 81083fa:	4b13      	ldr	r3, [pc, #76]	; (8108448 <UART_SetConfig+0x330>)
 81083fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81083fe:	f003 0307 	and.w	r3, r3, #7
 8108402:	2b05      	cmp	r3, #5
 8108404:	d836      	bhi.n	8108474 <UART_SetConfig+0x35c>
 8108406:	a201      	add	r2, pc, #4	; (adr r2, 810840c <UART_SetConfig+0x2f4>)
 8108408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810840c:	08108425 	.word	0x08108425
 8108410:	0810842d 	.word	0x0810842d
 8108414:	08108435 	.word	0x08108435
 8108418:	0810845d 	.word	0x0810845d
 810841c:	08108465 	.word	0x08108465
 8108420:	0810846d 	.word	0x0810846d
 8108424:	2300      	movs	r3, #0
 8108426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810842a:	e148      	b.n	81086be <UART_SetConfig+0x5a6>
 810842c:	2304      	movs	r3, #4
 810842e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108432:	e144      	b.n	81086be <UART_SetConfig+0x5a6>
 8108434:	2308      	movs	r3, #8
 8108436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810843a:	e140      	b.n	81086be <UART_SetConfig+0x5a6>
 810843c:	cfff69f3 	.word	0xcfff69f3
 8108440:	58000c00 	.word	0x58000c00
 8108444:	40011000 	.word	0x40011000
 8108448:	58024400 	.word	0x58024400
 810844c:	40004400 	.word	0x40004400
 8108450:	40004800 	.word	0x40004800
 8108454:	40004c00 	.word	0x40004c00
 8108458:	40005000 	.word	0x40005000
 810845c:	2310      	movs	r3, #16
 810845e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108462:	e12c      	b.n	81086be <UART_SetConfig+0x5a6>
 8108464:	2320      	movs	r3, #32
 8108466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810846a:	e128      	b.n	81086be <UART_SetConfig+0x5a6>
 810846c:	2340      	movs	r3, #64	; 0x40
 810846e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108472:	e124      	b.n	81086be <UART_SetConfig+0x5a6>
 8108474:	2380      	movs	r3, #128	; 0x80
 8108476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810847a:	e120      	b.n	81086be <UART_SetConfig+0x5a6>
 810847c:	697b      	ldr	r3, [r7, #20]
 810847e:	681b      	ldr	r3, [r3, #0]
 8108480:	4acb      	ldr	r2, [pc, #812]	; (81087b0 <UART_SetConfig+0x698>)
 8108482:	4293      	cmp	r3, r2
 8108484:	d176      	bne.n	8108574 <UART_SetConfig+0x45c>
 8108486:	4bcb      	ldr	r3, [pc, #812]	; (81087b4 <UART_SetConfig+0x69c>)
 8108488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810848a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810848e:	2b28      	cmp	r3, #40	; 0x28
 8108490:	d86c      	bhi.n	810856c <UART_SetConfig+0x454>
 8108492:	a201      	add	r2, pc, #4	; (adr r2, 8108498 <UART_SetConfig+0x380>)
 8108494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108498:	0810853d 	.word	0x0810853d
 810849c:	0810856d 	.word	0x0810856d
 81084a0:	0810856d 	.word	0x0810856d
 81084a4:	0810856d 	.word	0x0810856d
 81084a8:	0810856d 	.word	0x0810856d
 81084ac:	0810856d 	.word	0x0810856d
 81084b0:	0810856d 	.word	0x0810856d
 81084b4:	0810856d 	.word	0x0810856d
 81084b8:	08108545 	.word	0x08108545
 81084bc:	0810856d 	.word	0x0810856d
 81084c0:	0810856d 	.word	0x0810856d
 81084c4:	0810856d 	.word	0x0810856d
 81084c8:	0810856d 	.word	0x0810856d
 81084cc:	0810856d 	.word	0x0810856d
 81084d0:	0810856d 	.word	0x0810856d
 81084d4:	0810856d 	.word	0x0810856d
 81084d8:	0810854d 	.word	0x0810854d
 81084dc:	0810856d 	.word	0x0810856d
 81084e0:	0810856d 	.word	0x0810856d
 81084e4:	0810856d 	.word	0x0810856d
 81084e8:	0810856d 	.word	0x0810856d
 81084ec:	0810856d 	.word	0x0810856d
 81084f0:	0810856d 	.word	0x0810856d
 81084f4:	0810856d 	.word	0x0810856d
 81084f8:	08108555 	.word	0x08108555
 81084fc:	0810856d 	.word	0x0810856d
 8108500:	0810856d 	.word	0x0810856d
 8108504:	0810856d 	.word	0x0810856d
 8108508:	0810856d 	.word	0x0810856d
 810850c:	0810856d 	.word	0x0810856d
 8108510:	0810856d 	.word	0x0810856d
 8108514:	0810856d 	.word	0x0810856d
 8108518:	0810855d 	.word	0x0810855d
 810851c:	0810856d 	.word	0x0810856d
 8108520:	0810856d 	.word	0x0810856d
 8108524:	0810856d 	.word	0x0810856d
 8108528:	0810856d 	.word	0x0810856d
 810852c:	0810856d 	.word	0x0810856d
 8108530:	0810856d 	.word	0x0810856d
 8108534:	0810856d 	.word	0x0810856d
 8108538:	08108565 	.word	0x08108565
 810853c:	2301      	movs	r3, #1
 810853e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108542:	e0bc      	b.n	81086be <UART_SetConfig+0x5a6>
 8108544:	2304      	movs	r3, #4
 8108546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810854a:	e0b8      	b.n	81086be <UART_SetConfig+0x5a6>
 810854c:	2308      	movs	r3, #8
 810854e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108552:	e0b4      	b.n	81086be <UART_SetConfig+0x5a6>
 8108554:	2310      	movs	r3, #16
 8108556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810855a:	e0b0      	b.n	81086be <UART_SetConfig+0x5a6>
 810855c:	2320      	movs	r3, #32
 810855e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108562:	e0ac      	b.n	81086be <UART_SetConfig+0x5a6>
 8108564:	2340      	movs	r3, #64	; 0x40
 8108566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810856a:	e0a8      	b.n	81086be <UART_SetConfig+0x5a6>
 810856c:	2380      	movs	r3, #128	; 0x80
 810856e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108572:	e0a4      	b.n	81086be <UART_SetConfig+0x5a6>
 8108574:	697b      	ldr	r3, [r7, #20]
 8108576:	681b      	ldr	r3, [r3, #0]
 8108578:	4a8f      	ldr	r2, [pc, #572]	; (81087b8 <UART_SetConfig+0x6a0>)
 810857a:	4293      	cmp	r3, r2
 810857c:	d130      	bne.n	81085e0 <UART_SetConfig+0x4c8>
 810857e:	4b8d      	ldr	r3, [pc, #564]	; (81087b4 <UART_SetConfig+0x69c>)
 8108580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108582:	f003 0307 	and.w	r3, r3, #7
 8108586:	2b05      	cmp	r3, #5
 8108588:	d826      	bhi.n	81085d8 <UART_SetConfig+0x4c0>
 810858a:	a201      	add	r2, pc, #4	; (adr r2, 8108590 <UART_SetConfig+0x478>)
 810858c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108590:	081085a9 	.word	0x081085a9
 8108594:	081085b1 	.word	0x081085b1
 8108598:	081085b9 	.word	0x081085b9
 810859c:	081085c1 	.word	0x081085c1
 81085a0:	081085c9 	.word	0x081085c9
 81085a4:	081085d1 	.word	0x081085d1
 81085a8:	2300      	movs	r3, #0
 81085aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81085ae:	e086      	b.n	81086be <UART_SetConfig+0x5a6>
 81085b0:	2304      	movs	r3, #4
 81085b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81085b6:	e082      	b.n	81086be <UART_SetConfig+0x5a6>
 81085b8:	2308      	movs	r3, #8
 81085ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81085be:	e07e      	b.n	81086be <UART_SetConfig+0x5a6>
 81085c0:	2310      	movs	r3, #16
 81085c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81085c6:	e07a      	b.n	81086be <UART_SetConfig+0x5a6>
 81085c8:	2320      	movs	r3, #32
 81085ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81085ce:	e076      	b.n	81086be <UART_SetConfig+0x5a6>
 81085d0:	2340      	movs	r3, #64	; 0x40
 81085d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81085d6:	e072      	b.n	81086be <UART_SetConfig+0x5a6>
 81085d8:	2380      	movs	r3, #128	; 0x80
 81085da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81085de:	e06e      	b.n	81086be <UART_SetConfig+0x5a6>
 81085e0:	697b      	ldr	r3, [r7, #20]
 81085e2:	681b      	ldr	r3, [r3, #0]
 81085e4:	4a75      	ldr	r2, [pc, #468]	; (81087bc <UART_SetConfig+0x6a4>)
 81085e6:	4293      	cmp	r3, r2
 81085e8:	d130      	bne.n	810864c <UART_SetConfig+0x534>
 81085ea:	4b72      	ldr	r3, [pc, #456]	; (81087b4 <UART_SetConfig+0x69c>)
 81085ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81085ee:	f003 0307 	and.w	r3, r3, #7
 81085f2:	2b05      	cmp	r3, #5
 81085f4:	d826      	bhi.n	8108644 <UART_SetConfig+0x52c>
 81085f6:	a201      	add	r2, pc, #4	; (adr r2, 81085fc <UART_SetConfig+0x4e4>)
 81085f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81085fc:	08108615 	.word	0x08108615
 8108600:	0810861d 	.word	0x0810861d
 8108604:	08108625 	.word	0x08108625
 8108608:	0810862d 	.word	0x0810862d
 810860c:	08108635 	.word	0x08108635
 8108610:	0810863d 	.word	0x0810863d
 8108614:	2300      	movs	r3, #0
 8108616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810861a:	e050      	b.n	81086be <UART_SetConfig+0x5a6>
 810861c:	2304      	movs	r3, #4
 810861e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108622:	e04c      	b.n	81086be <UART_SetConfig+0x5a6>
 8108624:	2308      	movs	r3, #8
 8108626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810862a:	e048      	b.n	81086be <UART_SetConfig+0x5a6>
 810862c:	2310      	movs	r3, #16
 810862e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108632:	e044      	b.n	81086be <UART_SetConfig+0x5a6>
 8108634:	2320      	movs	r3, #32
 8108636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810863a:	e040      	b.n	81086be <UART_SetConfig+0x5a6>
 810863c:	2340      	movs	r3, #64	; 0x40
 810863e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108642:	e03c      	b.n	81086be <UART_SetConfig+0x5a6>
 8108644:	2380      	movs	r3, #128	; 0x80
 8108646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810864a:	e038      	b.n	81086be <UART_SetConfig+0x5a6>
 810864c:	697b      	ldr	r3, [r7, #20]
 810864e:	681b      	ldr	r3, [r3, #0]
 8108650:	4a5b      	ldr	r2, [pc, #364]	; (81087c0 <UART_SetConfig+0x6a8>)
 8108652:	4293      	cmp	r3, r2
 8108654:	d130      	bne.n	81086b8 <UART_SetConfig+0x5a0>
 8108656:	4b57      	ldr	r3, [pc, #348]	; (81087b4 <UART_SetConfig+0x69c>)
 8108658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810865a:	f003 0307 	and.w	r3, r3, #7
 810865e:	2b05      	cmp	r3, #5
 8108660:	d826      	bhi.n	81086b0 <UART_SetConfig+0x598>
 8108662:	a201      	add	r2, pc, #4	; (adr r2, 8108668 <UART_SetConfig+0x550>)
 8108664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108668:	08108681 	.word	0x08108681
 810866c:	08108689 	.word	0x08108689
 8108670:	08108691 	.word	0x08108691
 8108674:	08108699 	.word	0x08108699
 8108678:	081086a1 	.word	0x081086a1
 810867c:	081086a9 	.word	0x081086a9
 8108680:	2302      	movs	r3, #2
 8108682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108686:	e01a      	b.n	81086be <UART_SetConfig+0x5a6>
 8108688:	2304      	movs	r3, #4
 810868a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810868e:	e016      	b.n	81086be <UART_SetConfig+0x5a6>
 8108690:	2308      	movs	r3, #8
 8108692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108696:	e012      	b.n	81086be <UART_SetConfig+0x5a6>
 8108698:	2310      	movs	r3, #16
 810869a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810869e:	e00e      	b.n	81086be <UART_SetConfig+0x5a6>
 81086a0:	2320      	movs	r3, #32
 81086a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81086a6:	e00a      	b.n	81086be <UART_SetConfig+0x5a6>
 81086a8:	2340      	movs	r3, #64	; 0x40
 81086aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81086ae:	e006      	b.n	81086be <UART_SetConfig+0x5a6>
 81086b0:	2380      	movs	r3, #128	; 0x80
 81086b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81086b6:	e002      	b.n	81086be <UART_SetConfig+0x5a6>
 81086b8:	2380      	movs	r3, #128	; 0x80
 81086ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 81086be:	697b      	ldr	r3, [r7, #20]
 81086c0:	681b      	ldr	r3, [r3, #0]
 81086c2:	4a3f      	ldr	r2, [pc, #252]	; (81087c0 <UART_SetConfig+0x6a8>)
 81086c4:	4293      	cmp	r3, r2
 81086c6:	f040 80f8 	bne.w	81088ba <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 81086ca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 81086ce:	2b20      	cmp	r3, #32
 81086d0:	dc46      	bgt.n	8108760 <UART_SetConfig+0x648>
 81086d2:	2b02      	cmp	r3, #2
 81086d4:	f2c0 8082 	blt.w	81087dc <UART_SetConfig+0x6c4>
 81086d8:	3b02      	subs	r3, #2
 81086da:	2b1e      	cmp	r3, #30
 81086dc:	d87e      	bhi.n	81087dc <UART_SetConfig+0x6c4>
 81086de:	a201      	add	r2, pc, #4	; (adr r2, 81086e4 <UART_SetConfig+0x5cc>)
 81086e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81086e4:	08108767 	.word	0x08108767
 81086e8:	081087dd 	.word	0x081087dd
 81086ec:	0810876f 	.word	0x0810876f
 81086f0:	081087dd 	.word	0x081087dd
 81086f4:	081087dd 	.word	0x081087dd
 81086f8:	081087dd 	.word	0x081087dd
 81086fc:	0810877f 	.word	0x0810877f
 8108700:	081087dd 	.word	0x081087dd
 8108704:	081087dd 	.word	0x081087dd
 8108708:	081087dd 	.word	0x081087dd
 810870c:	081087dd 	.word	0x081087dd
 8108710:	081087dd 	.word	0x081087dd
 8108714:	081087dd 	.word	0x081087dd
 8108718:	081087dd 	.word	0x081087dd
 810871c:	0810878f 	.word	0x0810878f
 8108720:	081087dd 	.word	0x081087dd
 8108724:	081087dd 	.word	0x081087dd
 8108728:	081087dd 	.word	0x081087dd
 810872c:	081087dd 	.word	0x081087dd
 8108730:	081087dd 	.word	0x081087dd
 8108734:	081087dd 	.word	0x081087dd
 8108738:	081087dd 	.word	0x081087dd
 810873c:	081087dd 	.word	0x081087dd
 8108740:	081087dd 	.word	0x081087dd
 8108744:	081087dd 	.word	0x081087dd
 8108748:	081087dd 	.word	0x081087dd
 810874c:	081087dd 	.word	0x081087dd
 8108750:	081087dd 	.word	0x081087dd
 8108754:	081087dd 	.word	0x081087dd
 8108758:	081087dd 	.word	0x081087dd
 810875c:	081087cf 	.word	0x081087cf
 8108760:	2b40      	cmp	r3, #64	; 0x40
 8108762:	d037      	beq.n	81087d4 <UART_SetConfig+0x6bc>
 8108764:	e03a      	b.n	81087dc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8108766:	f7fd fd4d 	bl	8106204 <HAL_RCCEx_GetD3PCLK1Freq>
 810876a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810876c:	e03c      	b.n	81087e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810876e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8108772:	4618      	mov	r0, r3
 8108774:	f7fd fd5c 	bl	8106230 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8108778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810877a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810877c:	e034      	b.n	81087e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810877e:	f107 0318 	add.w	r3, r7, #24
 8108782:	4618      	mov	r0, r3
 8108784:	f7fd fea8 	bl	81064d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8108788:	69fb      	ldr	r3, [r7, #28]
 810878a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810878c:	e02c      	b.n	81087e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810878e:	4b09      	ldr	r3, [pc, #36]	; (81087b4 <UART_SetConfig+0x69c>)
 8108790:	681b      	ldr	r3, [r3, #0]
 8108792:	f003 0320 	and.w	r3, r3, #32
 8108796:	2b00      	cmp	r3, #0
 8108798:	d016      	beq.n	81087c8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810879a:	4b06      	ldr	r3, [pc, #24]	; (81087b4 <UART_SetConfig+0x69c>)
 810879c:	681b      	ldr	r3, [r3, #0]
 810879e:	08db      	lsrs	r3, r3, #3
 81087a0:	f003 0303 	and.w	r3, r3, #3
 81087a4:	4a07      	ldr	r2, [pc, #28]	; (81087c4 <UART_SetConfig+0x6ac>)
 81087a6:	fa22 f303 	lsr.w	r3, r2, r3
 81087aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81087ac:	e01c      	b.n	81087e8 <UART_SetConfig+0x6d0>
 81087ae:	bf00      	nop
 81087b0:	40011400 	.word	0x40011400
 81087b4:	58024400 	.word	0x58024400
 81087b8:	40007800 	.word	0x40007800
 81087bc:	40007c00 	.word	0x40007c00
 81087c0:	58000c00 	.word	0x58000c00
 81087c4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 81087c8:	4b9d      	ldr	r3, [pc, #628]	; (8108a40 <UART_SetConfig+0x928>)
 81087ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81087cc:	e00c      	b.n	81087e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81087ce:	4b9d      	ldr	r3, [pc, #628]	; (8108a44 <UART_SetConfig+0x92c>)
 81087d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81087d2:	e009      	b.n	81087e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81087d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81087d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81087da:	e005      	b.n	81087e8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 81087dc:	2300      	movs	r3, #0
 81087de:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 81087e0:	2301      	movs	r3, #1
 81087e2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 81087e6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 81087e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81087ea:	2b00      	cmp	r3, #0
 81087ec:	f000 81de 	beq.w	8108bac <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 81087f0:	697b      	ldr	r3, [r7, #20]
 81087f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81087f4:	4a94      	ldr	r2, [pc, #592]	; (8108a48 <UART_SetConfig+0x930>)
 81087f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81087fa:	461a      	mov	r2, r3
 81087fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81087fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8108802:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8108804:	697b      	ldr	r3, [r7, #20]
 8108806:	685a      	ldr	r2, [r3, #4]
 8108808:	4613      	mov	r3, r2
 810880a:	005b      	lsls	r3, r3, #1
 810880c:	4413      	add	r3, r2
 810880e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8108810:	429a      	cmp	r2, r3
 8108812:	d305      	bcc.n	8108820 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8108814:	697b      	ldr	r3, [r7, #20]
 8108816:	685b      	ldr	r3, [r3, #4]
 8108818:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810881a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810881c:	429a      	cmp	r2, r3
 810881e:	d903      	bls.n	8108828 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8108820:	2301      	movs	r3, #1
 8108822:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8108826:	e1c1      	b.n	8108bac <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810882a:	2200      	movs	r2, #0
 810882c:	60bb      	str	r3, [r7, #8]
 810882e:	60fa      	str	r2, [r7, #12]
 8108830:	697b      	ldr	r3, [r7, #20]
 8108832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108834:	4a84      	ldr	r2, [pc, #528]	; (8108a48 <UART_SetConfig+0x930>)
 8108836:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810883a:	b29b      	uxth	r3, r3
 810883c:	2200      	movs	r2, #0
 810883e:	603b      	str	r3, [r7, #0]
 8108840:	607a      	str	r2, [r7, #4]
 8108842:	e9d7 2300 	ldrd	r2, r3, [r7]
 8108846:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810884a:	f7f8 faa5 	bl	8100d98 <__aeabi_uldivmod>
 810884e:	4602      	mov	r2, r0
 8108850:	460b      	mov	r3, r1
 8108852:	4610      	mov	r0, r2
 8108854:	4619      	mov	r1, r3
 8108856:	f04f 0200 	mov.w	r2, #0
 810885a:	f04f 0300 	mov.w	r3, #0
 810885e:	020b      	lsls	r3, r1, #8
 8108860:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8108864:	0202      	lsls	r2, r0, #8
 8108866:	6979      	ldr	r1, [r7, #20]
 8108868:	6849      	ldr	r1, [r1, #4]
 810886a:	0849      	lsrs	r1, r1, #1
 810886c:	2000      	movs	r0, #0
 810886e:	460c      	mov	r4, r1
 8108870:	4605      	mov	r5, r0
 8108872:	eb12 0804 	adds.w	r8, r2, r4
 8108876:	eb43 0905 	adc.w	r9, r3, r5
 810887a:	697b      	ldr	r3, [r7, #20]
 810887c:	685b      	ldr	r3, [r3, #4]
 810887e:	2200      	movs	r2, #0
 8108880:	469a      	mov	sl, r3
 8108882:	4693      	mov	fp, r2
 8108884:	4652      	mov	r2, sl
 8108886:	465b      	mov	r3, fp
 8108888:	4640      	mov	r0, r8
 810888a:	4649      	mov	r1, r9
 810888c:	f7f8 fa84 	bl	8100d98 <__aeabi_uldivmod>
 8108890:	4602      	mov	r2, r0
 8108892:	460b      	mov	r3, r1
 8108894:	4613      	mov	r3, r2
 8108896:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8108898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810889a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810889e:	d308      	bcc.n	81088b2 <UART_SetConfig+0x79a>
 81088a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81088a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81088a6:	d204      	bcs.n	81088b2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 81088a8:	697b      	ldr	r3, [r7, #20]
 81088aa:	681b      	ldr	r3, [r3, #0]
 81088ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 81088ae:	60da      	str	r2, [r3, #12]
 81088b0:	e17c      	b.n	8108bac <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 81088b2:	2301      	movs	r3, #1
 81088b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 81088b8:	e178      	b.n	8108bac <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 81088ba:	697b      	ldr	r3, [r7, #20]
 81088bc:	69db      	ldr	r3, [r3, #28]
 81088be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81088c2:	f040 80c5 	bne.w	8108a50 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 81088c6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 81088ca:	2b20      	cmp	r3, #32
 81088cc:	dc48      	bgt.n	8108960 <UART_SetConfig+0x848>
 81088ce:	2b00      	cmp	r3, #0
 81088d0:	db7b      	blt.n	81089ca <UART_SetConfig+0x8b2>
 81088d2:	2b20      	cmp	r3, #32
 81088d4:	d879      	bhi.n	81089ca <UART_SetConfig+0x8b2>
 81088d6:	a201      	add	r2, pc, #4	; (adr r2, 81088dc <UART_SetConfig+0x7c4>)
 81088d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81088dc:	08108967 	.word	0x08108967
 81088e0:	0810896f 	.word	0x0810896f
 81088e4:	081089cb 	.word	0x081089cb
 81088e8:	081089cb 	.word	0x081089cb
 81088ec:	08108977 	.word	0x08108977
 81088f0:	081089cb 	.word	0x081089cb
 81088f4:	081089cb 	.word	0x081089cb
 81088f8:	081089cb 	.word	0x081089cb
 81088fc:	08108987 	.word	0x08108987
 8108900:	081089cb 	.word	0x081089cb
 8108904:	081089cb 	.word	0x081089cb
 8108908:	081089cb 	.word	0x081089cb
 810890c:	081089cb 	.word	0x081089cb
 8108910:	081089cb 	.word	0x081089cb
 8108914:	081089cb 	.word	0x081089cb
 8108918:	081089cb 	.word	0x081089cb
 810891c:	08108997 	.word	0x08108997
 8108920:	081089cb 	.word	0x081089cb
 8108924:	081089cb 	.word	0x081089cb
 8108928:	081089cb 	.word	0x081089cb
 810892c:	081089cb 	.word	0x081089cb
 8108930:	081089cb 	.word	0x081089cb
 8108934:	081089cb 	.word	0x081089cb
 8108938:	081089cb 	.word	0x081089cb
 810893c:	081089cb 	.word	0x081089cb
 8108940:	081089cb 	.word	0x081089cb
 8108944:	081089cb 	.word	0x081089cb
 8108948:	081089cb 	.word	0x081089cb
 810894c:	081089cb 	.word	0x081089cb
 8108950:	081089cb 	.word	0x081089cb
 8108954:	081089cb 	.word	0x081089cb
 8108958:	081089cb 	.word	0x081089cb
 810895c:	081089bd 	.word	0x081089bd
 8108960:	2b40      	cmp	r3, #64	; 0x40
 8108962:	d02e      	beq.n	81089c2 <UART_SetConfig+0x8aa>
 8108964:	e031      	b.n	81089ca <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8108966:	f7fb fc97 	bl	8104298 <HAL_RCC_GetPCLK1Freq>
 810896a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810896c:	e033      	b.n	81089d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810896e:	f7fb fca9 	bl	81042c4 <HAL_RCC_GetPCLK2Freq>
 8108972:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8108974:	e02f      	b.n	81089d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108976:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810897a:	4618      	mov	r0, r3
 810897c:	f7fd fc58 	bl	8106230 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8108980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108982:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108984:	e027      	b.n	81089d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108986:	f107 0318 	add.w	r3, r7, #24
 810898a:	4618      	mov	r0, r3
 810898c:	f7fd fda4 	bl	81064d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8108990:	69fb      	ldr	r3, [r7, #28]
 8108992:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108994:	e01f      	b.n	81089d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108996:	4b2d      	ldr	r3, [pc, #180]	; (8108a4c <UART_SetConfig+0x934>)
 8108998:	681b      	ldr	r3, [r3, #0]
 810899a:	f003 0320 	and.w	r3, r3, #32
 810899e:	2b00      	cmp	r3, #0
 81089a0:	d009      	beq.n	81089b6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81089a2:	4b2a      	ldr	r3, [pc, #168]	; (8108a4c <UART_SetConfig+0x934>)
 81089a4:	681b      	ldr	r3, [r3, #0]
 81089a6:	08db      	lsrs	r3, r3, #3
 81089a8:	f003 0303 	and.w	r3, r3, #3
 81089ac:	4a24      	ldr	r2, [pc, #144]	; (8108a40 <UART_SetConfig+0x928>)
 81089ae:	fa22 f303 	lsr.w	r3, r2, r3
 81089b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81089b4:	e00f      	b.n	81089d6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 81089b6:	4b22      	ldr	r3, [pc, #136]	; (8108a40 <UART_SetConfig+0x928>)
 81089b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81089ba:	e00c      	b.n	81089d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81089bc:	4b21      	ldr	r3, [pc, #132]	; (8108a44 <UART_SetConfig+0x92c>)
 81089be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81089c0:	e009      	b.n	81089d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81089c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81089c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81089c8:	e005      	b.n	81089d6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 81089ca:	2300      	movs	r3, #0
 81089cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 81089ce:	2301      	movs	r3, #1
 81089d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 81089d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 81089d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81089d8:	2b00      	cmp	r3, #0
 81089da:	f000 80e7 	beq.w	8108bac <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81089de:	697b      	ldr	r3, [r7, #20]
 81089e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81089e2:	4a19      	ldr	r2, [pc, #100]	; (8108a48 <UART_SetConfig+0x930>)
 81089e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81089e8:	461a      	mov	r2, r3
 81089ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81089ec:	fbb3 f3f2 	udiv	r3, r3, r2
 81089f0:	005a      	lsls	r2, r3, #1
 81089f2:	697b      	ldr	r3, [r7, #20]
 81089f4:	685b      	ldr	r3, [r3, #4]
 81089f6:	085b      	lsrs	r3, r3, #1
 81089f8:	441a      	add	r2, r3
 81089fa:	697b      	ldr	r3, [r7, #20]
 81089fc:	685b      	ldr	r3, [r3, #4]
 81089fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8108a02:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8108a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108a06:	2b0f      	cmp	r3, #15
 8108a08:	d916      	bls.n	8108a38 <UART_SetConfig+0x920>
 8108a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8108a10:	d212      	bcs.n	8108a38 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8108a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108a14:	b29b      	uxth	r3, r3
 8108a16:	f023 030f 	bic.w	r3, r3, #15
 8108a1a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8108a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108a1e:	085b      	lsrs	r3, r3, #1
 8108a20:	b29b      	uxth	r3, r3
 8108a22:	f003 0307 	and.w	r3, r3, #7
 8108a26:	b29a      	uxth	r2, r3
 8108a28:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8108a2a:	4313      	orrs	r3, r2
 8108a2c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8108a2e:	697b      	ldr	r3, [r7, #20]
 8108a30:	681b      	ldr	r3, [r3, #0]
 8108a32:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8108a34:	60da      	str	r2, [r3, #12]
 8108a36:	e0b9      	b.n	8108bac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8108a38:	2301      	movs	r3, #1
 8108a3a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8108a3e:	e0b5      	b.n	8108bac <UART_SetConfig+0xa94>
 8108a40:	03d09000 	.word	0x03d09000
 8108a44:	003d0900 	.word	0x003d0900
 8108a48:	0810dbd4 	.word	0x0810dbd4
 8108a4c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8108a50:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8108a54:	2b20      	cmp	r3, #32
 8108a56:	dc49      	bgt.n	8108aec <UART_SetConfig+0x9d4>
 8108a58:	2b00      	cmp	r3, #0
 8108a5a:	db7c      	blt.n	8108b56 <UART_SetConfig+0xa3e>
 8108a5c:	2b20      	cmp	r3, #32
 8108a5e:	d87a      	bhi.n	8108b56 <UART_SetConfig+0xa3e>
 8108a60:	a201      	add	r2, pc, #4	; (adr r2, 8108a68 <UART_SetConfig+0x950>)
 8108a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108a66:	bf00      	nop
 8108a68:	08108af3 	.word	0x08108af3
 8108a6c:	08108afb 	.word	0x08108afb
 8108a70:	08108b57 	.word	0x08108b57
 8108a74:	08108b57 	.word	0x08108b57
 8108a78:	08108b03 	.word	0x08108b03
 8108a7c:	08108b57 	.word	0x08108b57
 8108a80:	08108b57 	.word	0x08108b57
 8108a84:	08108b57 	.word	0x08108b57
 8108a88:	08108b13 	.word	0x08108b13
 8108a8c:	08108b57 	.word	0x08108b57
 8108a90:	08108b57 	.word	0x08108b57
 8108a94:	08108b57 	.word	0x08108b57
 8108a98:	08108b57 	.word	0x08108b57
 8108a9c:	08108b57 	.word	0x08108b57
 8108aa0:	08108b57 	.word	0x08108b57
 8108aa4:	08108b57 	.word	0x08108b57
 8108aa8:	08108b23 	.word	0x08108b23
 8108aac:	08108b57 	.word	0x08108b57
 8108ab0:	08108b57 	.word	0x08108b57
 8108ab4:	08108b57 	.word	0x08108b57
 8108ab8:	08108b57 	.word	0x08108b57
 8108abc:	08108b57 	.word	0x08108b57
 8108ac0:	08108b57 	.word	0x08108b57
 8108ac4:	08108b57 	.word	0x08108b57
 8108ac8:	08108b57 	.word	0x08108b57
 8108acc:	08108b57 	.word	0x08108b57
 8108ad0:	08108b57 	.word	0x08108b57
 8108ad4:	08108b57 	.word	0x08108b57
 8108ad8:	08108b57 	.word	0x08108b57
 8108adc:	08108b57 	.word	0x08108b57
 8108ae0:	08108b57 	.word	0x08108b57
 8108ae4:	08108b57 	.word	0x08108b57
 8108ae8:	08108b49 	.word	0x08108b49
 8108aec:	2b40      	cmp	r3, #64	; 0x40
 8108aee:	d02e      	beq.n	8108b4e <UART_SetConfig+0xa36>
 8108af0:	e031      	b.n	8108b56 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8108af2:	f7fb fbd1 	bl	8104298 <HAL_RCC_GetPCLK1Freq>
 8108af6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8108af8:	e033      	b.n	8108b62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8108afa:	f7fb fbe3 	bl	81042c4 <HAL_RCC_GetPCLK2Freq>
 8108afe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8108b00:	e02f      	b.n	8108b62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8108b06:	4618      	mov	r0, r3
 8108b08:	f7fd fb92 	bl	8106230 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8108b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108b10:	e027      	b.n	8108b62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108b12:	f107 0318 	add.w	r3, r7, #24
 8108b16:	4618      	mov	r0, r3
 8108b18:	f7fd fcde 	bl	81064d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8108b1c:	69fb      	ldr	r3, [r7, #28]
 8108b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108b20:	e01f      	b.n	8108b62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108b22:	4b2d      	ldr	r3, [pc, #180]	; (8108bd8 <UART_SetConfig+0xac0>)
 8108b24:	681b      	ldr	r3, [r3, #0]
 8108b26:	f003 0320 	and.w	r3, r3, #32
 8108b2a:	2b00      	cmp	r3, #0
 8108b2c:	d009      	beq.n	8108b42 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8108b2e:	4b2a      	ldr	r3, [pc, #168]	; (8108bd8 <UART_SetConfig+0xac0>)
 8108b30:	681b      	ldr	r3, [r3, #0]
 8108b32:	08db      	lsrs	r3, r3, #3
 8108b34:	f003 0303 	and.w	r3, r3, #3
 8108b38:	4a28      	ldr	r2, [pc, #160]	; (8108bdc <UART_SetConfig+0xac4>)
 8108b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8108b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8108b40:	e00f      	b.n	8108b62 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8108b42:	4b26      	ldr	r3, [pc, #152]	; (8108bdc <UART_SetConfig+0xac4>)
 8108b44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108b46:	e00c      	b.n	8108b62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8108b48:	4b25      	ldr	r3, [pc, #148]	; (8108be0 <UART_SetConfig+0xac8>)
 8108b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108b4c:	e009      	b.n	8108b62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8108b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8108b52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108b54:	e005      	b.n	8108b62 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8108b56:	2300      	movs	r3, #0
 8108b58:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8108b5a:	2301      	movs	r3, #1
 8108b5c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8108b60:	bf00      	nop
    }

    if (pclk != 0U)
 8108b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108b64:	2b00      	cmp	r3, #0
 8108b66:	d021      	beq.n	8108bac <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108b68:	697b      	ldr	r3, [r7, #20]
 8108b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108b6c:	4a1d      	ldr	r2, [pc, #116]	; (8108be4 <UART_SetConfig+0xacc>)
 8108b6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108b72:	461a      	mov	r2, r3
 8108b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108b76:	fbb3 f2f2 	udiv	r2, r3, r2
 8108b7a:	697b      	ldr	r3, [r7, #20]
 8108b7c:	685b      	ldr	r3, [r3, #4]
 8108b7e:	085b      	lsrs	r3, r3, #1
 8108b80:	441a      	add	r2, r3
 8108b82:	697b      	ldr	r3, [r7, #20]
 8108b84:	685b      	ldr	r3, [r3, #4]
 8108b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8108b8a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8108b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108b8e:	2b0f      	cmp	r3, #15
 8108b90:	d909      	bls.n	8108ba6 <UART_SetConfig+0xa8e>
 8108b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8108b98:	d205      	bcs.n	8108ba6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8108b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108b9c:	b29a      	uxth	r2, r3
 8108b9e:	697b      	ldr	r3, [r7, #20]
 8108ba0:	681b      	ldr	r3, [r3, #0]
 8108ba2:	60da      	str	r2, [r3, #12]
 8108ba4:	e002      	b.n	8108bac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8108ba6:	2301      	movs	r3, #1
 8108ba8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8108bac:	697b      	ldr	r3, [r7, #20]
 8108bae:	2201      	movs	r2, #1
 8108bb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8108bb4:	697b      	ldr	r3, [r7, #20]
 8108bb6:	2201      	movs	r2, #1
 8108bb8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8108bbc:	697b      	ldr	r3, [r7, #20]
 8108bbe:	2200      	movs	r2, #0
 8108bc0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8108bc2:	697b      	ldr	r3, [r7, #20]
 8108bc4:	2200      	movs	r2, #0
 8108bc6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8108bc8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8108bcc:	4618      	mov	r0, r3
 8108bce:	3748      	adds	r7, #72	; 0x48
 8108bd0:	46bd      	mov	sp, r7
 8108bd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8108bd6:	bf00      	nop
 8108bd8:	58024400 	.word	0x58024400
 8108bdc:	03d09000 	.word	0x03d09000
 8108be0:	003d0900 	.word	0x003d0900
 8108be4:	0810dbd4 	.word	0x0810dbd4

08108be8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8108be8:	b480      	push	{r7}
 8108bea:	b083      	sub	sp, #12
 8108bec:	af00      	add	r7, sp, #0
 8108bee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8108bf0:	687b      	ldr	r3, [r7, #4]
 8108bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108bf4:	f003 0301 	and.w	r3, r3, #1
 8108bf8:	2b00      	cmp	r3, #0
 8108bfa:	d00a      	beq.n	8108c12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8108bfc:	687b      	ldr	r3, [r7, #4]
 8108bfe:	681b      	ldr	r3, [r3, #0]
 8108c00:	685b      	ldr	r3, [r3, #4]
 8108c02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8108c06:	687b      	ldr	r3, [r7, #4]
 8108c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8108c0a:	687b      	ldr	r3, [r7, #4]
 8108c0c:	681b      	ldr	r3, [r3, #0]
 8108c0e:	430a      	orrs	r2, r1
 8108c10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8108c12:	687b      	ldr	r3, [r7, #4]
 8108c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108c16:	f003 0302 	and.w	r3, r3, #2
 8108c1a:	2b00      	cmp	r3, #0
 8108c1c:	d00a      	beq.n	8108c34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8108c1e:	687b      	ldr	r3, [r7, #4]
 8108c20:	681b      	ldr	r3, [r3, #0]
 8108c22:	685b      	ldr	r3, [r3, #4]
 8108c24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8108c28:	687b      	ldr	r3, [r7, #4]
 8108c2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8108c2c:	687b      	ldr	r3, [r7, #4]
 8108c2e:	681b      	ldr	r3, [r3, #0]
 8108c30:	430a      	orrs	r2, r1
 8108c32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8108c34:	687b      	ldr	r3, [r7, #4]
 8108c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108c38:	f003 0304 	and.w	r3, r3, #4
 8108c3c:	2b00      	cmp	r3, #0
 8108c3e:	d00a      	beq.n	8108c56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8108c40:	687b      	ldr	r3, [r7, #4]
 8108c42:	681b      	ldr	r3, [r3, #0]
 8108c44:	685b      	ldr	r3, [r3, #4]
 8108c46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8108c4a:	687b      	ldr	r3, [r7, #4]
 8108c4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8108c4e:	687b      	ldr	r3, [r7, #4]
 8108c50:	681b      	ldr	r3, [r3, #0]
 8108c52:	430a      	orrs	r2, r1
 8108c54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8108c56:	687b      	ldr	r3, [r7, #4]
 8108c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108c5a:	f003 0308 	and.w	r3, r3, #8
 8108c5e:	2b00      	cmp	r3, #0
 8108c60:	d00a      	beq.n	8108c78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8108c62:	687b      	ldr	r3, [r7, #4]
 8108c64:	681b      	ldr	r3, [r3, #0]
 8108c66:	685b      	ldr	r3, [r3, #4]
 8108c68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8108c6c:	687b      	ldr	r3, [r7, #4]
 8108c6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8108c70:	687b      	ldr	r3, [r7, #4]
 8108c72:	681b      	ldr	r3, [r3, #0]
 8108c74:	430a      	orrs	r2, r1
 8108c76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8108c78:	687b      	ldr	r3, [r7, #4]
 8108c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108c7c:	f003 0310 	and.w	r3, r3, #16
 8108c80:	2b00      	cmp	r3, #0
 8108c82:	d00a      	beq.n	8108c9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8108c84:	687b      	ldr	r3, [r7, #4]
 8108c86:	681b      	ldr	r3, [r3, #0]
 8108c88:	689b      	ldr	r3, [r3, #8]
 8108c8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8108c8e:	687b      	ldr	r3, [r7, #4]
 8108c90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8108c92:	687b      	ldr	r3, [r7, #4]
 8108c94:	681b      	ldr	r3, [r3, #0]
 8108c96:	430a      	orrs	r2, r1
 8108c98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8108c9a:	687b      	ldr	r3, [r7, #4]
 8108c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108c9e:	f003 0320 	and.w	r3, r3, #32
 8108ca2:	2b00      	cmp	r3, #0
 8108ca4:	d00a      	beq.n	8108cbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8108ca6:	687b      	ldr	r3, [r7, #4]
 8108ca8:	681b      	ldr	r3, [r3, #0]
 8108caa:	689b      	ldr	r3, [r3, #8]
 8108cac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8108cb0:	687b      	ldr	r3, [r7, #4]
 8108cb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8108cb4:	687b      	ldr	r3, [r7, #4]
 8108cb6:	681b      	ldr	r3, [r3, #0]
 8108cb8:	430a      	orrs	r2, r1
 8108cba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8108cbc:	687b      	ldr	r3, [r7, #4]
 8108cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8108cc4:	2b00      	cmp	r3, #0
 8108cc6:	d01a      	beq.n	8108cfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8108cc8:	687b      	ldr	r3, [r7, #4]
 8108cca:	681b      	ldr	r3, [r3, #0]
 8108ccc:	685b      	ldr	r3, [r3, #4]
 8108cce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8108cd2:	687b      	ldr	r3, [r7, #4]
 8108cd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8108cd6:	687b      	ldr	r3, [r7, #4]
 8108cd8:	681b      	ldr	r3, [r3, #0]
 8108cda:	430a      	orrs	r2, r1
 8108cdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8108cde:	687b      	ldr	r3, [r7, #4]
 8108ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108ce2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8108ce6:	d10a      	bne.n	8108cfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8108ce8:	687b      	ldr	r3, [r7, #4]
 8108cea:	681b      	ldr	r3, [r3, #0]
 8108cec:	685b      	ldr	r3, [r3, #4]
 8108cee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8108cf2:	687b      	ldr	r3, [r7, #4]
 8108cf4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8108cf6:	687b      	ldr	r3, [r7, #4]
 8108cf8:	681b      	ldr	r3, [r3, #0]
 8108cfa:	430a      	orrs	r2, r1
 8108cfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8108cfe:	687b      	ldr	r3, [r7, #4]
 8108d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8108d06:	2b00      	cmp	r3, #0
 8108d08:	d00a      	beq.n	8108d20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8108d0a:	687b      	ldr	r3, [r7, #4]
 8108d0c:	681b      	ldr	r3, [r3, #0]
 8108d0e:	685b      	ldr	r3, [r3, #4]
 8108d10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8108d14:	687b      	ldr	r3, [r7, #4]
 8108d16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8108d18:	687b      	ldr	r3, [r7, #4]
 8108d1a:	681b      	ldr	r3, [r3, #0]
 8108d1c:	430a      	orrs	r2, r1
 8108d1e:	605a      	str	r2, [r3, #4]
  }
}
 8108d20:	bf00      	nop
 8108d22:	370c      	adds	r7, #12
 8108d24:	46bd      	mov	sp, r7
 8108d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108d2a:	4770      	bx	lr

08108d2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8108d2c:	b580      	push	{r7, lr}
 8108d2e:	b098      	sub	sp, #96	; 0x60
 8108d30:	af02      	add	r7, sp, #8
 8108d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8108d34:	687b      	ldr	r3, [r7, #4]
 8108d36:	2200      	movs	r2, #0
 8108d38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8108d3c:	f7f9 fa18 	bl	8102170 <HAL_GetTick>
 8108d40:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8108d42:	687b      	ldr	r3, [r7, #4]
 8108d44:	681b      	ldr	r3, [r3, #0]
 8108d46:	681b      	ldr	r3, [r3, #0]
 8108d48:	f003 0308 	and.w	r3, r3, #8
 8108d4c:	2b08      	cmp	r3, #8
 8108d4e:	d12f      	bne.n	8108db0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8108d50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8108d54:	9300      	str	r3, [sp, #0]
 8108d56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8108d58:	2200      	movs	r2, #0
 8108d5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8108d5e:	6878      	ldr	r0, [r7, #4]
 8108d60:	f000 f88e 	bl	8108e80 <UART_WaitOnFlagUntilTimeout>
 8108d64:	4603      	mov	r3, r0
 8108d66:	2b00      	cmp	r3, #0
 8108d68:	d022      	beq.n	8108db0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8108d6a:	687b      	ldr	r3, [r7, #4]
 8108d6c:	681b      	ldr	r3, [r3, #0]
 8108d6e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108d72:	e853 3f00 	ldrex	r3, [r3]
 8108d76:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8108d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108d7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8108d7e:	653b      	str	r3, [r7, #80]	; 0x50
 8108d80:	687b      	ldr	r3, [r7, #4]
 8108d82:	681b      	ldr	r3, [r3, #0]
 8108d84:	461a      	mov	r2, r3
 8108d86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8108d88:	647b      	str	r3, [r7, #68]	; 0x44
 8108d8a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108d8c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8108d8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8108d90:	e841 2300 	strex	r3, r2, [r1]
 8108d94:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8108d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108d98:	2b00      	cmp	r3, #0
 8108d9a:	d1e6      	bne.n	8108d6a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8108d9c:	687b      	ldr	r3, [r7, #4]
 8108d9e:	2220      	movs	r2, #32
 8108da0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8108da4:	687b      	ldr	r3, [r7, #4]
 8108da6:	2200      	movs	r2, #0
 8108da8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8108dac:	2303      	movs	r3, #3
 8108dae:	e063      	b.n	8108e78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8108db0:	687b      	ldr	r3, [r7, #4]
 8108db2:	681b      	ldr	r3, [r3, #0]
 8108db4:	681b      	ldr	r3, [r3, #0]
 8108db6:	f003 0304 	and.w	r3, r3, #4
 8108dba:	2b04      	cmp	r3, #4
 8108dbc:	d149      	bne.n	8108e52 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8108dbe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8108dc2:	9300      	str	r3, [sp, #0]
 8108dc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8108dc6:	2200      	movs	r2, #0
 8108dc8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8108dcc:	6878      	ldr	r0, [r7, #4]
 8108dce:	f000 f857 	bl	8108e80 <UART_WaitOnFlagUntilTimeout>
 8108dd2:	4603      	mov	r3, r0
 8108dd4:	2b00      	cmp	r3, #0
 8108dd6:	d03c      	beq.n	8108e52 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8108dd8:	687b      	ldr	r3, [r7, #4]
 8108dda:	681b      	ldr	r3, [r3, #0]
 8108ddc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108de0:	e853 3f00 	ldrex	r3, [r3]
 8108de4:	623b      	str	r3, [r7, #32]
   return(result);
 8108de6:	6a3b      	ldr	r3, [r7, #32]
 8108de8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8108dec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8108dee:	687b      	ldr	r3, [r7, #4]
 8108df0:	681b      	ldr	r3, [r3, #0]
 8108df2:	461a      	mov	r2, r3
 8108df4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8108df6:	633b      	str	r3, [r7, #48]	; 0x30
 8108df8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108dfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8108dfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8108dfe:	e841 2300 	strex	r3, r2, [r1]
 8108e02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8108e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108e06:	2b00      	cmp	r3, #0
 8108e08:	d1e6      	bne.n	8108dd8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8108e0a:	687b      	ldr	r3, [r7, #4]
 8108e0c:	681b      	ldr	r3, [r3, #0]
 8108e0e:	3308      	adds	r3, #8
 8108e10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108e12:	693b      	ldr	r3, [r7, #16]
 8108e14:	e853 3f00 	ldrex	r3, [r3]
 8108e18:	60fb      	str	r3, [r7, #12]
   return(result);
 8108e1a:	68fb      	ldr	r3, [r7, #12]
 8108e1c:	f023 0301 	bic.w	r3, r3, #1
 8108e20:	64bb      	str	r3, [r7, #72]	; 0x48
 8108e22:	687b      	ldr	r3, [r7, #4]
 8108e24:	681b      	ldr	r3, [r3, #0]
 8108e26:	3308      	adds	r3, #8
 8108e28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8108e2a:	61fa      	str	r2, [r7, #28]
 8108e2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108e2e:	69b9      	ldr	r1, [r7, #24]
 8108e30:	69fa      	ldr	r2, [r7, #28]
 8108e32:	e841 2300 	strex	r3, r2, [r1]
 8108e36:	617b      	str	r3, [r7, #20]
   return(result);
 8108e38:	697b      	ldr	r3, [r7, #20]
 8108e3a:	2b00      	cmp	r3, #0
 8108e3c:	d1e5      	bne.n	8108e0a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8108e3e:	687b      	ldr	r3, [r7, #4]
 8108e40:	2220      	movs	r2, #32
 8108e42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8108e46:	687b      	ldr	r3, [r7, #4]
 8108e48:	2200      	movs	r2, #0
 8108e4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8108e4e:	2303      	movs	r3, #3
 8108e50:	e012      	b.n	8108e78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8108e52:	687b      	ldr	r3, [r7, #4]
 8108e54:	2220      	movs	r2, #32
 8108e56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8108e5a:	687b      	ldr	r3, [r7, #4]
 8108e5c:	2220      	movs	r2, #32
 8108e5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8108e62:	687b      	ldr	r3, [r7, #4]
 8108e64:	2200      	movs	r2, #0
 8108e66:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8108e68:	687b      	ldr	r3, [r7, #4]
 8108e6a:	2200      	movs	r2, #0
 8108e6c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8108e6e:	687b      	ldr	r3, [r7, #4]
 8108e70:	2200      	movs	r2, #0
 8108e72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8108e76:	2300      	movs	r3, #0
}
 8108e78:	4618      	mov	r0, r3
 8108e7a:	3758      	adds	r7, #88	; 0x58
 8108e7c:	46bd      	mov	sp, r7
 8108e7e:	bd80      	pop	{r7, pc}

08108e80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8108e80:	b580      	push	{r7, lr}
 8108e82:	b084      	sub	sp, #16
 8108e84:	af00      	add	r7, sp, #0
 8108e86:	60f8      	str	r0, [r7, #12]
 8108e88:	60b9      	str	r1, [r7, #8]
 8108e8a:	603b      	str	r3, [r7, #0]
 8108e8c:	4613      	mov	r3, r2
 8108e8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8108e90:	e049      	b.n	8108f26 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8108e92:	69bb      	ldr	r3, [r7, #24]
 8108e94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8108e98:	d045      	beq.n	8108f26 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8108e9a:	f7f9 f969 	bl	8102170 <HAL_GetTick>
 8108e9e:	4602      	mov	r2, r0
 8108ea0:	683b      	ldr	r3, [r7, #0]
 8108ea2:	1ad3      	subs	r3, r2, r3
 8108ea4:	69ba      	ldr	r2, [r7, #24]
 8108ea6:	429a      	cmp	r2, r3
 8108ea8:	d302      	bcc.n	8108eb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8108eaa:	69bb      	ldr	r3, [r7, #24]
 8108eac:	2b00      	cmp	r3, #0
 8108eae:	d101      	bne.n	8108eb4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8108eb0:	2303      	movs	r3, #3
 8108eb2:	e048      	b.n	8108f46 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8108eb4:	68fb      	ldr	r3, [r7, #12]
 8108eb6:	681b      	ldr	r3, [r3, #0]
 8108eb8:	681b      	ldr	r3, [r3, #0]
 8108eba:	f003 0304 	and.w	r3, r3, #4
 8108ebe:	2b00      	cmp	r3, #0
 8108ec0:	d031      	beq.n	8108f26 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8108ec2:	68fb      	ldr	r3, [r7, #12]
 8108ec4:	681b      	ldr	r3, [r3, #0]
 8108ec6:	69db      	ldr	r3, [r3, #28]
 8108ec8:	f003 0308 	and.w	r3, r3, #8
 8108ecc:	2b08      	cmp	r3, #8
 8108ece:	d110      	bne.n	8108ef2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8108ed0:	68fb      	ldr	r3, [r7, #12]
 8108ed2:	681b      	ldr	r3, [r3, #0]
 8108ed4:	2208      	movs	r2, #8
 8108ed6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8108ed8:	68f8      	ldr	r0, [r7, #12]
 8108eda:	f000 f838 	bl	8108f4e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8108ede:	68fb      	ldr	r3, [r7, #12]
 8108ee0:	2208      	movs	r2, #8
 8108ee2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8108ee6:	68fb      	ldr	r3, [r7, #12]
 8108ee8:	2200      	movs	r2, #0
 8108eea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8108eee:	2301      	movs	r3, #1
 8108ef0:	e029      	b.n	8108f46 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8108ef2:	68fb      	ldr	r3, [r7, #12]
 8108ef4:	681b      	ldr	r3, [r3, #0]
 8108ef6:	69db      	ldr	r3, [r3, #28]
 8108ef8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8108efc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8108f00:	d111      	bne.n	8108f26 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8108f02:	68fb      	ldr	r3, [r7, #12]
 8108f04:	681b      	ldr	r3, [r3, #0]
 8108f06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8108f0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8108f0c:	68f8      	ldr	r0, [r7, #12]
 8108f0e:	f000 f81e 	bl	8108f4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8108f12:	68fb      	ldr	r3, [r7, #12]
 8108f14:	2220      	movs	r2, #32
 8108f16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8108f1a:	68fb      	ldr	r3, [r7, #12]
 8108f1c:	2200      	movs	r2, #0
 8108f1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8108f22:	2303      	movs	r3, #3
 8108f24:	e00f      	b.n	8108f46 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8108f26:	68fb      	ldr	r3, [r7, #12]
 8108f28:	681b      	ldr	r3, [r3, #0]
 8108f2a:	69da      	ldr	r2, [r3, #28]
 8108f2c:	68bb      	ldr	r3, [r7, #8]
 8108f2e:	4013      	ands	r3, r2
 8108f30:	68ba      	ldr	r2, [r7, #8]
 8108f32:	429a      	cmp	r2, r3
 8108f34:	bf0c      	ite	eq
 8108f36:	2301      	moveq	r3, #1
 8108f38:	2300      	movne	r3, #0
 8108f3a:	b2db      	uxtb	r3, r3
 8108f3c:	461a      	mov	r2, r3
 8108f3e:	79fb      	ldrb	r3, [r7, #7]
 8108f40:	429a      	cmp	r2, r3
 8108f42:	d0a6      	beq.n	8108e92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8108f44:	2300      	movs	r3, #0
}
 8108f46:	4618      	mov	r0, r3
 8108f48:	3710      	adds	r7, #16
 8108f4a:	46bd      	mov	sp, r7
 8108f4c:	bd80      	pop	{r7, pc}

08108f4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8108f4e:	b480      	push	{r7}
 8108f50:	b095      	sub	sp, #84	; 0x54
 8108f52:	af00      	add	r7, sp, #0
 8108f54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8108f56:	687b      	ldr	r3, [r7, #4]
 8108f58:	681b      	ldr	r3, [r3, #0]
 8108f5a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108f5e:	e853 3f00 	ldrex	r3, [r3]
 8108f62:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8108f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108f66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8108f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8108f6c:	687b      	ldr	r3, [r7, #4]
 8108f6e:	681b      	ldr	r3, [r3, #0]
 8108f70:	461a      	mov	r2, r3
 8108f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8108f74:	643b      	str	r3, [r7, #64]	; 0x40
 8108f76:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108f78:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8108f7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8108f7c:	e841 2300 	strex	r3, r2, [r1]
 8108f80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8108f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108f84:	2b00      	cmp	r3, #0
 8108f86:	d1e6      	bne.n	8108f56 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8108f88:	687b      	ldr	r3, [r7, #4]
 8108f8a:	681b      	ldr	r3, [r3, #0]
 8108f8c:	3308      	adds	r3, #8
 8108f8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108f90:	6a3b      	ldr	r3, [r7, #32]
 8108f92:	e853 3f00 	ldrex	r3, [r3]
 8108f96:	61fb      	str	r3, [r7, #28]
   return(result);
 8108f98:	69fb      	ldr	r3, [r7, #28]
 8108f9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8108f9e:	f023 0301 	bic.w	r3, r3, #1
 8108fa2:	64bb      	str	r3, [r7, #72]	; 0x48
 8108fa4:	687b      	ldr	r3, [r7, #4]
 8108fa6:	681b      	ldr	r3, [r3, #0]
 8108fa8:	3308      	adds	r3, #8
 8108faa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8108fac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8108fae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108fb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8108fb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8108fb4:	e841 2300 	strex	r3, r2, [r1]
 8108fb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8108fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108fbc:	2b00      	cmp	r3, #0
 8108fbe:	d1e3      	bne.n	8108f88 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8108fc0:	687b      	ldr	r3, [r7, #4]
 8108fc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8108fc4:	2b01      	cmp	r3, #1
 8108fc6:	d118      	bne.n	8108ffa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8108fc8:	687b      	ldr	r3, [r7, #4]
 8108fca:	681b      	ldr	r3, [r3, #0]
 8108fcc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108fce:	68fb      	ldr	r3, [r7, #12]
 8108fd0:	e853 3f00 	ldrex	r3, [r3]
 8108fd4:	60bb      	str	r3, [r7, #8]
   return(result);
 8108fd6:	68bb      	ldr	r3, [r7, #8]
 8108fd8:	f023 0310 	bic.w	r3, r3, #16
 8108fdc:	647b      	str	r3, [r7, #68]	; 0x44
 8108fde:	687b      	ldr	r3, [r7, #4]
 8108fe0:	681b      	ldr	r3, [r3, #0]
 8108fe2:	461a      	mov	r2, r3
 8108fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8108fe6:	61bb      	str	r3, [r7, #24]
 8108fe8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108fea:	6979      	ldr	r1, [r7, #20]
 8108fec:	69ba      	ldr	r2, [r7, #24]
 8108fee:	e841 2300 	strex	r3, r2, [r1]
 8108ff2:	613b      	str	r3, [r7, #16]
   return(result);
 8108ff4:	693b      	ldr	r3, [r7, #16]
 8108ff6:	2b00      	cmp	r3, #0
 8108ff8:	d1e6      	bne.n	8108fc8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8108ffa:	687b      	ldr	r3, [r7, #4]
 8108ffc:	2220      	movs	r2, #32
 8108ffe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8109002:	687b      	ldr	r3, [r7, #4]
 8109004:	2200      	movs	r2, #0
 8109006:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8109008:	687b      	ldr	r3, [r7, #4]
 810900a:	2200      	movs	r2, #0
 810900c:	675a      	str	r2, [r3, #116]	; 0x74
}
 810900e:	bf00      	nop
 8109010:	3754      	adds	r7, #84	; 0x54
 8109012:	46bd      	mov	sp, r7
 8109014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109018:	4770      	bx	lr

0810901a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810901a:	b480      	push	{r7}
 810901c:	b085      	sub	sp, #20
 810901e:	af00      	add	r7, sp, #0
 8109020:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8109022:	687b      	ldr	r3, [r7, #4]
 8109024:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8109028:	2b01      	cmp	r3, #1
 810902a:	d101      	bne.n	8109030 <HAL_UARTEx_DisableFifoMode+0x16>
 810902c:	2302      	movs	r3, #2
 810902e:	e027      	b.n	8109080 <HAL_UARTEx_DisableFifoMode+0x66>
 8109030:	687b      	ldr	r3, [r7, #4]
 8109032:	2201      	movs	r2, #1
 8109034:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8109038:	687b      	ldr	r3, [r7, #4]
 810903a:	2224      	movs	r2, #36	; 0x24
 810903c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8109040:	687b      	ldr	r3, [r7, #4]
 8109042:	681b      	ldr	r3, [r3, #0]
 8109044:	681b      	ldr	r3, [r3, #0]
 8109046:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8109048:	687b      	ldr	r3, [r7, #4]
 810904a:	681b      	ldr	r3, [r3, #0]
 810904c:	681a      	ldr	r2, [r3, #0]
 810904e:	687b      	ldr	r3, [r7, #4]
 8109050:	681b      	ldr	r3, [r3, #0]
 8109052:	f022 0201 	bic.w	r2, r2, #1
 8109056:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8109058:	68fb      	ldr	r3, [r7, #12]
 810905a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 810905e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8109060:	687b      	ldr	r3, [r7, #4]
 8109062:	2200      	movs	r2, #0
 8109064:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8109066:	687b      	ldr	r3, [r7, #4]
 8109068:	681b      	ldr	r3, [r3, #0]
 810906a:	68fa      	ldr	r2, [r7, #12]
 810906c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810906e:	687b      	ldr	r3, [r7, #4]
 8109070:	2220      	movs	r2, #32
 8109072:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8109076:	687b      	ldr	r3, [r7, #4]
 8109078:	2200      	movs	r2, #0
 810907a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 810907e:	2300      	movs	r3, #0
}
 8109080:	4618      	mov	r0, r3
 8109082:	3714      	adds	r7, #20
 8109084:	46bd      	mov	sp, r7
 8109086:	f85d 7b04 	ldr.w	r7, [sp], #4
 810908a:	4770      	bx	lr

0810908c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810908c:	b580      	push	{r7, lr}
 810908e:	b084      	sub	sp, #16
 8109090:	af00      	add	r7, sp, #0
 8109092:	6078      	str	r0, [r7, #4]
 8109094:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8109096:	687b      	ldr	r3, [r7, #4]
 8109098:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 810909c:	2b01      	cmp	r3, #1
 810909e:	d101      	bne.n	81090a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 81090a0:	2302      	movs	r3, #2
 81090a2:	e02d      	b.n	8109100 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 81090a4:	687b      	ldr	r3, [r7, #4]
 81090a6:	2201      	movs	r2, #1
 81090a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 81090ac:	687b      	ldr	r3, [r7, #4]
 81090ae:	2224      	movs	r2, #36	; 0x24
 81090b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81090b4:	687b      	ldr	r3, [r7, #4]
 81090b6:	681b      	ldr	r3, [r3, #0]
 81090b8:	681b      	ldr	r3, [r3, #0]
 81090ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81090bc:	687b      	ldr	r3, [r7, #4]
 81090be:	681b      	ldr	r3, [r3, #0]
 81090c0:	681a      	ldr	r2, [r3, #0]
 81090c2:	687b      	ldr	r3, [r7, #4]
 81090c4:	681b      	ldr	r3, [r3, #0]
 81090c6:	f022 0201 	bic.w	r2, r2, #1
 81090ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 81090cc:	687b      	ldr	r3, [r7, #4]
 81090ce:	681b      	ldr	r3, [r3, #0]
 81090d0:	689b      	ldr	r3, [r3, #8]
 81090d2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 81090d6:	687b      	ldr	r3, [r7, #4]
 81090d8:	681b      	ldr	r3, [r3, #0]
 81090da:	683a      	ldr	r2, [r7, #0]
 81090dc:	430a      	orrs	r2, r1
 81090de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 81090e0:	6878      	ldr	r0, [r7, #4]
 81090e2:	f000 f84f 	bl	8109184 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81090e6:	687b      	ldr	r3, [r7, #4]
 81090e8:	681b      	ldr	r3, [r3, #0]
 81090ea:	68fa      	ldr	r2, [r7, #12]
 81090ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81090ee:	687b      	ldr	r3, [r7, #4]
 81090f0:	2220      	movs	r2, #32
 81090f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81090f6:	687b      	ldr	r3, [r7, #4]
 81090f8:	2200      	movs	r2, #0
 81090fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 81090fe:	2300      	movs	r3, #0
}
 8109100:	4618      	mov	r0, r3
 8109102:	3710      	adds	r7, #16
 8109104:	46bd      	mov	sp, r7
 8109106:	bd80      	pop	{r7, pc}

08109108 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8109108:	b580      	push	{r7, lr}
 810910a:	b084      	sub	sp, #16
 810910c:	af00      	add	r7, sp, #0
 810910e:	6078      	str	r0, [r7, #4]
 8109110:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8109112:	687b      	ldr	r3, [r7, #4]
 8109114:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8109118:	2b01      	cmp	r3, #1
 810911a:	d101      	bne.n	8109120 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810911c:	2302      	movs	r3, #2
 810911e:	e02d      	b.n	810917c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8109120:	687b      	ldr	r3, [r7, #4]
 8109122:	2201      	movs	r2, #1
 8109124:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8109128:	687b      	ldr	r3, [r7, #4]
 810912a:	2224      	movs	r2, #36	; 0x24
 810912c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8109130:	687b      	ldr	r3, [r7, #4]
 8109132:	681b      	ldr	r3, [r3, #0]
 8109134:	681b      	ldr	r3, [r3, #0]
 8109136:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8109138:	687b      	ldr	r3, [r7, #4]
 810913a:	681b      	ldr	r3, [r3, #0]
 810913c:	681a      	ldr	r2, [r3, #0]
 810913e:	687b      	ldr	r3, [r7, #4]
 8109140:	681b      	ldr	r3, [r3, #0]
 8109142:	f022 0201 	bic.w	r2, r2, #1
 8109146:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8109148:	687b      	ldr	r3, [r7, #4]
 810914a:	681b      	ldr	r3, [r3, #0]
 810914c:	689b      	ldr	r3, [r3, #8]
 810914e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8109152:	687b      	ldr	r3, [r7, #4]
 8109154:	681b      	ldr	r3, [r3, #0]
 8109156:	683a      	ldr	r2, [r7, #0]
 8109158:	430a      	orrs	r2, r1
 810915a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810915c:	6878      	ldr	r0, [r7, #4]
 810915e:	f000 f811 	bl	8109184 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8109162:	687b      	ldr	r3, [r7, #4]
 8109164:	681b      	ldr	r3, [r3, #0]
 8109166:	68fa      	ldr	r2, [r7, #12]
 8109168:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810916a:	687b      	ldr	r3, [r7, #4]
 810916c:	2220      	movs	r2, #32
 810916e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8109172:	687b      	ldr	r3, [r7, #4]
 8109174:	2200      	movs	r2, #0
 8109176:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 810917a:	2300      	movs	r3, #0
}
 810917c:	4618      	mov	r0, r3
 810917e:	3710      	adds	r7, #16
 8109180:	46bd      	mov	sp, r7
 8109182:	bd80      	pop	{r7, pc}

08109184 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8109184:	b480      	push	{r7}
 8109186:	b085      	sub	sp, #20
 8109188:	af00      	add	r7, sp, #0
 810918a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810918c:	687b      	ldr	r3, [r7, #4]
 810918e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8109190:	2b00      	cmp	r3, #0
 8109192:	d108      	bne.n	81091a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8109194:	687b      	ldr	r3, [r7, #4]
 8109196:	2201      	movs	r2, #1
 8109198:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 810919c:	687b      	ldr	r3, [r7, #4]
 810919e:	2201      	movs	r2, #1
 81091a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 81091a4:	e031      	b.n	810920a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 81091a6:	2310      	movs	r3, #16
 81091a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 81091aa:	2310      	movs	r3, #16
 81091ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 81091ae:	687b      	ldr	r3, [r7, #4]
 81091b0:	681b      	ldr	r3, [r3, #0]
 81091b2:	689b      	ldr	r3, [r3, #8]
 81091b4:	0e5b      	lsrs	r3, r3, #25
 81091b6:	b2db      	uxtb	r3, r3
 81091b8:	f003 0307 	and.w	r3, r3, #7
 81091bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 81091be:	687b      	ldr	r3, [r7, #4]
 81091c0:	681b      	ldr	r3, [r3, #0]
 81091c2:	689b      	ldr	r3, [r3, #8]
 81091c4:	0f5b      	lsrs	r3, r3, #29
 81091c6:	b2db      	uxtb	r3, r3
 81091c8:	f003 0307 	and.w	r3, r3, #7
 81091cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 81091ce:	7bbb      	ldrb	r3, [r7, #14]
 81091d0:	7b3a      	ldrb	r2, [r7, #12]
 81091d2:	4911      	ldr	r1, [pc, #68]	; (8109218 <UARTEx_SetNbDataToProcess+0x94>)
 81091d4:	5c8a      	ldrb	r2, [r1, r2]
 81091d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 81091da:	7b3a      	ldrb	r2, [r7, #12]
 81091dc:	490f      	ldr	r1, [pc, #60]	; (810921c <UARTEx_SetNbDataToProcess+0x98>)
 81091de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 81091e0:	fb93 f3f2 	sdiv	r3, r3, r2
 81091e4:	b29a      	uxth	r2, r3
 81091e6:	687b      	ldr	r3, [r7, #4]
 81091e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 81091ec:	7bfb      	ldrb	r3, [r7, #15]
 81091ee:	7b7a      	ldrb	r2, [r7, #13]
 81091f0:	4909      	ldr	r1, [pc, #36]	; (8109218 <UARTEx_SetNbDataToProcess+0x94>)
 81091f2:	5c8a      	ldrb	r2, [r1, r2]
 81091f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 81091f8:	7b7a      	ldrb	r2, [r7, #13]
 81091fa:	4908      	ldr	r1, [pc, #32]	; (810921c <UARTEx_SetNbDataToProcess+0x98>)
 81091fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 81091fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8109202:	b29a      	uxth	r2, r3
 8109204:	687b      	ldr	r3, [r7, #4]
 8109206:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 810920a:	bf00      	nop
 810920c:	3714      	adds	r7, #20
 810920e:	46bd      	mov	sp, r7
 8109210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109214:	4770      	bx	lr
 8109216:	bf00      	nop
 8109218:	0810dbec 	.word	0x0810dbec
 810921c:	0810dbf4 	.word	0x0810dbf4

08109220 <__errno>:
 8109220:	4b01      	ldr	r3, [pc, #4]	; (8109228 <__errno+0x8>)
 8109222:	6818      	ldr	r0, [r3, #0]
 8109224:	4770      	bx	lr
 8109226:	bf00      	nop
 8109228:	1000002c 	.word	0x1000002c

0810922c <__libc_init_array>:
 810922c:	b570      	push	{r4, r5, r6, lr}
 810922e:	4d0d      	ldr	r5, [pc, #52]	; (8109264 <__libc_init_array+0x38>)
 8109230:	4c0d      	ldr	r4, [pc, #52]	; (8109268 <__libc_init_array+0x3c>)
 8109232:	1b64      	subs	r4, r4, r5
 8109234:	10a4      	asrs	r4, r4, #2
 8109236:	2600      	movs	r6, #0
 8109238:	42a6      	cmp	r6, r4
 810923a:	d109      	bne.n	8109250 <__libc_init_array+0x24>
 810923c:	4d0b      	ldr	r5, [pc, #44]	; (810926c <__libc_init_array+0x40>)
 810923e:	4c0c      	ldr	r4, [pc, #48]	; (8109270 <__libc_init_array+0x44>)
 8109240:	f004 fcaa 	bl	810db98 <_init>
 8109244:	1b64      	subs	r4, r4, r5
 8109246:	10a4      	asrs	r4, r4, #2
 8109248:	2600      	movs	r6, #0
 810924a:	42a6      	cmp	r6, r4
 810924c:	d105      	bne.n	810925a <__libc_init_array+0x2e>
 810924e:	bd70      	pop	{r4, r5, r6, pc}
 8109250:	f855 3b04 	ldr.w	r3, [r5], #4
 8109254:	4798      	blx	r3
 8109256:	3601      	adds	r6, #1
 8109258:	e7ee      	b.n	8109238 <__libc_init_array+0xc>
 810925a:	f855 3b04 	ldr.w	r3, [r5], #4
 810925e:	4798      	blx	r3
 8109260:	3601      	adds	r6, #1
 8109262:	e7f2      	b.n	810924a <__libc_init_array+0x1e>
 8109264:	0810e0b4 	.word	0x0810e0b4
 8109268:	0810e0b4 	.word	0x0810e0b4
 810926c:	0810e0b4 	.word	0x0810e0b4
 8109270:	0810e0b8 	.word	0x0810e0b8

08109274 <memset>:
 8109274:	4402      	add	r2, r0
 8109276:	4603      	mov	r3, r0
 8109278:	4293      	cmp	r3, r2
 810927a:	d100      	bne.n	810927e <memset+0xa>
 810927c:	4770      	bx	lr
 810927e:	f803 1b01 	strb.w	r1, [r3], #1
 8109282:	e7f9      	b.n	8109278 <memset+0x4>

08109284 <__cvt>:
 8109284:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8109288:	ec55 4b10 	vmov	r4, r5, d0
 810928c:	2d00      	cmp	r5, #0
 810928e:	460e      	mov	r6, r1
 8109290:	4619      	mov	r1, r3
 8109292:	462b      	mov	r3, r5
 8109294:	bfbb      	ittet	lt
 8109296:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 810929a:	461d      	movlt	r5, r3
 810929c:	2300      	movge	r3, #0
 810929e:	232d      	movlt	r3, #45	; 0x2d
 81092a0:	700b      	strb	r3, [r1, #0]
 81092a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 81092a4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 81092a8:	4691      	mov	r9, r2
 81092aa:	f023 0820 	bic.w	r8, r3, #32
 81092ae:	bfbc      	itt	lt
 81092b0:	4622      	movlt	r2, r4
 81092b2:	4614      	movlt	r4, r2
 81092b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 81092b8:	d005      	beq.n	81092c6 <__cvt+0x42>
 81092ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 81092be:	d100      	bne.n	81092c2 <__cvt+0x3e>
 81092c0:	3601      	adds	r6, #1
 81092c2:	2102      	movs	r1, #2
 81092c4:	e000      	b.n	81092c8 <__cvt+0x44>
 81092c6:	2103      	movs	r1, #3
 81092c8:	ab03      	add	r3, sp, #12
 81092ca:	9301      	str	r3, [sp, #4]
 81092cc:	ab02      	add	r3, sp, #8
 81092ce:	9300      	str	r3, [sp, #0]
 81092d0:	ec45 4b10 	vmov	d0, r4, r5
 81092d4:	4653      	mov	r3, sl
 81092d6:	4632      	mov	r2, r6
 81092d8:	f001 fdc6 	bl	810ae68 <_dtoa_r>
 81092dc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 81092e0:	4607      	mov	r7, r0
 81092e2:	d102      	bne.n	81092ea <__cvt+0x66>
 81092e4:	f019 0f01 	tst.w	r9, #1
 81092e8:	d022      	beq.n	8109330 <__cvt+0xac>
 81092ea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 81092ee:	eb07 0906 	add.w	r9, r7, r6
 81092f2:	d110      	bne.n	8109316 <__cvt+0x92>
 81092f4:	783b      	ldrb	r3, [r7, #0]
 81092f6:	2b30      	cmp	r3, #48	; 0x30
 81092f8:	d10a      	bne.n	8109310 <__cvt+0x8c>
 81092fa:	2200      	movs	r2, #0
 81092fc:	2300      	movs	r3, #0
 81092fe:	4620      	mov	r0, r4
 8109300:	4629      	mov	r1, r5
 8109302:	f7f7 fc69 	bl	8100bd8 <__aeabi_dcmpeq>
 8109306:	b918      	cbnz	r0, 8109310 <__cvt+0x8c>
 8109308:	f1c6 0601 	rsb	r6, r6, #1
 810930c:	f8ca 6000 	str.w	r6, [sl]
 8109310:	f8da 3000 	ldr.w	r3, [sl]
 8109314:	4499      	add	r9, r3
 8109316:	2200      	movs	r2, #0
 8109318:	2300      	movs	r3, #0
 810931a:	4620      	mov	r0, r4
 810931c:	4629      	mov	r1, r5
 810931e:	f7f7 fc5b 	bl	8100bd8 <__aeabi_dcmpeq>
 8109322:	b108      	cbz	r0, 8109328 <__cvt+0xa4>
 8109324:	f8cd 900c 	str.w	r9, [sp, #12]
 8109328:	2230      	movs	r2, #48	; 0x30
 810932a:	9b03      	ldr	r3, [sp, #12]
 810932c:	454b      	cmp	r3, r9
 810932e:	d307      	bcc.n	8109340 <__cvt+0xbc>
 8109330:	9b03      	ldr	r3, [sp, #12]
 8109332:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8109334:	1bdb      	subs	r3, r3, r7
 8109336:	4638      	mov	r0, r7
 8109338:	6013      	str	r3, [r2, #0]
 810933a:	b004      	add	sp, #16
 810933c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8109340:	1c59      	adds	r1, r3, #1
 8109342:	9103      	str	r1, [sp, #12]
 8109344:	701a      	strb	r2, [r3, #0]
 8109346:	e7f0      	b.n	810932a <__cvt+0xa6>

08109348 <__exponent>:
 8109348:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810934a:	4603      	mov	r3, r0
 810934c:	2900      	cmp	r1, #0
 810934e:	bfb8      	it	lt
 8109350:	4249      	neglt	r1, r1
 8109352:	f803 2b02 	strb.w	r2, [r3], #2
 8109356:	bfb4      	ite	lt
 8109358:	222d      	movlt	r2, #45	; 0x2d
 810935a:	222b      	movge	r2, #43	; 0x2b
 810935c:	2909      	cmp	r1, #9
 810935e:	7042      	strb	r2, [r0, #1]
 8109360:	dd2a      	ble.n	81093b8 <__exponent+0x70>
 8109362:	f10d 0407 	add.w	r4, sp, #7
 8109366:	46a4      	mov	ip, r4
 8109368:	270a      	movs	r7, #10
 810936a:	46a6      	mov	lr, r4
 810936c:	460a      	mov	r2, r1
 810936e:	fb91 f6f7 	sdiv	r6, r1, r7
 8109372:	fb07 1516 	mls	r5, r7, r6, r1
 8109376:	3530      	adds	r5, #48	; 0x30
 8109378:	2a63      	cmp	r2, #99	; 0x63
 810937a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 810937e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8109382:	4631      	mov	r1, r6
 8109384:	dcf1      	bgt.n	810936a <__exponent+0x22>
 8109386:	3130      	adds	r1, #48	; 0x30
 8109388:	f1ae 0502 	sub.w	r5, lr, #2
 810938c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8109390:	1c44      	adds	r4, r0, #1
 8109392:	4629      	mov	r1, r5
 8109394:	4561      	cmp	r1, ip
 8109396:	d30a      	bcc.n	81093ae <__exponent+0x66>
 8109398:	f10d 0209 	add.w	r2, sp, #9
 810939c:	eba2 020e 	sub.w	r2, r2, lr
 81093a0:	4565      	cmp	r5, ip
 81093a2:	bf88      	it	hi
 81093a4:	2200      	movhi	r2, #0
 81093a6:	4413      	add	r3, r2
 81093a8:	1a18      	subs	r0, r3, r0
 81093aa:	b003      	add	sp, #12
 81093ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 81093ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 81093b2:	f804 2f01 	strb.w	r2, [r4, #1]!
 81093b6:	e7ed      	b.n	8109394 <__exponent+0x4c>
 81093b8:	2330      	movs	r3, #48	; 0x30
 81093ba:	3130      	adds	r1, #48	; 0x30
 81093bc:	7083      	strb	r3, [r0, #2]
 81093be:	70c1      	strb	r1, [r0, #3]
 81093c0:	1d03      	adds	r3, r0, #4
 81093c2:	e7f1      	b.n	81093a8 <__exponent+0x60>

081093c4 <_printf_float>:
 81093c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81093c8:	ed2d 8b02 	vpush	{d8}
 81093cc:	b08d      	sub	sp, #52	; 0x34
 81093ce:	460c      	mov	r4, r1
 81093d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 81093d4:	4616      	mov	r6, r2
 81093d6:	461f      	mov	r7, r3
 81093d8:	4605      	mov	r5, r0
 81093da:	f002 ff97 	bl	810c30c <_localeconv_r>
 81093de:	f8d0 a000 	ldr.w	sl, [r0]
 81093e2:	4650      	mov	r0, sl
 81093e4:	f7f6 ff7c 	bl	81002e0 <strlen>
 81093e8:	2300      	movs	r3, #0
 81093ea:	930a      	str	r3, [sp, #40]	; 0x28
 81093ec:	6823      	ldr	r3, [r4, #0]
 81093ee:	9305      	str	r3, [sp, #20]
 81093f0:	f8d8 3000 	ldr.w	r3, [r8]
 81093f4:	f894 b018 	ldrb.w	fp, [r4, #24]
 81093f8:	3307      	adds	r3, #7
 81093fa:	f023 0307 	bic.w	r3, r3, #7
 81093fe:	f103 0208 	add.w	r2, r3, #8
 8109402:	f8c8 2000 	str.w	r2, [r8]
 8109406:	e9d3 2300 	ldrd	r2, r3, [r3]
 810940a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 810940e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8109412:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8109416:	9307      	str	r3, [sp, #28]
 8109418:	f8cd 8018 	str.w	r8, [sp, #24]
 810941c:	ee08 0a10 	vmov	s16, r0
 8109420:	4b9f      	ldr	r3, [pc, #636]	; (81096a0 <_printf_float+0x2dc>)
 8109422:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8109426:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810942a:	f7f7 fc07 	bl	8100c3c <__aeabi_dcmpun>
 810942e:	bb88      	cbnz	r0, 8109494 <_printf_float+0xd0>
 8109430:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8109434:	4b9a      	ldr	r3, [pc, #616]	; (81096a0 <_printf_float+0x2dc>)
 8109436:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810943a:	f7f7 fbe1 	bl	8100c00 <__aeabi_dcmple>
 810943e:	bb48      	cbnz	r0, 8109494 <_printf_float+0xd0>
 8109440:	2200      	movs	r2, #0
 8109442:	2300      	movs	r3, #0
 8109444:	4640      	mov	r0, r8
 8109446:	4649      	mov	r1, r9
 8109448:	f7f7 fbd0 	bl	8100bec <__aeabi_dcmplt>
 810944c:	b110      	cbz	r0, 8109454 <_printf_float+0x90>
 810944e:	232d      	movs	r3, #45	; 0x2d
 8109450:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8109454:	4b93      	ldr	r3, [pc, #588]	; (81096a4 <_printf_float+0x2e0>)
 8109456:	4894      	ldr	r0, [pc, #592]	; (81096a8 <_printf_float+0x2e4>)
 8109458:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 810945c:	bf94      	ite	ls
 810945e:	4698      	movls	r8, r3
 8109460:	4680      	movhi	r8, r0
 8109462:	2303      	movs	r3, #3
 8109464:	6123      	str	r3, [r4, #16]
 8109466:	9b05      	ldr	r3, [sp, #20]
 8109468:	f023 0204 	bic.w	r2, r3, #4
 810946c:	6022      	str	r2, [r4, #0]
 810946e:	f04f 0900 	mov.w	r9, #0
 8109472:	9700      	str	r7, [sp, #0]
 8109474:	4633      	mov	r3, r6
 8109476:	aa0b      	add	r2, sp, #44	; 0x2c
 8109478:	4621      	mov	r1, r4
 810947a:	4628      	mov	r0, r5
 810947c:	f000 f9d8 	bl	8109830 <_printf_common>
 8109480:	3001      	adds	r0, #1
 8109482:	f040 8090 	bne.w	81095a6 <_printf_float+0x1e2>
 8109486:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810948a:	b00d      	add	sp, #52	; 0x34
 810948c:	ecbd 8b02 	vpop	{d8}
 8109490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109494:	4642      	mov	r2, r8
 8109496:	464b      	mov	r3, r9
 8109498:	4640      	mov	r0, r8
 810949a:	4649      	mov	r1, r9
 810949c:	f7f7 fbce 	bl	8100c3c <__aeabi_dcmpun>
 81094a0:	b140      	cbz	r0, 81094b4 <_printf_float+0xf0>
 81094a2:	464b      	mov	r3, r9
 81094a4:	2b00      	cmp	r3, #0
 81094a6:	bfbc      	itt	lt
 81094a8:	232d      	movlt	r3, #45	; 0x2d
 81094aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 81094ae:	487f      	ldr	r0, [pc, #508]	; (81096ac <_printf_float+0x2e8>)
 81094b0:	4b7f      	ldr	r3, [pc, #508]	; (81096b0 <_printf_float+0x2ec>)
 81094b2:	e7d1      	b.n	8109458 <_printf_float+0x94>
 81094b4:	6863      	ldr	r3, [r4, #4]
 81094b6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 81094ba:	9206      	str	r2, [sp, #24]
 81094bc:	1c5a      	adds	r2, r3, #1
 81094be:	d13f      	bne.n	8109540 <_printf_float+0x17c>
 81094c0:	2306      	movs	r3, #6
 81094c2:	6063      	str	r3, [r4, #4]
 81094c4:	9b05      	ldr	r3, [sp, #20]
 81094c6:	6861      	ldr	r1, [r4, #4]
 81094c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 81094cc:	2300      	movs	r3, #0
 81094ce:	9303      	str	r3, [sp, #12]
 81094d0:	ab0a      	add	r3, sp, #40	; 0x28
 81094d2:	e9cd b301 	strd	fp, r3, [sp, #4]
 81094d6:	ab09      	add	r3, sp, #36	; 0x24
 81094d8:	ec49 8b10 	vmov	d0, r8, r9
 81094dc:	9300      	str	r3, [sp, #0]
 81094de:	6022      	str	r2, [r4, #0]
 81094e0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 81094e4:	4628      	mov	r0, r5
 81094e6:	f7ff fecd 	bl	8109284 <__cvt>
 81094ea:	9b06      	ldr	r3, [sp, #24]
 81094ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 81094ee:	2b47      	cmp	r3, #71	; 0x47
 81094f0:	4680      	mov	r8, r0
 81094f2:	d108      	bne.n	8109506 <_printf_float+0x142>
 81094f4:	1cc8      	adds	r0, r1, #3
 81094f6:	db02      	blt.n	81094fe <_printf_float+0x13a>
 81094f8:	6863      	ldr	r3, [r4, #4]
 81094fa:	4299      	cmp	r1, r3
 81094fc:	dd41      	ble.n	8109582 <_printf_float+0x1be>
 81094fe:	f1ab 0b02 	sub.w	fp, fp, #2
 8109502:	fa5f fb8b 	uxtb.w	fp, fp
 8109506:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 810950a:	d820      	bhi.n	810954e <_printf_float+0x18a>
 810950c:	3901      	subs	r1, #1
 810950e:	465a      	mov	r2, fp
 8109510:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8109514:	9109      	str	r1, [sp, #36]	; 0x24
 8109516:	f7ff ff17 	bl	8109348 <__exponent>
 810951a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810951c:	1813      	adds	r3, r2, r0
 810951e:	2a01      	cmp	r2, #1
 8109520:	4681      	mov	r9, r0
 8109522:	6123      	str	r3, [r4, #16]
 8109524:	dc02      	bgt.n	810952c <_printf_float+0x168>
 8109526:	6822      	ldr	r2, [r4, #0]
 8109528:	07d2      	lsls	r2, r2, #31
 810952a:	d501      	bpl.n	8109530 <_printf_float+0x16c>
 810952c:	3301      	adds	r3, #1
 810952e:	6123      	str	r3, [r4, #16]
 8109530:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8109534:	2b00      	cmp	r3, #0
 8109536:	d09c      	beq.n	8109472 <_printf_float+0xae>
 8109538:	232d      	movs	r3, #45	; 0x2d
 810953a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810953e:	e798      	b.n	8109472 <_printf_float+0xae>
 8109540:	9a06      	ldr	r2, [sp, #24]
 8109542:	2a47      	cmp	r2, #71	; 0x47
 8109544:	d1be      	bne.n	81094c4 <_printf_float+0x100>
 8109546:	2b00      	cmp	r3, #0
 8109548:	d1bc      	bne.n	81094c4 <_printf_float+0x100>
 810954a:	2301      	movs	r3, #1
 810954c:	e7b9      	b.n	81094c2 <_printf_float+0xfe>
 810954e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8109552:	d118      	bne.n	8109586 <_printf_float+0x1c2>
 8109554:	2900      	cmp	r1, #0
 8109556:	6863      	ldr	r3, [r4, #4]
 8109558:	dd0b      	ble.n	8109572 <_printf_float+0x1ae>
 810955a:	6121      	str	r1, [r4, #16]
 810955c:	b913      	cbnz	r3, 8109564 <_printf_float+0x1a0>
 810955e:	6822      	ldr	r2, [r4, #0]
 8109560:	07d0      	lsls	r0, r2, #31
 8109562:	d502      	bpl.n	810956a <_printf_float+0x1a6>
 8109564:	3301      	adds	r3, #1
 8109566:	440b      	add	r3, r1
 8109568:	6123      	str	r3, [r4, #16]
 810956a:	65a1      	str	r1, [r4, #88]	; 0x58
 810956c:	f04f 0900 	mov.w	r9, #0
 8109570:	e7de      	b.n	8109530 <_printf_float+0x16c>
 8109572:	b913      	cbnz	r3, 810957a <_printf_float+0x1b6>
 8109574:	6822      	ldr	r2, [r4, #0]
 8109576:	07d2      	lsls	r2, r2, #31
 8109578:	d501      	bpl.n	810957e <_printf_float+0x1ba>
 810957a:	3302      	adds	r3, #2
 810957c:	e7f4      	b.n	8109568 <_printf_float+0x1a4>
 810957e:	2301      	movs	r3, #1
 8109580:	e7f2      	b.n	8109568 <_printf_float+0x1a4>
 8109582:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8109586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109588:	4299      	cmp	r1, r3
 810958a:	db05      	blt.n	8109598 <_printf_float+0x1d4>
 810958c:	6823      	ldr	r3, [r4, #0]
 810958e:	6121      	str	r1, [r4, #16]
 8109590:	07d8      	lsls	r0, r3, #31
 8109592:	d5ea      	bpl.n	810956a <_printf_float+0x1a6>
 8109594:	1c4b      	adds	r3, r1, #1
 8109596:	e7e7      	b.n	8109568 <_printf_float+0x1a4>
 8109598:	2900      	cmp	r1, #0
 810959a:	bfd4      	ite	le
 810959c:	f1c1 0202 	rsble	r2, r1, #2
 81095a0:	2201      	movgt	r2, #1
 81095a2:	4413      	add	r3, r2
 81095a4:	e7e0      	b.n	8109568 <_printf_float+0x1a4>
 81095a6:	6823      	ldr	r3, [r4, #0]
 81095a8:	055a      	lsls	r2, r3, #21
 81095aa:	d407      	bmi.n	81095bc <_printf_float+0x1f8>
 81095ac:	6923      	ldr	r3, [r4, #16]
 81095ae:	4642      	mov	r2, r8
 81095b0:	4631      	mov	r1, r6
 81095b2:	4628      	mov	r0, r5
 81095b4:	47b8      	blx	r7
 81095b6:	3001      	adds	r0, #1
 81095b8:	d12c      	bne.n	8109614 <_printf_float+0x250>
 81095ba:	e764      	b.n	8109486 <_printf_float+0xc2>
 81095bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 81095c0:	f240 80e0 	bls.w	8109784 <_printf_float+0x3c0>
 81095c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 81095c8:	2200      	movs	r2, #0
 81095ca:	2300      	movs	r3, #0
 81095cc:	f7f7 fb04 	bl	8100bd8 <__aeabi_dcmpeq>
 81095d0:	2800      	cmp	r0, #0
 81095d2:	d034      	beq.n	810963e <_printf_float+0x27a>
 81095d4:	4a37      	ldr	r2, [pc, #220]	; (81096b4 <_printf_float+0x2f0>)
 81095d6:	2301      	movs	r3, #1
 81095d8:	4631      	mov	r1, r6
 81095da:	4628      	mov	r0, r5
 81095dc:	47b8      	blx	r7
 81095de:	3001      	adds	r0, #1
 81095e0:	f43f af51 	beq.w	8109486 <_printf_float+0xc2>
 81095e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 81095e8:	429a      	cmp	r2, r3
 81095ea:	db02      	blt.n	81095f2 <_printf_float+0x22e>
 81095ec:	6823      	ldr	r3, [r4, #0]
 81095ee:	07d8      	lsls	r0, r3, #31
 81095f0:	d510      	bpl.n	8109614 <_printf_float+0x250>
 81095f2:	ee18 3a10 	vmov	r3, s16
 81095f6:	4652      	mov	r2, sl
 81095f8:	4631      	mov	r1, r6
 81095fa:	4628      	mov	r0, r5
 81095fc:	47b8      	blx	r7
 81095fe:	3001      	adds	r0, #1
 8109600:	f43f af41 	beq.w	8109486 <_printf_float+0xc2>
 8109604:	f04f 0800 	mov.w	r8, #0
 8109608:	f104 091a 	add.w	r9, r4, #26
 810960c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810960e:	3b01      	subs	r3, #1
 8109610:	4543      	cmp	r3, r8
 8109612:	dc09      	bgt.n	8109628 <_printf_float+0x264>
 8109614:	6823      	ldr	r3, [r4, #0]
 8109616:	079b      	lsls	r3, r3, #30
 8109618:	f100 8105 	bmi.w	8109826 <_printf_float+0x462>
 810961c:	68e0      	ldr	r0, [r4, #12]
 810961e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8109620:	4298      	cmp	r0, r3
 8109622:	bfb8      	it	lt
 8109624:	4618      	movlt	r0, r3
 8109626:	e730      	b.n	810948a <_printf_float+0xc6>
 8109628:	2301      	movs	r3, #1
 810962a:	464a      	mov	r2, r9
 810962c:	4631      	mov	r1, r6
 810962e:	4628      	mov	r0, r5
 8109630:	47b8      	blx	r7
 8109632:	3001      	adds	r0, #1
 8109634:	f43f af27 	beq.w	8109486 <_printf_float+0xc2>
 8109638:	f108 0801 	add.w	r8, r8, #1
 810963c:	e7e6      	b.n	810960c <_printf_float+0x248>
 810963e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109640:	2b00      	cmp	r3, #0
 8109642:	dc39      	bgt.n	81096b8 <_printf_float+0x2f4>
 8109644:	4a1b      	ldr	r2, [pc, #108]	; (81096b4 <_printf_float+0x2f0>)
 8109646:	2301      	movs	r3, #1
 8109648:	4631      	mov	r1, r6
 810964a:	4628      	mov	r0, r5
 810964c:	47b8      	blx	r7
 810964e:	3001      	adds	r0, #1
 8109650:	f43f af19 	beq.w	8109486 <_printf_float+0xc2>
 8109654:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8109658:	4313      	orrs	r3, r2
 810965a:	d102      	bne.n	8109662 <_printf_float+0x29e>
 810965c:	6823      	ldr	r3, [r4, #0]
 810965e:	07d9      	lsls	r1, r3, #31
 8109660:	d5d8      	bpl.n	8109614 <_printf_float+0x250>
 8109662:	ee18 3a10 	vmov	r3, s16
 8109666:	4652      	mov	r2, sl
 8109668:	4631      	mov	r1, r6
 810966a:	4628      	mov	r0, r5
 810966c:	47b8      	blx	r7
 810966e:	3001      	adds	r0, #1
 8109670:	f43f af09 	beq.w	8109486 <_printf_float+0xc2>
 8109674:	f04f 0900 	mov.w	r9, #0
 8109678:	f104 0a1a 	add.w	sl, r4, #26
 810967c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810967e:	425b      	negs	r3, r3
 8109680:	454b      	cmp	r3, r9
 8109682:	dc01      	bgt.n	8109688 <_printf_float+0x2c4>
 8109684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109686:	e792      	b.n	81095ae <_printf_float+0x1ea>
 8109688:	2301      	movs	r3, #1
 810968a:	4652      	mov	r2, sl
 810968c:	4631      	mov	r1, r6
 810968e:	4628      	mov	r0, r5
 8109690:	47b8      	blx	r7
 8109692:	3001      	adds	r0, #1
 8109694:	f43f aef7 	beq.w	8109486 <_printf_float+0xc2>
 8109698:	f109 0901 	add.w	r9, r9, #1
 810969c:	e7ee      	b.n	810967c <_printf_float+0x2b8>
 810969e:	bf00      	nop
 81096a0:	7fefffff 	.word	0x7fefffff
 81096a4:	0810dc00 	.word	0x0810dc00
 81096a8:	0810dc04 	.word	0x0810dc04
 81096ac:	0810dc0c 	.word	0x0810dc0c
 81096b0:	0810dc08 	.word	0x0810dc08
 81096b4:	0810dc10 	.word	0x0810dc10
 81096b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 81096ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 81096bc:	429a      	cmp	r2, r3
 81096be:	bfa8      	it	ge
 81096c0:	461a      	movge	r2, r3
 81096c2:	2a00      	cmp	r2, #0
 81096c4:	4691      	mov	r9, r2
 81096c6:	dc37      	bgt.n	8109738 <_printf_float+0x374>
 81096c8:	f04f 0b00 	mov.w	fp, #0
 81096cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 81096d0:	f104 021a 	add.w	r2, r4, #26
 81096d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 81096d6:	9305      	str	r3, [sp, #20]
 81096d8:	eba3 0309 	sub.w	r3, r3, r9
 81096dc:	455b      	cmp	r3, fp
 81096de:	dc33      	bgt.n	8109748 <_printf_float+0x384>
 81096e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 81096e4:	429a      	cmp	r2, r3
 81096e6:	db3b      	blt.n	8109760 <_printf_float+0x39c>
 81096e8:	6823      	ldr	r3, [r4, #0]
 81096ea:	07da      	lsls	r2, r3, #31
 81096ec:	d438      	bmi.n	8109760 <_printf_float+0x39c>
 81096ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81096f0:	9a05      	ldr	r2, [sp, #20]
 81096f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 81096f4:	1a9a      	subs	r2, r3, r2
 81096f6:	eba3 0901 	sub.w	r9, r3, r1
 81096fa:	4591      	cmp	r9, r2
 81096fc:	bfa8      	it	ge
 81096fe:	4691      	movge	r9, r2
 8109700:	f1b9 0f00 	cmp.w	r9, #0
 8109704:	dc35      	bgt.n	8109772 <_printf_float+0x3ae>
 8109706:	f04f 0800 	mov.w	r8, #0
 810970a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810970e:	f104 0a1a 	add.w	sl, r4, #26
 8109712:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8109716:	1a9b      	subs	r3, r3, r2
 8109718:	eba3 0309 	sub.w	r3, r3, r9
 810971c:	4543      	cmp	r3, r8
 810971e:	f77f af79 	ble.w	8109614 <_printf_float+0x250>
 8109722:	2301      	movs	r3, #1
 8109724:	4652      	mov	r2, sl
 8109726:	4631      	mov	r1, r6
 8109728:	4628      	mov	r0, r5
 810972a:	47b8      	blx	r7
 810972c:	3001      	adds	r0, #1
 810972e:	f43f aeaa 	beq.w	8109486 <_printf_float+0xc2>
 8109732:	f108 0801 	add.w	r8, r8, #1
 8109736:	e7ec      	b.n	8109712 <_printf_float+0x34e>
 8109738:	4613      	mov	r3, r2
 810973a:	4631      	mov	r1, r6
 810973c:	4642      	mov	r2, r8
 810973e:	4628      	mov	r0, r5
 8109740:	47b8      	blx	r7
 8109742:	3001      	adds	r0, #1
 8109744:	d1c0      	bne.n	81096c8 <_printf_float+0x304>
 8109746:	e69e      	b.n	8109486 <_printf_float+0xc2>
 8109748:	2301      	movs	r3, #1
 810974a:	4631      	mov	r1, r6
 810974c:	4628      	mov	r0, r5
 810974e:	9205      	str	r2, [sp, #20]
 8109750:	47b8      	blx	r7
 8109752:	3001      	adds	r0, #1
 8109754:	f43f ae97 	beq.w	8109486 <_printf_float+0xc2>
 8109758:	9a05      	ldr	r2, [sp, #20]
 810975a:	f10b 0b01 	add.w	fp, fp, #1
 810975e:	e7b9      	b.n	81096d4 <_printf_float+0x310>
 8109760:	ee18 3a10 	vmov	r3, s16
 8109764:	4652      	mov	r2, sl
 8109766:	4631      	mov	r1, r6
 8109768:	4628      	mov	r0, r5
 810976a:	47b8      	blx	r7
 810976c:	3001      	adds	r0, #1
 810976e:	d1be      	bne.n	81096ee <_printf_float+0x32a>
 8109770:	e689      	b.n	8109486 <_printf_float+0xc2>
 8109772:	9a05      	ldr	r2, [sp, #20]
 8109774:	464b      	mov	r3, r9
 8109776:	4442      	add	r2, r8
 8109778:	4631      	mov	r1, r6
 810977a:	4628      	mov	r0, r5
 810977c:	47b8      	blx	r7
 810977e:	3001      	adds	r0, #1
 8109780:	d1c1      	bne.n	8109706 <_printf_float+0x342>
 8109782:	e680      	b.n	8109486 <_printf_float+0xc2>
 8109784:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8109786:	2a01      	cmp	r2, #1
 8109788:	dc01      	bgt.n	810978e <_printf_float+0x3ca>
 810978a:	07db      	lsls	r3, r3, #31
 810978c:	d538      	bpl.n	8109800 <_printf_float+0x43c>
 810978e:	2301      	movs	r3, #1
 8109790:	4642      	mov	r2, r8
 8109792:	4631      	mov	r1, r6
 8109794:	4628      	mov	r0, r5
 8109796:	47b8      	blx	r7
 8109798:	3001      	adds	r0, #1
 810979a:	f43f ae74 	beq.w	8109486 <_printf_float+0xc2>
 810979e:	ee18 3a10 	vmov	r3, s16
 81097a2:	4652      	mov	r2, sl
 81097a4:	4631      	mov	r1, r6
 81097a6:	4628      	mov	r0, r5
 81097a8:	47b8      	blx	r7
 81097aa:	3001      	adds	r0, #1
 81097ac:	f43f ae6b 	beq.w	8109486 <_printf_float+0xc2>
 81097b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 81097b4:	2200      	movs	r2, #0
 81097b6:	2300      	movs	r3, #0
 81097b8:	f7f7 fa0e 	bl	8100bd8 <__aeabi_dcmpeq>
 81097bc:	b9d8      	cbnz	r0, 81097f6 <_printf_float+0x432>
 81097be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81097c0:	f108 0201 	add.w	r2, r8, #1
 81097c4:	3b01      	subs	r3, #1
 81097c6:	4631      	mov	r1, r6
 81097c8:	4628      	mov	r0, r5
 81097ca:	47b8      	blx	r7
 81097cc:	3001      	adds	r0, #1
 81097ce:	d10e      	bne.n	81097ee <_printf_float+0x42a>
 81097d0:	e659      	b.n	8109486 <_printf_float+0xc2>
 81097d2:	2301      	movs	r3, #1
 81097d4:	4652      	mov	r2, sl
 81097d6:	4631      	mov	r1, r6
 81097d8:	4628      	mov	r0, r5
 81097da:	47b8      	blx	r7
 81097dc:	3001      	adds	r0, #1
 81097de:	f43f ae52 	beq.w	8109486 <_printf_float+0xc2>
 81097e2:	f108 0801 	add.w	r8, r8, #1
 81097e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81097e8:	3b01      	subs	r3, #1
 81097ea:	4543      	cmp	r3, r8
 81097ec:	dcf1      	bgt.n	81097d2 <_printf_float+0x40e>
 81097ee:	464b      	mov	r3, r9
 81097f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 81097f4:	e6dc      	b.n	81095b0 <_printf_float+0x1ec>
 81097f6:	f04f 0800 	mov.w	r8, #0
 81097fa:	f104 0a1a 	add.w	sl, r4, #26
 81097fe:	e7f2      	b.n	81097e6 <_printf_float+0x422>
 8109800:	2301      	movs	r3, #1
 8109802:	4642      	mov	r2, r8
 8109804:	e7df      	b.n	81097c6 <_printf_float+0x402>
 8109806:	2301      	movs	r3, #1
 8109808:	464a      	mov	r2, r9
 810980a:	4631      	mov	r1, r6
 810980c:	4628      	mov	r0, r5
 810980e:	47b8      	blx	r7
 8109810:	3001      	adds	r0, #1
 8109812:	f43f ae38 	beq.w	8109486 <_printf_float+0xc2>
 8109816:	f108 0801 	add.w	r8, r8, #1
 810981a:	68e3      	ldr	r3, [r4, #12]
 810981c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 810981e:	1a5b      	subs	r3, r3, r1
 8109820:	4543      	cmp	r3, r8
 8109822:	dcf0      	bgt.n	8109806 <_printf_float+0x442>
 8109824:	e6fa      	b.n	810961c <_printf_float+0x258>
 8109826:	f04f 0800 	mov.w	r8, #0
 810982a:	f104 0919 	add.w	r9, r4, #25
 810982e:	e7f4      	b.n	810981a <_printf_float+0x456>

08109830 <_printf_common>:
 8109830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8109834:	4616      	mov	r6, r2
 8109836:	4699      	mov	r9, r3
 8109838:	688a      	ldr	r2, [r1, #8]
 810983a:	690b      	ldr	r3, [r1, #16]
 810983c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8109840:	4293      	cmp	r3, r2
 8109842:	bfb8      	it	lt
 8109844:	4613      	movlt	r3, r2
 8109846:	6033      	str	r3, [r6, #0]
 8109848:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 810984c:	4607      	mov	r7, r0
 810984e:	460c      	mov	r4, r1
 8109850:	b10a      	cbz	r2, 8109856 <_printf_common+0x26>
 8109852:	3301      	adds	r3, #1
 8109854:	6033      	str	r3, [r6, #0]
 8109856:	6823      	ldr	r3, [r4, #0]
 8109858:	0699      	lsls	r1, r3, #26
 810985a:	bf42      	ittt	mi
 810985c:	6833      	ldrmi	r3, [r6, #0]
 810985e:	3302      	addmi	r3, #2
 8109860:	6033      	strmi	r3, [r6, #0]
 8109862:	6825      	ldr	r5, [r4, #0]
 8109864:	f015 0506 	ands.w	r5, r5, #6
 8109868:	d106      	bne.n	8109878 <_printf_common+0x48>
 810986a:	f104 0a19 	add.w	sl, r4, #25
 810986e:	68e3      	ldr	r3, [r4, #12]
 8109870:	6832      	ldr	r2, [r6, #0]
 8109872:	1a9b      	subs	r3, r3, r2
 8109874:	42ab      	cmp	r3, r5
 8109876:	dc26      	bgt.n	81098c6 <_printf_common+0x96>
 8109878:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 810987c:	1e13      	subs	r3, r2, #0
 810987e:	6822      	ldr	r2, [r4, #0]
 8109880:	bf18      	it	ne
 8109882:	2301      	movne	r3, #1
 8109884:	0692      	lsls	r2, r2, #26
 8109886:	d42b      	bmi.n	81098e0 <_printf_common+0xb0>
 8109888:	f104 0243 	add.w	r2, r4, #67	; 0x43
 810988c:	4649      	mov	r1, r9
 810988e:	4638      	mov	r0, r7
 8109890:	47c0      	blx	r8
 8109892:	3001      	adds	r0, #1
 8109894:	d01e      	beq.n	81098d4 <_printf_common+0xa4>
 8109896:	6823      	ldr	r3, [r4, #0]
 8109898:	68e5      	ldr	r5, [r4, #12]
 810989a:	6832      	ldr	r2, [r6, #0]
 810989c:	f003 0306 	and.w	r3, r3, #6
 81098a0:	2b04      	cmp	r3, #4
 81098a2:	bf08      	it	eq
 81098a4:	1aad      	subeq	r5, r5, r2
 81098a6:	68a3      	ldr	r3, [r4, #8]
 81098a8:	6922      	ldr	r2, [r4, #16]
 81098aa:	bf0c      	ite	eq
 81098ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 81098b0:	2500      	movne	r5, #0
 81098b2:	4293      	cmp	r3, r2
 81098b4:	bfc4      	itt	gt
 81098b6:	1a9b      	subgt	r3, r3, r2
 81098b8:	18ed      	addgt	r5, r5, r3
 81098ba:	2600      	movs	r6, #0
 81098bc:	341a      	adds	r4, #26
 81098be:	42b5      	cmp	r5, r6
 81098c0:	d11a      	bne.n	81098f8 <_printf_common+0xc8>
 81098c2:	2000      	movs	r0, #0
 81098c4:	e008      	b.n	81098d8 <_printf_common+0xa8>
 81098c6:	2301      	movs	r3, #1
 81098c8:	4652      	mov	r2, sl
 81098ca:	4649      	mov	r1, r9
 81098cc:	4638      	mov	r0, r7
 81098ce:	47c0      	blx	r8
 81098d0:	3001      	adds	r0, #1
 81098d2:	d103      	bne.n	81098dc <_printf_common+0xac>
 81098d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 81098d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81098dc:	3501      	adds	r5, #1
 81098de:	e7c6      	b.n	810986e <_printf_common+0x3e>
 81098e0:	18e1      	adds	r1, r4, r3
 81098e2:	1c5a      	adds	r2, r3, #1
 81098e4:	2030      	movs	r0, #48	; 0x30
 81098e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 81098ea:	4422      	add	r2, r4
 81098ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 81098f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 81098f4:	3302      	adds	r3, #2
 81098f6:	e7c7      	b.n	8109888 <_printf_common+0x58>
 81098f8:	2301      	movs	r3, #1
 81098fa:	4622      	mov	r2, r4
 81098fc:	4649      	mov	r1, r9
 81098fe:	4638      	mov	r0, r7
 8109900:	47c0      	blx	r8
 8109902:	3001      	adds	r0, #1
 8109904:	d0e6      	beq.n	81098d4 <_printf_common+0xa4>
 8109906:	3601      	adds	r6, #1
 8109908:	e7d9      	b.n	81098be <_printf_common+0x8e>
	...

0810990c <_printf_i>:
 810990c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8109910:	7e0f      	ldrb	r7, [r1, #24]
 8109912:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8109914:	2f78      	cmp	r7, #120	; 0x78
 8109916:	4691      	mov	r9, r2
 8109918:	4680      	mov	r8, r0
 810991a:	460c      	mov	r4, r1
 810991c:	469a      	mov	sl, r3
 810991e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8109922:	d807      	bhi.n	8109934 <_printf_i+0x28>
 8109924:	2f62      	cmp	r7, #98	; 0x62
 8109926:	d80a      	bhi.n	810993e <_printf_i+0x32>
 8109928:	2f00      	cmp	r7, #0
 810992a:	f000 80d8 	beq.w	8109ade <_printf_i+0x1d2>
 810992e:	2f58      	cmp	r7, #88	; 0x58
 8109930:	f000 80a3 	beq.w	8109a7a <_printf_i+0x16e>
 8109934:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8109938:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 810993c:	e03a      	b.n	81099b4 <_printf_i+0xa8>
 810993e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8109942:	2b15      	cmp	r3, #21
 8109944:	d8f6      	bhi.n	8109934 <_printf_i+0x28>
 8109946:	a101      	add	r1, pc, #4	; (adr r1, 810994c <_printf_i+0x40>)
 8109948:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 810994c:	081099a5 	.word	0x081099a5
 8109950:	081099b9 	.word	0x081099b9
 8109954:	08109935 	.word	0x08109935
 8109958:	08109935 	.word	0x08109935
 810995c:	08109935 	.word	0x08109935
 8109960:	08109935 	.word	0x08109935
 8109964:	081099b9 	.word	0x081099b9
 8109968:	08109935 	.word	0x08109935
 810996c:	08109935 	.word	0x08109935
 8109970:	08109935 	.word	0x08109935
 8109974:	08109935 	.word	0x08109935
 8109978:	08109ac5 	.word	0x08109ac5
 810997c:	081099e9 	.word	0x081099e9
 8109980:	08109aa7 	.word	0x08109aa7
 8109984:	08109935 	.word	0x08109935
 8109988:	08109935 	.word	0x08109935
 810998c:	08109ae7 	.word	0x08109ae7
 8109990:	08109935 	.word	0x08109935
 8109994:	081099e9 	.word	0x081099e9
 8109998:	08109935 	.word	0x08109935
 810999c:	08109935 	.word	0x08109935
 81099a0:	08109aaf 	.word	0x08109aaf
 81099a4:	682b      	ldr	r3, [r5, #0]
 81099a6:	1d1a      	adds	r2, r3, #4
 81099a8:	681b      	ldr	r3, [r3, #0]
 81099aa:	602a      	str	r2, [r5, #0]
 81099ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 81099b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 81099b4:	2301      	movs	r3, #1
 81099b6:	e0a3      	b.n	8109b00 <_printf_i+0x1f4>
 81099b8:	6820      	ldr	r0, [r4, #0]
 81099ba:	6829      	ldr	r1, [r5, #0]
 81099bc:	0606      	lsls	r6, r0, #24
 81099be:	f101 0304 	add.w	r3, r1, #4
 81099c2:	d50a      	bpl.n	81099da <_printf_i+0xce>
 81099c4:	680e      	ldr	r6, [r1, #0]
 81099c6:	602b      	str	r3, [r5, #0]
 81099c8:	2e00      	cmp	r6, #0
 81099ca:	da03      	bge.n	81099d4 <_printf_i+0xc8>
 81099cc:	232d      	movs	r3, #45	; 0x2d
 81099ce:	4276      	negs	r6, r6
 81099d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81099d4:	485e      	ldr	r0, [pc, #376]	; (8109b50 <_printf_i+0x244>)
 81099d6:	230a      	movs	r3, #10
 81099d8:	e019      	b.n	8109a0e <_printf_i+0x102>
 81099da:	680e      	ldr	r6, [r1, #0]
 81099dc:	602b      	str	r3, [r5, #0]
 81099de:	f010 0f40 	tst.w	r0, #64	; 0x40
 81099e2:	bf18      	it	ne
 81099e4:	b236      	sxthne	r6, r6
 81099e6:	e7ef      	b.n	81099c8 <_printf_i+0xbc>
 81099e8:	682b      	ldr	r3, [r5, #0]
 81099ea:	6820      	ldr	r0, [r4, #0]
 81099ec:	1d19      	adds	r1, r3, #4
 81099ee:	6029      	str	r1, [r5, #0]
 81099f0:	0601      	lsls	r1, r0, #24
 81099f2:	d501      	bpl.n	81099f8 <_printf_i+0xec>
 81099f4:	681e      	ldr	r6, [r3, #0]
 81099f6:	e002      	b.n	81099fe <_printf_i+0xf2>
 81099f8:	0646      	lsls	r6, r0, #25
 81099fa:	d5fb      	bpl.n	81099f4 <_printf_i+0xe8>
 81099fc:	881e      	ldrh	r6, [r3, #0]
 81099fe:	4854      	ldr	r0, [pc, #336]	; (8109b50 <_printf_i+0x244>)
 8109a00:	2f6f      	cmp	r7, #111	; 0x6f
 8109a02:	bf0c      	ite	eq
 8109a04:	2308      	moveq	r3, #8
 8109a06:	230a      	movne	r3, #10
 8109a08:	2100      	movs	r1, #0
 8109a0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8109a0e:	6865      	ldr	r5, [r4, #4]
 8109a10:	60a5      	str	r5, [r4, #8]
 8109a12:	2d00      	cmp	r5, #0
 8109a14:	bfa2      	ittt	ge
 8109a16:	6821      	ldrge	r1, [r4, #0]
 8109a18:	f021 0104 	bicge.w	r1, r1, #4
 8109a1c:	6021      	strge	r1, [r4, #0]
 8109a1e:	b90e      	cbnz	r6, 8109a24 <_printf_i+0x118>
 8109a20:	2d00      	cmp	r5, #0
 8109a22:	d04d      	beq.n	8109ac0 <_printf_i+0x1b4>
 8109a24:	4615      	mov	r5, r2
 8109a26:	fbb6 f1f3 	udiv	r1, r6, r3
 8109a2a:	fb03 6711 	mls	r7, r3, r1, r6
 8109a2e:	5dc7      	ldrb	r7, [r0, r7]
 8109a30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8109a34:	4637      	mov	r7, r6
 8109a36:	42bb      	cmp	r3, r7
 8109a38:	460e      	mov	r6, r1
 8109a3a:	d9f4      	bls.n	8109a26 <_printf_i+0x11a>
 8109a3c:	2b08      	cmp	r3, #8
 8109a3e:	d10b      	bne.n	8109a58 <_printf_i+0x14c>
 8109a40:	6823      	ldr	r3, [r4, #0]
 8109a42:	07de      	lsls	r6, r3, #31
 8109a44:	d508      	bpl.n	8109a58 <_printf_i+0x14c>
 8109a46:	6923      	ldr	r3, [r4, #16]
 8109a48:	6861      	ldr	r1, [r4, #4]
 8109a4a:	4299      	cmp	r1, r3
 8109a4c:	bfde      	ittt	le
 8109a4e:	2330      	movle	r3, #48	; 0x30
 8109a50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8109a54:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8109a58:	1b52      	subs	r2, r2, r5
 8109a5a:	6122      	str	r2, [r4, #16]
 8109a5c:	f8cd a000 	str.w	sl, [sp]
 8109a60:	464b      	mov	r3, r9
 8109a62:	aa03      	add	r2, sp, #12
 8109a64:	4621      	mov	r1, r4
 8109a66:	4640      	mov	r0, r8
 8109a68:	f7ff fee2 	bl	8109830 <_printf_common>
 8109a6c:	3001      	adds	r0, #1
 8109a6e:	d14c      	bne.n	8109b0a <_printf_i+0x1fe>
 8109a70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8109a74:	b004      	add	sp, #16
 8109a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8109a7a:	4835      	ldr	r0, [pc, #212]	; (8109b50 <_printf_i+0x244>)
 8109a7c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8109a80:	6829      	ldr	r1, [r5, #0]
 8109a82:	6823      	ldr	r3, [r4, #0]
 8109a84:	f851 6b04 	ldr.w	r6, [r1], #4
 8109a88:	6029      	str	r1, [r5, #0]
 8109a8a:	061d      	lsls	r5, r3, #24
 8109a8c:	d514      	bpl.n	8109ab8 <_printf_i+0x1ac>
 8109a8e:	07df      	lsls	r7, r3, #31
 8109a90:	bf44      	itt	mi
 8109a92:	f043 0320 	orrmi.w	r3, r3, #32
 8109a96:	6023      	strmi	r3, [r4, #0]
 8109a98:	b91e      	cbnz	r6, 8109aa2 <_printf_i+0x196>
 8109a9a:	6823      	ldr	r3, [r4, #0]
 8109a9c:	f023 0320 	bic.w	r3, r3, #32
 8109aa0:	6023      	str	r3, [r4, #0]
 8109aa2:	2310      	movs	r3, #16
 8109aa4:	e7b0      	b.n	8109a08 <_printf_i+0xfc>
 8109aa6:	6823      	ldr	r3, [r4, #0]
 8109aa8:	f043 0320 	orr.w	r3, r3, #32
 8109aac:	6023      	str	r3, [r4, #0]
 8109aae:	2378      	movs	r3, #120	; 0x78
 8109ab0:	4828      	ldr	r0, [pc, #160]	; (8109b54 <_printf_i+0x248>)
 8109ab2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8109ab6:	e7e3      	b.n	8109a80 <_printf_i+0x174>
 8109ab8:	0659      	lsls	r1, r3, #25
 8109aba:	bf48      	it	mi
 8109abc:	b2b6      	uxthmi	r6, r6
 8109abe:	e7e6      	b.n	8109a8e <_printf_i+0x182>
 8109ac0:	4615      	mov	r5, r2
 8109ac2:	e7bb      	b.n	8109a3c <_printf_i+0x130>
 8109ac4:	682b      	ldr	r3, [r5, #0]
 8109ac6:	6826      	ldr	r6, [r4, #0]
 8109ac8:	6961      	ldr	r1, [r4, #20]
 8109aca:	1d18      	adds	r0, r3, #4
 8109acc:	6028      	str	r0, [r5, #0]
 8109ace:	0635      	lsls	r5, r6, #24
 8109ad0:	681b      	ldr	r3, [r3, #0]
 8109ad2:	d501      	bpl.n	8109ad8 <_printf_i+0x1cc>
 8109ad4:	6019      	str	r1, [r3, #0]
 8109ad6:	e002      	b.n	8109ade <_printf_i+0x1d2>
 8109ad8:	0670      	lsls	r0, r6, #25
 8109ada:	d5fb      	bpl.n	8109ad4 <_printf_i+0x1c8>
 8109adc:	8019      	strh	r1, [r3, #0]
 8109ade:	2300      	movs	r3, #0
 8109ae0:	6123      	str	r3, [r4, #16]
 8109ae2:	4615      	mov	r5, r2
 8109ae4:	e7ba      	b.n	8109a5c <_printf_i+0x150>
 8109ae6:	682b      	ldr	r3, [r5, #0]
 8109ae8:	1d1a      	adds	r2, r3, #4
 8109aea:	602a      	str	r2, [r5, #0]
 8109aec:	681d      	ldr	r5, [r3, #0]
 8109aee:	6862      	ldr	r2, [r4, #4]
 8109af0:	2100      	movs	r1, #0
 8109af2:	4628      	mov	r0, r5
 8109af4:	f7f6 fbfc 	bl	81002f0 <memchr>
 8109af8:	b108      	cbz	r0, 8109afe <_printf_i+0x1f2>
 8109afa:	1b40      	subs	r0, r0, r5
 8109afc:	6060      	str	r0, [r4, #4]
 8109afe:	6863      	ldr	r3, [r4, #4]
 8109b00:	6123      	str	r3, [r4, #16]
 8109b02:	2300      	movs	r3, #0
 8109b04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8109b08:	e7a8      	b.n	8109a5c <_printf_i+0x150>
 8109b0a:	6923      	ldr	r3, [r4, #16]
 8109b0c:	462a      	mov	r2, r5
 8109b0e:	4649      	mov	r1, r9
 8109b10:	4640      	mov	r0, r8
 8109b12:	47d0      	blx	sl
 8109b14:	3001      	adds	r0, #1
 8109b16:	d0ab      	beq.n	8109a70 <_printf_i+0x164>
 8109b18:	6823      	ldr	r3, [r4, #0]
 8109b1a:	079b      	lsls	r3, r3, #30
 8109b1c:	d413      	bmi.n	8109b46 <_printf_i+0x23a>
 8109b1e:	68e0      	ldr	r0, [r4, #12]
 8109b20:	9b03      	ldr	r3, [sp, #12]
 8109b22:	4298      	cmp	r0, r3
 8109b24:	bfb8      	it	lt
 8109b26:	4618      	movlt	r0, r3
 8109b28:	e7a4      	b.n	8109a74 <_printf_i+0x168>
 8109b2a:	2301      	movs	r3, #1
 8109b2c:	4632      	mov	r2, r6
 8109b2e:	4649      	mov	r1, r9
 8109b30:	4640      	mov	r0, r8
 8109b32:	47d0      	blx	sl
 8109b34:	3001      	adds	r0, #1
 8109b36:	d09b      	beq.n	8109a70 <_printf_i+0x164>
 8109b38:	3501      	adds	r5, #1
 8109b3a:	68e3      	ldr	r3, [r4, #12]
 8109b3c:	9903      	ldr	r1, [sp, #12]
 8109b3e:	1a5b      	subs	r3, r3, r1
 8109b40:	42ab      	cmp	r3, r5
 8109b42:	dcf2      	bgt.n	8109b2a <_printf_i+0x21e>
 8109b44:	e7eb      	b.n	8109b1e <_printf_i+0x212>
 8109b46:	2500      	movs	r5, #0
 8109b48:	f104 0619 	add.w	r6, r4, #25
 8109b4c:	e7f5      	b.n	8109b3a <_printf_i+0x22e>
 8109b4e:	bf00      	nop
 8109b50:	0810dc12 	.word	0x0810dc12
 8109b54:	0810dc23 	.word	0x0810dc23

08109b58 <_scanf_float>:
 8109b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109b5c:	b087      	sub	sp, #28
 8109b5e:	4617      	mov	r7, r2
 8109b60:	9303      	str	r3, [sp, #12]
 8109b62:	688b      	ldr	r3, [r1, #8]
 8109b64:	1e5a      	subs	r2, r3, #1
 8109b66:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8109b6a:	bf83      	ittte	hi
 8109b6c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8109b70:	195b      	addhi	r3, r3, r5
 8109b72:	9302      	strhi	r3, [sp, #8]
 8109b74:	2300      	movls	r3, #0
 8109b76:	bf86      	itte	hi
 8109b78:	f240 135d 	movwhi	r3, #349	; 0x15d
 8109b7c:	608b      	strhi	r3, [r1, #8]
 8109b7e:	9302      	strls	r3, [sp, #8]
 8109b80:	680b      	ldr	r3, [r1, #0]
 8109b82:	468b      	mov	fp, r1
 8109b84:	2500      	movs	r5, #0
 8109b86:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8109b8a:	f84b 3b1c 	str.w	r3, [fp], #28
 8109b8e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8109b92:	4680      	mov	r8, r0
 8109b94:	460c      	mov	r4, r1
 8109b96:	465e      	mov	r6, fp
 8109b98:	46aa      	mov	sl, r5
 8109b9a:	46a9      	mov	r9, r5
 8109b9c:	9501      	str	r5, [sp, #4]
 8109b9e:	68a2      	ldr	r2, [r4, #8]
 8109ba0:	b152      	cbz	r2, 8109bb8 <_scanf_float+0x60>
 8109ba2:	683b      	ldr	r3, [r7, #0]
 8109ba4:	781b      	ldrb	r3, [r3, #0]
 8109ba6:	2b4e      	cmp	r3, #78	; 0x4e
 8109ba8:	d864      	bhi.n	8109c74 <_scanf_float+0x11c>
 8109baa:	2b40      	cmp	r3, #64	; 0x40
 8109bac:	d83c      	bhi.n	8109c28 <_scanf_float+0xd0>
 8109bae:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8109bb2:	b2c8      	uxtb	r0, r1
 8109bb4:	280e      	cmp	r0, #14
 8109bb6:	d93a      	bls.n	8109c2e <_scanf_float+0xd6>
 8109bb8:	f1b9 0f00 	cmp.w	r9, #0
 8109bbc:	d003      	beq.n	8109bc6 <_scanf_float+0x6e>
 8109bbe:	6823      	ldr	r3, [r4, #0]
 8109bc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8109bc4:	6023      	str	r3, [r4, #0]
 8109bc6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8109bca:	f1ba 0f01 	cmp.w	sl, #1
 8109bce:	f200 8113 	bhi.w	8109df8 <_scanf_float+0x2a0>
 8109bd2:	455e      	cmp	r6, fp
 8109bd4:	f200 8105 	bhi.w	8109de2 <_scanf_float+0x28a>
 8109bd8:	2501      	movs	r5, #1
 8109bda:	4628      	mov	r0, r5
 8109bdc:	b007      	add	sp, #28
 8109bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109be2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8109be6:	2a0d      	cmp	r2, #13
 8109be8:	d8e6      	bhi.n	8109bb8 <_scanf_float+0x60>
 8109bea:	a101      	add	r1, pc, #4	; (adr r1, 8109bf0 <_scanf_float+0x98>)
 8109bec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8109bf0:	08109d2f 	.word	0x08109d2f
 8109bf4:	08109bb9 	.word	0x08109bb9
 8109bf8:	08109bb9 	.word	0x08109bb9
 8109bfc:	08109bb9 	.word	0x08109bb9
 8109c00:	08109d8f 	.word	0x08109d8f
 8109c04:	08109d67 	.word	0x08109d67
 8109c08:	08109bb9 	.word	0x08109bb9
 8109c0c:	08109bb9 	.word	0x08109bb9
 8109c10:	08109d3d 	.word	0x08109d3d
 8109c14:	08109bb9 	.word	0x08109bb9
 8109c18:	08109bb9 	.word	0x08109bb9
 8109c1c:	08109bb9 	.word	0x08109bb9
 8109c20:	08109bb9 	.word	0x08109bb9
 8109c24:	08109cf5 	.word	0x08109cf5
 8109c28:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8109c2c:	e7db      	b.n	8109be6 <_scanf_float+0x8e>
 8109c2e:	290e      	cmp	r1, #14
 8109c30:	d8c2      	bhi.n	8109bb8 <_scanf_float+0x60>
 8109c32:	a001      	add	r0, pc, #4	; (adr r0, 8109c38 <_scanf_float+0xe0>)
 8109c34:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8109c38:	08109ce7 	.word	0x08109ce7
 8109c3c:	08109bb9 	.word	0x08109bb9
 8109c40:	08109ce7 	.word	0x08109ce7
 8109c44:	08109d7b 	.word	0x08109d7b
 8109c48:	08109bb9 	.word	0x08109bb9
 8109c4c:	08109c95 	.word	0x08109c95
 8109c50:	08109cd1 	.word	0x08109cd1
 8109c54:	08109cd1 	.word	0x08109cd1
 8109c58:	08109cd1 	.word	0x08109cd1
 8109c5c:	08109cd1 	.word	0x08109cd1
 8109c60:	08109cd1 	.word	0x08109cd1
 8109c64:	08109cd1 	.word	0x08109cd1
 8109c68:	08109cd1 	.word	0x08109cd1
 8109c6c:	08109cd1 	.word	0x08109cd1
 8109c70:	08109cd1 	.word	0x08109cd1
 8109c74:	2b6e      	cmp	r3, #110	; 0x6e
 8109c76:	d809      	bhi.n	8109c8c <_scanf_float+0x134>
 8109c78:	2b60      	cmp	r3, #96	; 0x60
 8109c7a:	d8b2      	bhi.n	8109be2 <_scanf_float+0x8a>
 8109c7c:	2b54      	cmp	r3, #84	; 0x54
 8109c7e:	d077      	beq.n	8109d70 <_scanf_float+0x218>
 8109c80:	2b59      	cmp	r3, #89	; 0x59
 8109c82:	d199      	bne.n	8109bb8 <_scanf_float+0x60>
 8109c84:	2d07      	cmp	r5, #7
 8109c86:	d197      	bne.n	8109bb8 <_scanf_float+0x60>
 8109c88:	2508      	movs	r5, #8
 8109c8a:	e029      	b.n	8109ce0 <_scanf_float+0x188>
 8109c8c:	2b74      	cmp	r3, #116	; 0x74
 8109c8e:	d06f      	beq.n	8109d70 <_scanf_float+0x218>
 8109c90:	2b79      	cmp	r3, #121	; 0x79
 8109c92:	e7f6      	b.n	8109c82 <_scanf_float+0x12a>
 8109c94:	6821      	ldr	r1, [r4, #0]
 8109c96:	05c8      	lsls	r0, r1, #23
 8109c98:	d51a      	bpl.n	8109cd0 <_scanf_float+0x178>
 8109c9a:	9b02      	ldr	r3, [sp, #8]
 8109c9c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8109ca0:	6021      	str	r1, [r4, #0]
 8109ca2:	f109 0901 	add.w	r9, r9, #1
 8109ca6:	b11b      	cbz	r3, 8109cb0 <_scanf_float+0x158>
 8109ca8:	3b01      	subs	r3, #1
 8109caa:	3201      	adds	r2, #1
 8109cac:	9302      	str	r3, [sp, #8]
 8109cae:	60a2      	str	r2, [r4, #8]
 8109cb0:	68a3      	ldr	r3, [r4, #8]
 8109cb2:	3b01      	subs	r3, #1
 8109cb4:	60a3      	str	r3, [r4, #8]
 8109cb6:	6923      	ldr	r3, [r4, #16]
 8109cb8:	3301      	adds	r3, #1
 8109cba:	6123      	str	r3, [r4, #16]
 8109cbc:	687b      	ldr	r3, [r7, #4]
 8109cbe:	3b01      	subs	r3, #1
 8109cc0:	2b00      	cmp	r3, #0
 8109cc2:	607b      	str	r3, [r7, #4]
 8109cc4:	f340 8084 	ble.w	8109dd0 <_scanf_float+0x278>
 8109cc8:	683b      	ldr	r3, [r7, #0]
 8109cca:	3301      	adds	r3, #1
 8109ccc:	603b      	str	r3, [r7, #0]
 8109cce:	e766      	b.n	8109b9e <_scanf_float+0x46>
 8109cd0:	eb1a 0f05 	cmn.w	sl, r5
 8109cd4:	f47f af70 	bne.w	8109bb8 <_scanf_float+0x60>
 8109cd8:	6822      	ldr	r2, [r4, #0]
 8109cda:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8109cde:	6022      	str	r2, [r4, #0]
 8109ce0:	f806 3b01 	strb.w	r3, [r6], #1
 8109ce4:	e7e4      	b.n	8109cb0 <_scanf_float+0x158>
 8109ce6:	6822      	ldr	r2, [r4, #0]
 8109ce8:	0610      	lsls	r0, r2, #24
 8109cea:	f57f af65 	bpl.w	8109bb8 <_scanf_float+0x60>
 8109cee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8109cf2:	e7f4      	b.n	8109cde <_scanf_float+0x186>
 8109cf4:	f1ba 0f00 	cmp.w	sl, #0
 8109cf8:	d10e      	bne.n	8109d18 <_scanf_float+0x1c0>
 8109cfa:	f1b9 0f00 	cmp.w	r9, #0
 8109cfe:	d10e      	bne.n	8109d1e <_scanf_float+0x1c6>
 8109d00:	6822      	ldr	r2, [r4, #0]
 8109d02:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8109d06:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8109d0a:	d108      	bne.n	8109d1e <_scanf_float+0x1c6>
 8109d0c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8109d10:	6022      	str	r2, [r4, #0]
 8109d12:	f04f 0a01 	mov.w	sl, #1
 8109d16:	e7e3      	b.n	8109ce0 <_scanf_float+0x188>
 8109d18:	f1ba 0f02 	cmp.w	sl, #2
 8109d1c:	d055      	beq.n	8109dca <_scanf_float+0x272>
 8109d1e:	2d01      	cmp	r5, #1
 8109d20:	d002      	beq.n	8109d28 <_scanf_float+0x1d0>
 8109d22:	2d04      	cmp	r5, #4
 8109d24:	f47f af48 	bne.w	8109bb8 <_scanf_float+0x60>
 8109d28:	3501      	adds	r5, #1
 8109d2a:	b2ed      	uxtb	r5, r5
 8109d2c:	e7d8      	b.n	8109ce0 <_scanf_float+0x188>
 8109d2e:	f1ba 0f01 	cmp.w	sl, #1
 8109d32:	f47f af41 	bne.w	8109bb8 <_scanf_float+0x60>
 8109d36:	f04f 0a02 	mov.w	sl, #2
 8109d3a:	e7d1      	b.n	8109ce0 <_scanf_float+0x188>
 8109d3c:	b97d      	cbnz	r5, 8109d5e <_scanf_float+0x206>
 8109d3e:	f1b9 0f00 	cmp.w	r9, #0
 8109d42:	f47f af3c 	bne.w	8109bbe <_scanf_float+0x66>
 8109d46:	6822      	ldr	r2, [r4, #0]
 8109d48:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8109d4c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8109d50:	f47f af39 	bne.w	8109bc6 <_scanf_float+0x6e>
 8109d54:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8109d58:	6022      	str	r2, [r4, #0]
 8109d5a:	2501      	movs	r5, #1
 8109d5c:	e7c0      	b.n	8109ce0 <_scanf_float+0x188>
 8109d5e:	2d03      	cmp	r5, #3
 8109d60:	d0e2      	beq.n	8109d28 <_scanf_float+0x1d0>
 8109d62:	2d05      	cmp	r5, #5
 8109d64:	e7de      	b.n	8109d24 <_scanf_float+0x1cc>
 8109d66:	2d02      	cmp	r5, #2
 8109d68:	f47f af26 	bne.w	8109bb8 <_scanf_float+0x60>
 8109d6c:	2503      	movs	r5, #3
 8109d6e:	e7b7      	b.n	8109ce0 <_scanf_float+0x188>
 8109d70:	2d06      	cmp	r5, #6
 8109d72:	f47f af21 	bne.w	8109bb8 <_scanf_float+0x60>
 8109d76:	2507      	movs	r5, #7
 8109d78:	e7b2      	b.n	8109ce0 <_scanf_float+0x188>
 8109d7a:	6822      	ldr	r2, [r4, #0]
 8109d7c:	0591      	lsls	r1, r2, #22
 8109d7e:	f57f af1b 	bpl.w	8109bb8 <_scanf_float+0x60>
 8109d82:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8109d86:	6022      	str	r2, [r4, #0]
 8109d88:	f8cd 9004 	str.w	r9, [sp, #4]
 8109d8c:	e7a8      	b.n	8109ce0 <_scanf_float+0x188>
 8109d8e:	6822      	ldr	r2, [r4, #0]
 8109d90:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8109d94:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8109d98:	d006      	beq.n	8109da8 <_scanf_float+0x250>
 8109d9a:	0550      	lsls	r0, r2, #21
 8109d9c:	f57f af0c 	bpl.w	8109bb8 <_scanf_float+0x60>
 8109da0:	f1b9 0f00 	cmp.w	r9, #0
 8109da4:	f43f af0f 	beq.w	8109bc6 <_scanf_float+0x6e>
 8109da8:	0591      	lsls	r1, r2, #22
 8109daa:	bf58      	it	pl
 8109dac:	9901      	ldrpl	r1, [sp, #4]
 8109dae:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8109db2:	bf58      	it	pl
 8109db4:	eba9 0101 	subpl.w	r1, r9, r1
 8109db8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8109dbc:	bf58      	it	pl
 8109dbe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8109dc2:	6022      	str	r2, [r4, #0]
 8109dc4:	f04f 0900 	mov.w	r9, #0
 8109dc8:	e78a      	b.n	8109ce0 <_scanf_float+0x188>
 8109dca:	f04f 0a03 	mov.w	sl, #3
 8109dce:	e787      	b.n	8109ce0 <_scanf_float+0x188>
 8109dd0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8109dd4:	4639      	mov	r1, r7
 8109dd6:	4640      	mov	r0, r8
 8109dd8:	4798      	blx	r3
 8109dda:	2800      	cmp	r0, #0
 8109ddc:	f43f aedf 	beq.w	8109b9e <_scanf_float+0x46>
 8109de0:	e6ea      	b.n	8109bb8 <_scanf_float+0x60>
 8109de2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109de6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8109dea:	463a      	mov	r2, r7
 8109dec:	4640      	mov	r0, r8
 8109dee:	4798      	blx	r3
 8109df0:	6923      	ldr	r3, [r4, #16]
 8109df2:	3b01      	subs	r3, #1
 8109df4:	6123      	str	r3, [r4, #16]
 8109df6:	e6ec      	b.n	8109bd2 <_scanf_float+0x7a>
 8109df8:	1e6b      	subs	r3, r5, #1
 8109dfa:	2b06      	cmp	r3, #6
 8109dfc:	d825      	bhi.n	8109e4a <_scanf_float+0x2f2>
 8109dfe:	2d02      	cmp	r5, #2
 8109e00:	d836      	bhi.n	8109e70 <_scanf_float+0x318>
 8109e02:	455e      	cmp	r6, fp
 8109e04:	f67f aee8 	bls.w	8109bd8 <_scanf_float+0x80>
 8109e08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109e0c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8109e10:	463a      	mov	r2, r7
 8109e12:	4640      	mov	r0, r8
 8109e14:	4798      	blx	r3
 8109e16:	6923      	ldr	r3, [r4, #16]
 8109e18:	3b01      	subs	r3, #1
 8109e1a:	6123      	str	r3, [r4, #16]
 8109e1c:	e7f1      	b.n	8109e02 <_scanf_float+0x2aa>
 8109e1e:	9802      	ldr	r0, [sp, #8]
 8109e20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109e24:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8109e28:	9002      	str	r0, [sp, #8]
 8109e2a:	463a      	mov	r2, r7
 8109e2c:	4640      	mov	r0, r8
 8109e2e:	4798      	blx	r3
 8109e30:	6923      	ldr	r3, [r4, #16]
 8109e32:	3b01      	subs	r3, #1
 8109e34:	6123      	str	r3, [r4, #16]
 8109e36:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8109e3a:	fa5f fa8a 	uxtb.w	sl, sl
 8109e3e:	f1ba 0f02 	cmp.w	sl, #2
 8109e42:	d1ec      	bne.n	8109e1e <_scanf_float+0x2c6>
 8109e44:	3d03      	subs	r5, #3
 8109e46:	b2ed      	uxtb	r5, r5
 8109e48:	1b76      	subs	r6, r6, r5
 8109e4a:	6823      	ldr	r3, [r4, #0]
 8109e4c:	05da      	lsls	r2, r3, #23
 8109e4e:	d52f      	bpl.n	8109eb0 <_scanf_float+0x358>
 8109e50:	055b      	lsls	r3, r3, #21
 8109e52:	d510      	bpl.n	8109e76 <_scanf_float+0x31e>
 8109e54:	455e      	cmp	r6, fp
 8109e56:	f67f aebf 	bls.w	8109bd8 <_scanf_float+0x80>
 8109e5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109e5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8109e62:	463a      	mov	r2, r7
 8109e64:	4640      	mov	r0, r8
 8109e66:	4798      	blx	r3
 8109e68:	6923      	ldr	r3, [r4, #16]
 8109e6a:	3b01      	subs	r3, #1
 8109e6c:	6123      	str	r3, [r4, #16]
 8109e6e:	e7f1      	b.n	8109e54 <_scanf_float+0x2fc>
 8109e70:	46aa      	mov	sl, r5
 8109e72:	9602      	str	r6, [sp, #8]
 8109e74:	e7df      	b.n	8109e36 <_scanf_float+0x2de>
 8109e76:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8109e7a:	6923      	ldr	r3, [r4, #16]
 8109e7c:	2965      	cmp	r1, #101	; 0x65
 8109e7e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8109e82:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8109e86:	6123      	str	r3, [r4, #16]
 8109e88:	d00c      	beq.n	8109ea4 <_scanf_float+0x34c>
 8109e8a:	2945      	cmp	r1, #69	; 0x45
 8109e8c:	d00a      	beq.n	8109ea4 <_scanf_float+0x34c>
 8109e8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109e92:	463a      	mov	r2, r7
 8109e94:	4640      	mov	r0, r8
 8109e96:	4798      	blx	r3
 8109e98:	6923      	ldr	r3, [r4, #16]
 8109e9a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8109e9e:	3b01      	subs	r3, #1
 8109ea0:	1eb5      	subs	r5, r6, #2
 8109ea2:	6123      	str	r3, [r4, #16]
 8109ea4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109ea8:	463a      	mov	r2, r7
 8109eaa:	4640      	mov	r0, r8
 8109eac:	4798      	blx	r3
 8109eae:	462e      	mov	r6, r5
 8109eb0:	6825      	ldr	r5, [r4, #0]
 8109eb2:	f015 0510 	ands.w	r5, r5, #16
 8109eb6:	d159      	bne.n	8109f6c <_scanf_float+0x414>
 8109eb8:	7035      	strb	r5, [r6, #0]
 8109eba:	6823      	ldr	r3, [r4, #0]
 8109ebc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8109ec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8109ec4:	d11b      	bne.n	8109efe <_scanf_float+0x3a6>
 8109ec6:	9b01      	ldr	r3, [sp, #4]
 8109ec8:	454b      	cmp	r3, r9
 8109eca:	eba3 0209 	sub.w	r2, r3, r9
 8109ece:	d123      	bne.n	8109f18 <_scanf_float+0x3c0>
 8109ed0:	2200      	movs	r2, #0
 8109ed2:	4659      	mov	r1, fp
 8109ed4:	4640      	mov	r0, r8
 8109ed6:	f000 feb1 	bl	810ac3c <_strtod_r>
 8109eda:	6822      	ldr	r2, [r4, #0]
 8109edc:	9b03      	ldr	r3, [sp, #12]
 8109ede:	f012 0f02 	tst.w	r2, #2
 8109ee2:	ec57 6b10 	vmov	r6, r7, d0
 8109ee6:	681b      	ldr	r3, [r3, #0]
 8109ee8:	d021      	beq.n	8109f2e <_scanf_float+0x3d6>
 8109eea:	9903      	ldr	r1, [sp, #12]
 8109eec:	1d1a      	adds	r2, r3, #4
 8109eee:	600a      	str	r2, [r1, #0]
 8109ef0:	681b      	ldr	r3, [r3, #0]
 8109ef2:	e9c3 6700 	strd	r6, r7, [r3]
 8109ef6:	68e3      	ldr	r3, [r4, #12]
 8109ef8:	3301      	adds	r3, #1
 8109efa:	60e3      	str	r3, [r4, #12]
 8109efc:	e66d      	b.n	8109bda <_scanf_float+0x82>
 8109efe:	9b04      	ldr	r3, [sp, #16]
 8109f00:	2b00      	cmp	r3, #0
 8109f02:	d0e5      	beq.n	8109ed0 <_scanf_float+0x378>
 8109f04:	9905      	ldr	r1, [sp, #20]
 8109f06:	230a      	movs	r3, #10
 8109f08:	462a      	mov	r2, r5
 8109f0a:	3101      	adds	r1, #1
 8109f0c:	4640      	mov	r0, r8
 8109f0e:	f000 ff1d 	bl	810ad4c <_strtol_r>
 8109f12:	9b04      	ldr	r3, [sp, #16]
 8109f14:	9e05      	ldr	r6, [sp, #20]
 8109f16:	1ac2      	subs	r2, r0, r3
 8109f18:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8109f1c:	429e      	cmp	r6, r3
 8109f1e:	bf28      	it	cs
 8109f20:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8109f24:	4912      	ldr	r1, [pc, #72]	; (8109f70 <_scanf_float+0x418>)
 8109f26:	4630      	mov	r0, r6
 8109f28:	f000 f844 	bl	8109fb4 <siprintf>
 8109f2c:	e7d0      	b.n	8109ed0 <_scanf_float+0x378>
 8109f2e:	9903      	ldr	r1, [sp, #12]
 8109f30:	f012 0f04 	tst.w	r2, #4
 8109f34:	f103 0204 	add.w	r2, r3, #4
 8109f38:	600a      	str	r2, [r1, #0]
 8109f3a:	d1d9      	bne.n	8109ef0 <_scanf_float+0x398>
 8109f3c:	f8d3 8000 	ldr.w	r8, [r3]
 8109f40:	ee10 2a10 	vmov	r2, s0
 8109f44:	ee10 0a10 	vmov	r0, s0
 8109f48:	463b      	mov	r3, r7
 8109f4a:	4639      	mov	r1, r7
 8109f4c:	f7f6 fe76 	bl	8100c3c <__aeabi_dcmpun>
 8109f50:	b128      	cbz	r0, 8109f5e <_scanf_float+0x406>
 8109f52:	4808      	ldr	r0, [pc, #32]	; (8109f74 <_scanf_float+0x41c>)
 8109f54:	f000 f828 	bl	8109fa8 <nanf>
 8109f58:	ed88 0a00 	vstr	s0, [r8]
 8109f5c:	e7cb      	b.n	8109ef6 <_scanf_float+0x39e>
 8109f5e:	4630      	mov	r0, r6
 8109f60:	4639      	mov	r1, r7
 8109f62:	f7f6 fec9 	bl	8100cf8 <__aeabi_d2f>
 8109f66:	f8c8 0000 	str.w	r0, [r8]
 8109f6a:	e7c4      	b.n	8109ef6 <_scanf_float+0x39e>
 8109f6c:	2500      	movs	r5, #0
 8109f6e:	e634      	b.n	8109bda <_scanf_float+0x82>
 8109f70:	0810dc34 	.word	0x0810dc34
 8109f74:	0810e0a8 	.word	0x0810e0a8

08109f78 <iprintf>:
 8109f78:	b40f      	push	{r0, r1, r2, r3}
 8109f7a:	4b0a      	ldr	r3, [pc, #40]	; (8109fa4 <iprintf+0x2c>)
 8109f7c:	b513      	push	{r0, r1, r4, lr}
 8109f7e:	681c      	ldr	r4, [r3, #0]
 8109f80:	b124      	cbz	r4, 8109f8c <iprintf+0x14>
 8109f82:	69a3      	ldr	r3, [r4, #24]
 8109f84:	b913      	cbnz	r3, 8109f8c <iprintf+0x14>
 8109f86:	4620      	mov	r0, r4
 8109f88:	f001 fdb4 	bl	810baf4 <__sinit>
 8109f8c:	ab05      	add	r3, sp, #20
 8109f8e:	9a04      	ldr	r2, [sp, #16]
 8109f90:	68a1      	ldr	r1, [r4, #8]
 8109f92:	9301      	str	r3, [sp, #4]
 8109f94:	4620      	mov	r0, r4
 8109f96:	f003 f927 	bl	810d1e8 <_vfiprintf_r>
 8109f9a:	b002      	add	sp, #8
 8109f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8109fa0:	b004      	add	sp, #16
 8109fa2:	4770      	bx	lr
 8109fa4:	1000002c 	.word	0x1000002c

08109fa8 <nanf>:
 8109fa8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8109fb0 <nanf+0x8>
 8109fac:	4770      	bx	lr
 8109fae:	bf00      	nop
 8109fb0:	7fc00000 	.word	0x7fc00000

08109fb4 <siprintf>:
 8109fb4:	b40e      	push	{r1, r2, r3}
 8109fb6:	b500      	push	{lr}
 8109fb8:	b09c      	sub	sp, #112	; 0x70
 8109fba:	ab1d      	add	r3, sp, #116	; 0x74
 8109fbc:	9002      	str	r0, [sp, #8]
 8109fbe:	9006      	str	r0, [sp, #24]
 8109fc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8109fc4:	4809      	ldr	r0, [pc, #36]	; (8109fec <siprintf+0x38>)
 8109fc6:	9107      	str	r1, [sp, #28]
 8109fc8:	9104      	str	r1, [sp, #16]
 8109fca:	4909      	ldr	r1, [pc, #36]	; (8109ff0 <siprintf+0x3c>)
 8109fcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8109fd0:	9105      	str	r1, [sp, #20]
 8109fd2:	6800      	ldr	r0, [r0, #0]
 8109fd4:	9301      	str	r3, [sp, #4]
 8109fd6:	a902      	add	r1, sp, #8
 8109fd8:	f002 ffdc 	bl	810cf94 <_svfiprintf_r>
 8109fdc:	9b02      	ldr	r3, [sp, #8]
 8109fde:	2200      	movs	r2, #0
 8109fe0:	701a      	strb	r2, [r3, #0]
 8109fe2:	b01c      	add	sp, #112	; 0x70
 8109fe4:	f85d eb04 	ldr.w	lr, [sp], #4
 8109fe8:	b003      	add	sp, #12
 8109fea:	4770      	bx	lr
 8109fec:	1000002c 	.word	0x1000002c
 8109ff0:	ffff0208 	.word	0xffff0208

08109ff4 <sulp>:
 8109ff4:	b570      	push	{r4, r5, r6, lr}
 8109ff6:	4604      	mov	r4, r0
 8109ff8:	460d      	mov	r5, r1
 8109ffa:	ec45 4b10 	vmov	d0, r4, r5
 8109ffe:	4616      	mov	r6, r2
 810a000:	f002 fd26 	bl	810ca50 <__ulp>
 810a004:	ec51 0b10 	vmov	r0, r1, d0
 810a008:	b17e      	cbz	r6, 810a02a <sulp+0x36>
 810a00a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 810a00e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 810a012:	2b00      	cmp	r3, #0
 810a014:	dd09      	ble.n	810a02a <sulp+0x36>
 810a016:	051b      	lsls	r3, r3, #20
 810a018:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 810a01c:	2400      	movs	r4, #0
 810a01e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 810a022:	4622      	mov	r2, r4
 810a024:	462b      	mov	r3, r5
 810a026:	f7f6 fb6f 	bl	8100708 <__aeabi_dmul>
 810a02a:	bd70      	pop	{r4, r5, r6, pc}
 810a02c:	0000      	movs	r0, r0
	...

0810a030 <_strtod_l>:
 810a030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a034:	ed2d 8b02 	vpush	{d8}
 810a038:	b09d      	sub	sp, #116	; 0x74
 810a03a:	461f      	mov	r7, r3
 810a03c:	2300      	movs	r3, #0
 810a03e:	9318      	str	r3, [sp, #96]	; 0x60
 810a040:	4ba2      	ldr	r3, [pc, #648]	; (810a2cc <_strtod_l+0x29c>)
 810a042:	9213      	str	r2, [sp, #76]	; 0x4c
 810a044:	681b      	ldr	r3, [r3, #0]
 810a046:	9305      	str	r3, [sp, #20]
 810a048:	4604      	mov	r4, r0
 810a04a:	4618      	mov	r0, r3
 810a04c:	4688      	mov	r8, r1
 810a04e:	f7f6 f947 	bl	81002e0 <strlen>
 810a052:	f04f 0a00 	mov.w	sl, #0
 810a056:	4605      	mov	r5, r0
 810a058:	f04f 0b00 	mov.w	fp, #0
 810a05c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 810a060:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810a062:	781a      	ldrb	r2, [r3, #0]
 810a064:	2a2b      	cmp	r2, #43	; 0x2b
 810a066:	d04e      	beq.n	810a106 <_strtod_l+0xd6>
 810a068:	d83b      	bhi.n	810a0e2 <_strtod_l+0xb2>
 810a06a:	2a0d      	cmp	r2, #13
 810a06c:	d834      	bhi.n	810a0d8 <_strtod_l+0xa8>
 810a06e:	2a08      	cmp	r2, #8
 810a070:	d834      	bhi.n	810a0dc <_strtod_l+0xac>
 810a072:	2a00      	cmp	r2, #0
 810a074:	d03e      	beq.n	810a0f4 <_strtod_l+0xc4>
 810a076:	2300      	movs	r3, #0
 810a078:	930a      	str	r3, [sp, #40]	; 0x28
 810a07a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 810a07c:	7833      	ldrb	r3, [r6, #0]
 810a07e:	2b30      	cmp	r3, #48	; 0x30
 810a080:	f040 80b0 	bne.w	810a1e4 <_strtod_l+0x1b4>
 810a084:	7873      	ldrb	r3, [r6, #1]
 810a086:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810a08a:	2b58      	cmp	r3, #88	; 0x58
 810a08c:	d168      	bne.n	810a160 <_strtod_l+0x130>
 810a08e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810a090:	9301      	str	r3, [sp, #4]
 810a092:	ab18      	add	r3, sp, #96	; 0x60
 810a094:	9702      	str	r7, [sp, #8]
 810a096:	9300      	str	r3, [sp, #0]
 810a098:	4a8d      	ldr	r2, [pc, #564]	; (810a2d0 <_strtod_l+0x2a0>)
 810a09a:	ab19      	add	r3, sp, #100	; 0x64
 810a09c:	a917      	add	r1, sp, #92	; 0x5c
 810a09e:	4620      	mov	r0, r4
 810a0a0:	f001 fe2c 	bl	810bcfc <__gethex>
 810a0a4:	f010 0707 	ands.w	r7, r0, #7
 810a0a8:	4605      	mov	r5, r0
 810a0aa:	d005      	beq.n	810a0b8 <_strtod_l+0x88>
 810a0ac:	2f06      	cmp	r7, #6
 810a0ae:	d12c      	bne.n	810a10a <_strtod_l+0xda>
 810a0b0:	3601      	adds	r6, #1
 810a0b2:	2300      	movs	r3, #0
 810a0b4:	9617      	str	r6, [sp, #92]	; 0x5c
 810a0b6:	930a      	str	r3, [sp, #40]	; 0x28
 810a0b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810a0ba:	2b00      	cmp	r3, #0
 810a0bc:	f040 8590 	bne.w	810abe0 <_strtod_l+0xbb0>
 810a0c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810a0c2:	b1eb      	cbz	r3, 810a100 <_strtod_l+0xd0>
 810a0c4:	4652      	mov	r2, sl
 810a0c6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 810a0ca:	ec43 2b10 	vmov	d0, r2, r3
 810a0ce:	b01d      	add	sp, #116	; 0x74
 810a0d0:	ecbd 8b02 	vpop	{d8}
 810a0d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a0d8:	2a20      	cmp	r2, #32
 810a0da:	d1cc      	bne.n	810a076 <_strtod_l+0x46>
 810a0dc:	3301      	adds	r3, #1
 810a0de:	9317      	str	r3, [sp, #92]	; 0x5c
 810a0e0:	e7be      	b.n	810a060 <_strtod_l+0x30>
 810a0e2:	2a2d      	cmp	r2, #45	; 0x2d
 810a0e4:	d1c7      	bne.n	810a076 <_strtod_l+0x46>
 810a0e6:	2201      	movs	r2, #1
 810a0e8:	920a      	str	r2, [sp, #40]	; 0x28
 810a0ea:	1c5a      	adds	r2, r3, #1
 810a0ec:	9217      	str	r2, [sp, #92]	; 0x5c
 810a0ee:	785b      	ldrb	r3, [r3, #1]
 810a0f0:	2b00      	cmp	r3, #0
 810a0f2:	d1c2      	bne.n	810a07a <_strtod_l+0x4a>
 810a0f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810a0f6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 810a0fa:	2b00      	cmp	r3, #0
 810a0fc:	f040 856e 	bne.w	810abdc <_strtod_l+0xbac>
 810a100:	4652      	mov	r2, sl
 810a102:	465b      	mov	r3, fp
 810a104:	e7e1      	b.n	810a0ca <_strtod_l+0x9a>
 810a106:	2200      	movs	r2, #0
 810a108:	e7ee      	b.n	810a0e8 <_strtod_l+0xb8>
 810a10a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 810a10c:	b13a      	cbz	r2, 810a11e <_strtod_l+0xee>
 810a10e:	2135      	movs	r1, #53	; 0x35
 810a110:	a81a      	add	r0, sp, #104	; 0x68
 810a112:	f002 fda8 	bl	810cc66 <__copybits>
 810a116:	9918      	ldr	r1, [sp, #96]	; 0x60
 810a118:	4620      	mov	r0, r4
 810a11a:	f002 f967 	bl	810c3ec <_Bfree>
 810a11e:	3f01      	subs	r7, #1
 810a120:	2f04      	cmp	r7, #4
 810a122:	d806      	bhi.n	810a132 <_strtod_l+0x102>
 810a124:	e8df f007 	tbb	[pc, r7]
 810a128:	1714030a 	.word	0x1714030a
 810a12c:	0a          	.byte	0x0a
 810a12d:	00          	.byte	0x00
 810a12e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 810a132:	0728      	lsls	r0, r5, #28
 810a134:	d5c0      	bpl.n	810a0b8 <_strtod_l+0x88>
 810a136:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 810a13a:	e7bd      	b.n	810a0b8 <_strtod_l+0x88>
 810a13c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 810a140:	9a19      	ldr	r2, [sp, #100]	; 0x64
 810a142:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 810a146:	f202 4233 	addw	r2, r2, #1075	; 0x433
 810a14a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 810a14e:	e7f0      	b.n	810a132 <_strtod_l+0x102>
 810a150:	f8df b180 	ldr.w	fp, [pc, #384]	; 810a2d4 <_strtod_l+0x2a4>
 810a154:	e7ed      	b.n	810a132 <_strtod_l+0x102>
 810a156:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 810a15a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 810a15e:	e7e8      	b.n	810a132 <_strtod_l+0x102>
 810a160:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810a162:	1c5a      	adds	r2, r3, #1
 810a164:	9217      	str	r2, [sp, #92]	; 0x5c
 810a166:	785b      	ldrb	r3, [r3, #1]
 810a168:	2b30      	cmp	r3, #48	; 0x30
 810a16a:	d0f9      	beq.n	810a160 <_strtod_l+0x130>
 810a16c:	2b00      	cmp	r3, #0
 810a16e:	d0a3      	beq.n	810a0b8 <_strtod_l+0x88>
 810a170:	2301      	movs	r3, #1
 810a172:	f04f 0900 	mov.w	r9, #0
 810a176:	9304      	str	r3, [sp, #16]
 810a178:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810a17a:	9308      	str	r3, [sp, #32]
 810a17c:	f8cd 901c 	str.w	r9, [sp, #28]
 810a180:	464f      	mov	r7, r9
 810a182:	220a      	movs	r2, #10
 810a184:	9817      	ldr	r0, [sp, #92]	; 0x5c
 810a186:	7806      	ldrb	r6, [r0, #0]
 810a188:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 810a18c:	b2d9      	uxtb	r1, r3
 810a18e:	2909      	cmp	r1, #9
 810a190:	d92a      	bls.n	810a1e8 <_strtod_l+0x1b8>
 810a192:	9905      	ldr	r1, [sp, #20]
 810a194:	462a      	mov	r2, r5
 810a196:	f003 f9b2 	bl	810d4fe <strncmp>
 810a19a:	b398      	cbz	r0, 810a204 <_strtod_l+0x1d4>
 810a19c:	2000      	movs	r0, #0
 810a19e:	4632      	mov	r2, r6
 810a1a0:	463d      	mov	r5, r7
 810a1a2:	9005      	str	r0, [sp, #20]
 810a1a4:	4603      	mov	r3, r0
 810a1a6:	2a65      	cmp	r2, #101	; 0x65
 810a1a8:	d001      	beq.n	810a1ae <_strtod_l+0x17e>
 810a1aa:	2a45      	cmp	r2, #69	; 0x45
 810a1ac:	d118      	bne.n	810a1e0 <_strtod_l+0x1b0>
 810a1ae:	b91d      	cbnz	r5, 810a1b8 <_strtod_l+0x188>
 810a1b0:	9a04      	ldr	r2, [sp, #16]
 810a1b2:	4302      	orrs	r2, r0
 810a1b4:	d09e      	beq.n	810a0f4 <_strtod_l+0xc4>
 810a1b6:	2500      	movs	r5, #0
 810a1b8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 810a1bc:	f108 0201 	add.w	r2, r8, #1
 810a1c0:	9217      	str	r2, [sp, #92]	; 0x5c
 810a1c2:	f898 2001 	ldrb.w	r2, [r8, #1]
 810a1c6:	2a2b      	cmp	r2, #43	; 0x2b
 810a1c8:	d075      	beq.n	810a2b6 <_strtod_l+0x286>
 810a1ca:	2a2d      	cmp	r2, #45	; 0x2d
 810a1cc:	d07b      	beq.n	810a2c6 <_strtod_l+0x296>
 810a1ce:	f04f 0c00 	mov.w	ip, #0
 810a1d2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 810a1d6:	2909      	cmp	r1, #9
 810a1d8:	f240 8082 	bls.w	810a2e0 <_strtod_l+0x2b0>
 810a1dc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 810a1e0:	2600      	movs	r6, #0
 810a1e2:	e09d      	b.n	810a320 <_strtod_l+0x2f0>
 810a1e4:	2300      	movs	r3, #0
 810a1e6:	e7c4      	b.n	810a172 <_strtod_l+0x142>
 810a1e8:	2f08      	cmp	r7, #8
 810a1ea:	bfd8      	it	le
 810a1ec:	9907      	ldrle	r1, [sp, #28]
 810a1ee:	f100 0001 	add.w	r0, r0, #1
 810a1f2:	bfda      	itte	le
 810a1f4:	fb02 3301 	mlale	r3, r2, r1, r3
 810a1f8:	9307      	strle	r3, [sp, #28]
 810a1fa:	fb02 3909 	mlagt	r9, r2, r9, r3
 810a1fe:	3701      	adds	r7, #1
 810a200:	9017      	str	r0, [sp, #92]	; 0x5c
 810a202:	e7bf      	b.n	810a184 <_strtod_l+0x154>
 810a204:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810a206:	195a      	adds	r2, r3, r5
 810a208:	9217      	str	r2, [sp, #92]	; 0x5c
 810a20a:	5d5a      	ldrb	r2, [r3, r5]
 810a20c:	2f00      	cmp	r7, #0
 810a20e:	d037      	beq.n	810a280 <_strtod_l+0x250>
 810a210:	9005      	str	r0, [sp, #20]
 810a212:	463d      	mov	r5, r7
 810a214:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 810a218:	2b09      	cmp	r3, #9
 810a21a:	d912      	bls.n	810a242 <_strtod_l+0x212>
 810a21c:	2301      	movs	r3, #1
 810a21e:	e7c2      	b.n	810a1a6 <_strtod_l+0x176>
 810a220:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810a222:	1c5a      	adds	r2, r3, #1
 810a224:	9217      	str	r2, [sp, #92]	; 0x5c
 810a226:	785a      	ldrb	r2, [r3, #1]
 810a228:	3001      	adds	r0, #1
 810a22a:	2a30      	cmp	r2, #48	; 0x30
 810a22c:	d0f8      	beq.n	810a220 <_strtod_l+0x1f0>
 810a22e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 810a232:	2b08      	cmp	r3, #8
 810a234:	f200 84d9 	bhi.w	810abea <_strtod_l+0xbba>
 810a238:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810a23a:	9005      	str	r0, [sp, #20]
 810a23c:	2000      	movs	r0, #0
 810a23e:	9308      	str	r3, [sp, #32]
 810a240:	4605      	mov	r5, r0
 810a242:	3a30      	subs	r2, #48	; 0x30
 810a244:	f100 0301 	add.w	r3, r0, #1
 810a248:	d014      	beq.n	810a274 <_strtod_l+0x244>
 810a24a:	9905      	ldr	r1, [sp, #20]
 810a24c:	4419      	add	r1, r3
 810a24e:	9105      	str	r1, [sp, #20]
 810a250:	462b      	mov	r3, r5
 810a252:	eb00 0e05 	add.w	lr, r0, r5
 810a256:	210a      	movs	r1, #10
 810a258:	4573      	cmp	r3, lr
 810a25a:	d113      	bne.n	810a284 <_strtod_l+0x254>
 810a25c:	182b      	adds	r3, r5, r0
 810a25e:	2b08      	cmp	r3, #8
 810a260:	f105 0501 	add.w	r5, r5, #1
 810a264:	4405      	add	r5, r0
 810a266:	dc1c      	bgt.n	810a2a2 <_strtod_l+0x272>
 810a268:	9907      	ldr	r1, [sp, #28]
 810a26a:	230a      	movs	r3, #10
 810a26c:	fb03 2301 	mla	r3, r3, r1, r2
 810a270:	9307      	str	r3, [sp, #28]
 810a272:	2300      	movs	r3, #0
 810a274:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810a276:	1c51      	adds	r1, r2, #1
 810a278:	9117      	str	r1, [sp, #92]	; 0x5c
 810a27a:	7852      	ldrb	r2, [r2, #1]
 810a27c:	4618      	mov	r0, r3
 810a27e:	e7c9      	b.n	810a214 <_strtod_l+0x1e4>
 810a280:	4638      	mov	r0, r7
 810a282:	e7d2      	b.n	810a22a <_strtod_l+0x1fa>
 810a284:	2b08      	cmp	r3, #8
 810a286:	dc04      	bgt.n	810a292 <_strtod_l+0x262>
 810a288:	9e07      	ldr	r6, [sp, #28]
 810a28a:	434e      	muls	r6, r1
 810a28c:	9607      	str	r6, [sp, #28]
 810a28e:	3301      	adds	r3, #1
 810a290:	e7e2      	b.n	810a258 <_strtod_l+0x228>
 810a292:	f103 0c01 	add.w	ip, r3, #1
 810a296:	f1bc 0f10 	cmp.w	ip, #16
 810a29a:	bfd8      	it	le
 810a29c:	fb01 f909 	mulle.w	r9, r1, r9
 810a2a0:	e7f5      	b.n	810a28e <_strtod_l+0x25e>
 810a2a2:	2d10      	cmp	r5, #16
 810a2a4:	bfdc      	itt	le
 810a2a6:	230a      	movle	r3, #10
 810a2a8:	fb03 2909 	mlale	r9, r3, r9, r2
 810a2ac:	e7e1      	b.n	810a272 <_strtod_l+0x242>
 810a2ae:	2300      	movs	r3, #0
 810a2b0:	9305      	str	r3, [sp, #20]
 810a2b2:	2301      	movs	r3, #1
 810a2b4:	e77c      	b.n	810a1b0 <_strtod_l+0x180>
 810a2b6:	f04f 0c00 	mov.w	ip, #0
 810a2ba:	f108 0202 	add.w	r2, r8, #2
 810a2be:	9217      	str	r2, [sp, #92]	; 0x5c
 810a2c0:	f898 2002 	ldrb.w	r2, [r8, #2]
 810a2c4:	e785      	b.n	810a1d2 <_strtod_l+0x1a2>
 810a2c6:	f04f 0c01 	mov.w	ip, #1
 810a2ca:	e7f6      	b.n	810a2ba <_strtod_l+0x28a>
 810a2cc:	0810deec 	.word	0x0810deec
 810a2d0:	0810dc3c 	.word	0x0810dc3c
 810a2d4:	7ff00000 	.word	0x7ff00000
 810a2d8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810a2da:	1c51      	adds	r1, r2, #1
 810a2dc:	9117      	str	r1, [sp, #92]	; 0x5c
 810a2de:	7852      	ldrb	r2, [r2, #1]
 810a2e0:	2a30      	cmp	r2, #48	; 0x30
 810a2e2:	d0f9      	beq.n	810a2d8 <_strtod_l+0x2a8>
 810a2e4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 810a2e8:	2908      	cmp	r1, #8
 810a2ea:	f63f af79 	bhi.w	810a1e0 <_strtod_l+0x1b0>
 810a2ee:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 810a2f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810a2f4:	9206      	str	r2, [sp, #24]
 810a2f6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810a2f8:	1c51      	adds	r1, r2, #1
 810a2fa:	9117      	str	r1, [sp, #92]	; 0x5c
 810a2fc:	7852      	ldrb	r2, [r2, #1]
 810a2fe:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 810a302:	2e09      	cmp	r6, #9
 810a304:	d937      	bls.n	810a376 <_strtod_l+0x346>
 810a306:	9e06      	ldr	r6, [sp, #24]
 810a308:	1b89      	subs	r1, r1, r6
 810a30a:	2908      	cmp	r1, #8
 810a30c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 810a310:	dc02      	bgt.n	810a318 <_strtod_l+0x2e8>
 810a312:	4576      	cmp	r6, lr
 810a314:	bfa8      	it	ge
 810a316:	4676      	movge	r6, lr
 810a318:	f1bc 0f00 	cmp.w	ip, #0
 810a31c:	d000      	beq.n	810a320 <_strtod_l+0x2f0>
 810a31e:	4276      	negs	r6, r6
 810a320:	2d00      	cmp	r5, #0
 810a322:	d14d      	bne.n	810a3c0 <_strtod_l+0x390>
 810a324:	9904      	ldr	r1, [sp, #16]
 810a326:	4301      	orrs	r1, r0
 810a328:	f47f aec6 	bne.w	810a0b8 <_strtod_l+0x88>
 810a32c:	2b00      	cmp	r3, #0
 810a32e:	f47f aee1 	bne.w	810a0f4 <_strtod_l+0xc4>
 810a332:	2a69      	cmp	r2, #105	; 0x69
 810a334:	d027      	beq.n	810a386 <_strtod_l+0x356>
 810a336:	dc24      	bgt.n	810a382 <_strtod_l+0x352>
 810a338:	2a49      	cmp	r2, #73	; 0x49
 810a33a:	d024      	beq.n	810a386 <_strtod_l+0x356>
 810a33c:	2a4e      	cmp	r2, #78	; 0x4e
 810a33e:	f47f aed9 	bne.w	810a0f4 <_strtod_l+0xc4>
 810a342:	499f      	ldr	r1, [pc, #636]	; (810a5c0 <_strtod_l+0x590>)
 810a344:	a817      	add	r0, sp, #92	; 0x5c
 810a346:	f001 ff31 	bl	810c1ac <__match>
 810a34a:	2800      	cmp	r0, #0
 810a34c:	f43f aed2 	beq.w	810a0f4 <_strtod_l+0xc4>
 810a350:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810a352:	781b      	ldrb	r3, [r3, #0]
 810a354:	2b28      	cmp	r3, #40	; 0x28
 810a356:	d12d      	bne.n	810a3b4 <_strtod_l+0x384>
 810a358:	499a      	ldr	r1, [pc, #616]	; (810a5c4 <_strtod_l+0x594>)
 810a35a:	aa1a      	add	r2, sp, #104	; 0x68
 810a35c:	a817      	add	r0, sp, #92	; 0x5c
 810a35e:	f001 ff39 	bl	810c1d4 <__hexnan>
 810a362:	2805      	cmp	r0, #5
 810a364:	d126      	bne.n	810a3b4 <_strtod_l+0x384>
 810a366:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 810a368:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 810a36c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 810a370:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 810a374:	e6a0      	b.n	810a0b8 <_strtod_l+0x88>
 810a376:	210a      	movs	r1, #10
 810a378:	fb01 2e0e 	mla	lr, r1, lr, r2
 810a37c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 810a380:	e7b9      	b.n	810a2f6 <_strtod_l+0x2c6>
 810a382:	2a6e      	cmp	r2, #110	; 0x6e
 810a384:	e7db      	b.n	810a33e <_strtod_l+0x30e>
 810a386:	4990      	ldr	r1, [pc, #576]	; (810a5c8 <_strtod_l+0x598>)
 810a388:	a817      	add	r0, sp, #92	; 0x5c
 810a38a:	f001 ff0f 	bl	810c1ac <__match>
 810a38e:	2800      	cmp	r0, #0
 810a390:	f43f aeb0 	beq.w	810a0f4 <_strtod_l+0xc4>
 810a394:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810a396:	498d      	ldr	r1, [pc, #564]	; (810a5cc <_strtod_l+0x59c>)
 810a398:	3b01      	subs	r3, #1
 810a39a:	a817      	add	r0, sp, #92	; 0x5c
 810a39c:	9317      	str	r3, [sp, #92]	; 0x5c
 810a39e:	f001 ff05 	bl	810c1ac <__match>
 810a3a2:	b910      	cbnz	r0, 810a3aa <_strtod_l+0x37a>
 810a3a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810a3a6:	3301      	adds	r3, #1
 810a3a8:	9317      	str	r3, [sp, #92]	; 0x5c
 810a3aa:	f8df b230 	ldr.w	fp, [pc, #560]	; 810a5dc <_strtod_l+0x5ac>
 810a3ae:	f04f 0a00 	mov.w	sl, #0
 810a3b2:	e681      	b.n	810a0b8 <_strtod_l+0x88>
 810a3b4:	4886      	ldr	r0, [pc, #536]	; (810a5d0 <_strtod_l+0x5a0>)
 810a3b6:	f003 f847 	bl	810d448 <nan>
 810a3ba:	ec5b ab10 	vmov	sl, fp, d0
 810a3be:	e67b      	b.n	810a0b8 <_strtod_l+0x88>
 810a3c0:	9b05      	ldr	r3, [sp, #20]
 810a3c2:	9807      	ldr	r0, [sp, #28]
 810a3c4:	1af3      	subs	r3, r6, r3
 810a3c6:	2f00      	cmp	r7, #0
 810a3c8:	bf08      	it	eq
 810a3ca:	462f      	moveq	r7, r5
 810a3cc:	2d10      	cmp	r5, #16
 810a3ce:	9306      	str	r3, [sp, #24]
 810a3d0:	46a8      	mov	r8, r5
 810a3d2:	bfa8      	it	ge
 810a3d4:	f04f 0810 	movge.w	r8, #16
 810a3d8:	f7f6 f91c 	bl	8100614 <__aeabi_ui2d>
 810a3dc:	2d09      	cmp	r5, #9
 810a3de:	4682      	mov	sl, r0
 810a3e0:	468b      	mov	fp, r1
 810a3e2:	dd13      	ble.n	810a40c <_strtod_l+0x3dc>
 810a3e4:	4b7b      	ldr	r3, [pc, #492]	; (810a5d4 <_strtod_l+0x5a4>)
 810a3e6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 810a3ea:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 810a3ee:	f7f6 f98b 	bl	8100708 <__aeabi_dmul>
 810a3f2:	4682      	mov	sl, r0
 810a3f4:	4648      	mov	r0, r9
 810a3f6:	468b      	mov	fp, r1
 810a3f8:	f7f6 f90c 	bl	8100614 <__aeabi_ui2d>
 810a3fc:	4602      	mov	r2, r0
 810a3fe:	460b      	mov	r3, r1
 810a400:	4650      	mov	r0, sl
 810a402:	4659      	mov	r1, fp
 810a404:	f7f5 ffca 	bl	810039c <__adddf3>
 810a408:	4682      	mov	sl, r0
 810a40a:	468b      	mov	fp, r1
 810a40c:	2d0f      	cmp	r5, #15
 810a40e:	dc38      	bgt.n	810a482 <_strtod_l+0x452>
 810a410:	9b06      	ldr	r3, [sp, #24]
 810a412:	2b00      	cmp	r3, #0
 810a414:	f43f ae50 	beq.w	810a0b8 <_strtod_l+0x88>
 810a418:	dd24      	ble.n	810a464 <_strtod_l+0x434>
 810a41a:	2b16      	cmp	r3, #22
 810a41c:	dc0b      	bgt.n	810a436 <_strtod_l+0x406>
 810a41e:	496d      	ldr	r1, [pc, #436]	; (810a5d4 <_strtod_l+0x5a4>)
 810a420:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810a424:	e9d1 0100 	ldrd	r0, r1, [r1]
 810a428:	4652      	mov	r2, sl
 810a42a:	465b      	mov	r3, fp
 810a42c:	f7f6 f96c 	bl	8100708 <__aeabi_dmul>
 810a430:	4682      	mov	sl, r0
 810a432:	468b      	mov	fp, r1
 810a434:	e640      	b.n	810a0b8 <_strtod_l+0x88>
 810a436:	9a06      	ldr	r2, [sp, #24]
 810a438:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 810a43c:	4293      	cmp	r3, r2
 810a43e:	db20      	blt.n	810a482 <_strtod_l+0x452>
 810a440:	4c64      	ldr	r4, [pc, #400]	; (810a5d4 <_strtod_l+0x5a4>)
 810a442:	f1c5 050f 	rsb	r5, r5, #15
 810a446:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 810a44a:	4652      	mov	r2, sl
 810a44c:	465b      	mov	r3, fp
 810a44e:	e9d1 0100 	ldrd	r0, r1, [r1]
 810a452:	f7f6 f959 	bl	8100708 <__aeabi_dmul>
 810a456:	9b06      	ldr	r3, [sp, #24]
 810a458:	1b5d      	subs	r5, r3, r5
 810a45a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 810a45e:	e9d4 2300 	ldrd	r2, r3, [r4]
 810a462:	e7e3      	b.n	810a42c <_strtod_l+0x3fc>
 810a464:	9b06      	ldr	r3, [sp, #24]
 810a466:	3316      	adds	r3, #22
 810a468:	db0b      	blt.n	810a482 <_strtod_l+0x452>
 810a46a:	9b05      	ldr	r3, [sp, #20]
 810a46c:	1b9e      	subs	r6, r3, r6
 810a46e:	4b59      	ldr	r3, [pc, #356]	; (810a5d4 <_strtod_l+0x5a4>)
 810a470:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 810a474:	e9d6 2300 	ldrd	r2, r3, [r6]
 810a478:	4650      	mov	r0, sl
 810a47a:	4659      	mov	r1, fp
 810a47c:	f7f6 fa6e 	bl	810095c <__aeabi_ddiv>
 810a480:	e7d6      	b.n	810a430 <_strtod_l+0x400>
 810a482:	9b06      	ldr	r3, [sp, #24]
 810a484:	eba5 0808 	sub.w	r8, r5, r8
 810a488:	4498      	add	r8, r3
 810a48a:	f1b8 0f00 	cmp.w	r8, #0
 810a48e:	dd74      	ble.n	810a57a <_strtod_l+0x54a>
 810a490:	f018 030f 	ands.w	r3, r8, #15
 810a494:	d00a      	beq.n	810a4ac <_strtod_l+0x47c>
 810a496:	494f      	ldr	r1, [pc, #316]	; (810a5d4 <_strtod_l+0x5a4>)
 810a498:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810a49c:	4652      	mov	r2, sl
 810a49e:	465b      	mov	r3, fp
 810a4a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 810a4a4:	f7f6 f930 	bl	8100708 <__aeabi_dmul>
 810a4a8:	4682      	mov	sl, r0
 810a4aa:	468b      	mov	fp, r1
 810a4ac:	f038 080f 	bics.w	r8, r8, #15
 810a4b0:	d04f      	beq.n	810a552 <_strtod_l+0x522>
 810a4b2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 810a4b6:	dd22      	ble.n	810a4fe <_strtod_l+0x4ce>
 810a4b8:	2500      	movs	r5, #0
 810a4ba:	462e      	mov	r6, r5
 810a4bc:	9507      	str	r5, [sp, #28]
 810a4be:	9505      	str	r5, [sp, #20]
 810a4c0:	2322      	movs	r3, #34	; 0x22
 810a4c2:	f8df b118 	ldr.w	fp, [pc, #280]	; 810a5dc <_strtod_l+0x5ac>
 810a4c6:	6023      	str	r3, [r4, #0]
 810a4c8:	f04f 0a00 	mov.w	sl, #0
 810a4cc:	9b07      	ldr	r3, [sp, #28]
 810a4ce:	2b00      	cmp	r3, #0
 810a4d0:	f43f adf2 	beq.w	810a0b8 <_strtod_l+0x88>
 810a4d4:	9918      	ldr	r1, [sp, #96]	; 0x60
 810a4d6:	4620      	mov	r0, r4
 810a4d8:	f001 ff88 	bl	810c3ec <_Bfree>
 810a4dc:	9905      	ldr	r1, [sp, #20]
 810a4de:	4620      	mov	r0, r4
 810a4e0:	f001 ff84 	bl	810c3ec <_Bfree>
 810a4e4:	4631      	mov	r1, r6
 810a4e6:	4620      	mov	r0, r4
 810a4e8:	f001 ff80 	bl	810c3ec <_Bfree>
 810a4ec:	9907      	ldr	r1, [sp, #28]
 810a4ee:	4620      	mov	r0, r4
 810a4f0:	f001 ff7c 	bl	810c3ec <_Bfree>
 810a4f4:	4629      	mov	r1, r5
 810a4f6:	4620      	mov	r0, r4
 810a4f8:	f001 ff78 	bl	810c3ec <_Bfree>
 810a4fc:	e5dc      	b.n	810a0b8 <_strtod_l+0x88>
 810a4fe:	4b36      	ldr	r3, [pc, #216]	; (810a5d8 <_strtod_l+0x5a8>)
 810a500:	9304      	str	r3, [sp, #16]
 810a502:	2300      	movs	r3, #0
 810a504:	ea4f 1828 	mov.w	r8, r8, asr #4
 810a508:	4650      	mov	r0, sl
 810a50a:	4659      	mov	r1, fp
 810a50c:	4699      	mov	r9, r3
 810a50e:	f1b8 0f01 	cmp.w	r8, #1
 810a512:	dc21      	bgt.n	810a558 <_strtod_l+0x528>
 810a514:	b10b      	cbz	r3, 810a51a <_strtod_l+0x4ea>
 810a516:	4682      	mov	sl, r0
 810a518:	468b      	mov	fp, r1
 810a51a:	4b2f      	ldr	r3, [pc, #188]	; (810a5d8 <_strtod_l+0x5a8>)
 810a51c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 810a520:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 810a524:	4652      	mov	r2, sl
 810a526:	465b      	mov	r3, fp
 810a528:	e9d9 0100 	ldrd	r0, r1, [r9]
 810a52c:	f7f6 f8ec 	bl	8100708 <__aeabi_dmul>
 810a530:	4b2a      	ldr	r3, [pc, #168]	; (810a5dc <_strtod_l+0x5ac>)
 810a532:	460a      	mov	r2, r1
 810a534:	400b      	ands	r3, r1
 810a536:	492a      	ldr	r1, [pc, #168]	; (810a5e0 <_strtod_l+0x5b0>)
 810a538:	428b      	cmp	r3, r1
 810a53a:	4682      	mov	sl, r0
 810a53c:	d8bc      	bhi.n	810a4b8 <_strtod_l+0x488>
 810a53e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 810a542:	428b      	cmp	r3, r1
 810a544:	bf86      	itte	hi
 810a546:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 810a5e4 <_strtod_l+0x5b4>
 810a54a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 810a54e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 810a552:	2300      	movs	r3, #0
 810a554:	9304      	str	r3, [sp, #16]
 810a556:	e084      	b.n	810a662 <_strtod_l+0x632>
 810a558:	f018 0f01 	tst.w	r8, #1
 810a55c:	d005      	beq.n	810a56a <_strtod_l+0x53a>
 810a55e:	9b04      	ldr	r3, [sp, #16]
 810a560:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a564:	f7f6 f8d0 	bl	8100708 <__aeabi_dmul>
 810a568:	2301      	movs	r3, #1
 810a56a:	9a04      	ldr	r2, [sp, #16]
 810a56c:	3208      	adds	r2, #8
 810a56e:	f109 0901 	add.w	r9, r9, #1
 810a572:	ea4f 0868 	mov.w	r8, r8, asr #1
 810a576:	9204      	str	r2, [sp, #16]
 810a578:	e7c9      	b.n	810a50e <_strtod_l+0x4de>
 810a57a:	d0ea      	beq.n	810a552 <_strtod_l+0x522>
 810a57c:	f1c8 0800 	rsb	r8, r8, #0
 810a580:	f018 020f 	ands.w	r2, r8, #15
 810a584:	d00a      	beq.n	810a59c <_strtod_l+0x56c>
 810a586:	4b13      	ldr	r3, [pc, #76]	; (810a5d4 <_strtod_l+0x5a4>)
 810a588:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810a58c:	4650      	mov	r0, sl
 810a58e:	4659      	mov	r1, fp
 810a590:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a594:	f7f6 f9e2 	bl	810095c <__aeabi_ddiv>
 810a598:	4682      	mov	sl, r0
 810a59a:	468b      	mov	fp, r1
 810a59c:	ea5f 1828 	movs.w	r8, r8, asr #4
 810a5a0:	d0d7      	beq.n	810a552 <_strtod_l+0x522>
 810a5a2:	f1b8 0f1f 	cmp.w	r8, #31
 810a5a6:	dd1f      	ble.n	810a5e8 <_strtod_l+0x5b8>
 810a5a8:	2500      	movs	r5, #0
 810a5aa:	462e      	mov	r6, r5
 810a5ac:	9507      	str	r5, [sp, #28]
 810a5ae:	9505      	str	r5, [sp, #20]
 810a5b0:	2322      	movs	r3, #34	; 0x22
 810a5b2:	f04f 0a00 	mov.w	sl, #0
 810a5b6:	f04f 0b00 	mov.w	fp, #0
 810a5ba:	6023      	str	r3, [r4, #0]
 810a5bc:	e786      	b.n	810a4cc <_strtod_l+0x49c>
 810a5be:	bf00      	nop
 810a5c0:	0810dc0d 	.word	0x0810dc0d
 810a5c4:	0810dc50 	.word	0x0810dc50
 810a5c8:	0810dc05 	.word	0x0810dc05
 810a5cc:	0810dd94 	.word	0x0810dd94
 810a5d0:	0810e0a8 	.word	0x0810e0a8
 810a5d4:	0810df88 	.word	0x0810df88
 810a5d8:	0810df60 	.word	0x0810df60
 810a5dc:	7ff00000 	.word	0x7ff00000
 810a5e0:	7ca00000 	.word	0x7ca00000
 810a5e4:	7fefffff 	.word	0x7fefffff
 810a5e8:	f018 0310 	ands.w	r3, r8, #16
 810a5ec:	bf18      	it	ne
 810a5ee:	236a      	movne	r3, #106	; 0x6a
 810a5f0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 810a9a0 <_strtod_l+0x970>
 810a5f4:	9304      	str	r3, [sp, #16]
 810a5f6:	4650      	mov	r0, sl
 810a5f8:	4659      	mov	r1, fp
 810a5fa:	2300      	movs	r3, #0
 810a5fc:	f018 0f01 	tst.w	r8, #1
 810a600:	d004      	beq.n	810a60c <_strtod_l+0x5dc>
 810a602:	e9d9 2300 	ldrd	r2, r3, [r9]
 810a606:	f7f6 f87f 	bl	8100708 <__aeabi_dmul>
 810a60a:	2301      	movs	r3, #1
 810a60c:	ea5f 0868 	movs.w	r8, r8, asr #1
 810a610:	f109 0908 	add.w	r9, r9, #8
 810a614:	d1f2      	bne.n	810a5fc <_strtod_l+0x5cc>
 810a616:	b10b      	cbz	r3, 810a61c <_strtod_l+0x5ec>
 810a618:	4682      	mov	sl, r0
 810a61a:	468b      	mov	fp, r1
 810a61c:	9b04      	ldr	r3, [sp, #16]
 810a61e:	b1c3      	cbz	r3, 810a652 <_strtod_l+0x622>
 810a620:	f3cb 520a 	ubfx	r2, fp, #20, #11
 810a624:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 810a628:	2b00      	cmp	r3, #0
 810a62a:	4659      	mov	r1, fp
 810a62c:	dd11      	ble.n	810a652 <_strtod_l+0x622>
 810a62e:	2b1f      	cmp	r3, #31
 810a630:	f340 8124 	ble.w	810a87c <_strtod_l+0x84c>
 810a634:	2b34      	cmp	r3, #52	; 0x34
 810a636:	bfde      	ittt	le
 810a638:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 810a63c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 810a640:	fa03 f202 	lslle.w	r2, r3, r2
 810a644:	f04f 0a00 	mov.w	sl, #0
 810a648:	bfcc      	ite	gt
 810a64a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 810a64e:	ea02 0b01 	andle.w	fp, r2, r1
 810a652:	2200      	movs	r2, #0
 810a654:	2300      	movs	r3, #0
 810a656:	4650      	mov	r0, sl
 810a658:	4659      	mov	r1, fp
 810a65a:	f7f6 fabd 	bl	8100bd8 <__aeabi_dcmpeq>
 810a65e:	2800      	cmp	r0, #0
 810a660:	d1a2      	bne.n	810a5a8 <_strtod_l+0x578>
 810a662:	9b07      	ldr	r3, [sp, #28]
 810a664:	9300      	str	r3, [sp, #0]
 810a666:	9908      	ldr	r1, [sp, #32]
 810a668:	462b      	mov	r3, r5
 810a66a:	463a      	mov	r2, r7
 810a66c:	4620      	mov	r0, r4
 810a66e:	f001 ff25 	bl	810c4bc <__s2b>
 810a672:	9007      	str	r0, [sp, #28]
 810a674:	2800      	cmp	r0, #0
 810a676:	f43f af1f 	beq.w	810a4b8 <_strtod_l+0x488>
 810a67a:	9b05      	ldr	r3, [sp, #20]
 810a67c:	1b9e      	subs	r6, r3, r6
 810a67e:	9b06      	ldr	r3, [sp, #24]
 810a680:	2b00      	cmp	r3, #0
 810a682:	bfb4      	ite	lt
 810a684:	4633      	movlt	r3, r6
 810a686:	2300      	movge	r3, #0
 810a688:	930c      	str	r3, [sp, #48]	; 0x30
 810a68a:	9b06      	ldr	r3, [sp, #24]
 810a68c:	2500      	movs	r5, #0
 810a68e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 810a692:	9312      	str	r3, [sp, #72]	; 0x48
 810a694:	462e      	mov	r6, r5
 810a696:	9b07      	ldr	r3, [sp, #28]
 810a698:	4620      	mov	r0, r4
 810a69a:	6859      	ldr	r1, [r3, #4]
 810a69c:	f001 fe66 	bl	810c36c <_Balloc>
 810a6a0:	9005      	str	r0, [sp, #20]
 810a6a2:	2800      	cmp	r0, #0
 810a6a4:	f43f af0c 	beq.w	810a4c0 <_strtod_l+0x490>
 810a6a8:	9b07      	ldr	r3, [sp, #28]
 810a6aa:	691a      	ldr	r2, [r3, #16]
 810a6ac:	3202      	adds	r2, #2
 810a6ae:	f103 010c 	add.w	r1, r3, #12
 810a6b2:	0092      	lsls	r2, r2, #2
 810a6b4:	300c      	adds	r0, #12
 810a6b6:	f001 fe4b 	bl	810c350 <memcpy>
 810a6ba:	ec4b ab10 	vmov	d0, sl, fp
 810a6be:	aa1a      	add	r2, sp, #104	; 0x68
 810a6c0:	a919      	add	r1, sp, #100	; 0x64
 810a6c2:	4620      	mov	r0, r4
 810a6c4:	f002 fa40 	bl	810cb48 <__d2b>
 810a6c8:	ec4b ab18 	vmov	d8, sl, fp
 810a6cc:	9018      	str	r0, [sp, #96]	; 0x60
 810a6ce:	2800      	cmp	r0, #0
 810a6d0:	f43f aef6 	beq.w	810a4c0 <_strtod_l+0x490>
 810a6d4:	2101      	movs	r1, #1
 810a6d6:	4620      	mov	r0, r4
 810a6d8:	f001 ff8a 	bl	810c5f0 <__i2b>
 810a6dc:	4606      	mov	r6, r0
 810a6de:	2800      	cmp	r0, #0
 810a6e0:	f43f aeee 	beq.w	810a4c0 <_strtod_l+0x490>
 810a6e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 810a6e6:	9904      	ldr	r1, [sp, #16]
 810a6e8:	2b00      	cmp	r3, #0
 810a6ea:	bfab      	itete	ge
 810a6ec:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 810a6ee:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 810a6f0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 810a6f2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 810a6f6:	bfac      	ite	ge
 810a6f8:	eb03 0902 	addge.w	r9, r3, r2
 810a6fc:	1ad7      	sublt	r7, r2, r3
 810a6fe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 810a700:	eba3 0801 	sub.w	r8, r3, r1
 810a704:	4490      	add	r8, r2
 810a706:	4ba1      	ldr	r3, [pc, #644]	; (810a98c <_strtod_l+0x95c>)
 810a708:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 810a70c:	4598      	cmp	r8, r3
 810a70e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 810a712:	f280 80c7 	bge.w	810a8a4 <_strtod_l+0x874>
 810a716:	eba3 0308 	sub.w	r3, r3, r8
 810a71a:	2b1f      	cmp	r3, #31
 810a71c:	eba2 0203 	sub.w	r2, r2, r3
 810a720:	f04f 0101 	mov.w	r1, #1
 810a724:	f300 80b1 	bgt.w	810a88a <_strtod_l+0x85a>
 810a728:	fa01 f303 	lsl.w	r3, r1, r3
 810a72c:	930d      	str	r3, [sp, #52]	; 0x34
 810a72e:	2300      	movs	r3, #0
 810a730:	9308      	str	r3, [sp, #32]
 810a732:	eb09 0802 	add.w	r8, r9, r2
 810a736:	9b04      	ldr	r3, [sp, #16]
 810a738:	45c1      	cmp	r9, r8
 810a73a:	4417      	add	r7, r2
 810a73c:	441f      	add	r7, r3
 810a73e:	464b      	mov	r3, r9
 810a740:	bfa8      	it	ge
 810a742:	4643      	movge	r3, r8
 810a744:	42bb      	cmp	r3, r7
 810a746:	bfa8      	it	ge
 810a748:	463b      	movge	r3, r7
 810a74a:	2b00      	cmp	r3, #0
 810a74c:	bfc2      	ittt	gt
 810a74e:	eba8 0803 	subgt.w	r8, r8, r3
 810a752:	1aff      	subgt	r7, r7, r3
 810a754:	eba9 0903 	subgt.w	r9, r9, r3
 810a758:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810a75a:	2b00      	cmp	r3, #0
 810a75c:	dd17      	ble.n	810a78e <_strtod_l+0x75e>
 810a75e:	4631      	mov	r1, r6
 810a760:	461a      	mov	r2, r3
 810a762:	4620      	mov	r0, r4
 810a764:	f002 f804 	bl	810c770 <__pow5mult>
 810a768:	4606      	mov	r6, r0
 810a76a:	2800      	cmp	r0, #0
 810a76c:	f43f aea8 	beq.w	810a4c0 <_strtod_l+0x490>
 810a770:	4601      	mov	r1, r0
 810a772:	9a18      	ldr	r2, [sp, #96]	; 0x60
 810a774:	4620      	mov	r0, r4
 810a776:	f001 ff51 	bl	810c61c <__multiply>
 810a77a:	900b      	str	r0, [sp, #44]	; 0x2c
 810a77c:	2800      	cmp	r0, #0
 810a77e:	f43f ae9f 	beq.w	810a4c0 <_strtod_l+0x490>
 810a782:	9918      	ldr	r1, [sp, #96]	; 0x60
 810a784:	4620      	mov	r0, r4
 810a786:	f001 fe31 	bl	810c3ec <_Bfree>
 810a78a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810a78c:	9318      	str	r3, [sp, #96]	; 0x60
 810a78e:	f1b8 0f00 	cmp.w	r8, #0
 810a792:	f300 808c 	bgt.w	810a8ae <_strtod_l+0x87e>
 810a796:	9b06      	ldr	r3, [sp, #24]
 810a798:	2b00      	cmp	r3, #0
 810a79a:	dd08      	ble.n	810a7ae <_strtod_l+0x77e>
 810a79c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810a79e:	9905      	ldr	r1, [sp, #20]
 810a7a0:	4620      	mov	r0, r4
 810a7a2:	f001 ffe5 	bl	810c770 <__pow5mult>
 810a7a6:	9005      	str	r0, [sp, #20]
 810a7a8:	2800      	cmp	r0, #0
 810a7aa:	f43f ae89 	beq.w	810a4c0 <_strtod_l+0x490>
 810a7ae:	2f00      	cmp	r7, #0
 810a7b0:	dd08      	ble.n	810a7c4 <_strtod_l+0x794>
 810a7b2:	9905      	ldr	r1, [sp, #20]
 810a7b4:	463a      	mov	r2, r7
 810a7b6:	4620      	mov	r0, r4
 810a7b8:	f002 f834 	bl	810c824 <__lshift>
 810a7bc:	9005      	str	r0, [sp, #20]
 810a7be:	2800      	cmp	r0, #0
 810a7c0:	f43f ae7e 	beq.w	810a4c0 <_strtod_l+0x490>
 810a7c4:	f1b9 0f00 	cmp.w	r9, #0
 810a7c8:	dd08      	ble.n	810a7dc <_strtod_l+0x7ac>
 810a7ca:	4631      	mov	r1, r6
 810a7cc:	464a      	mov	r2, r9
 810a7ce:	4620      	mov	r0, r4
 810a7d0:	f002 f828 	bl	810c824 <__lshift>
 810a7d4:	4606      	mov	r6, r0
 810a7d6:	2800      	cmp	r0, #0
 810a7d8:	f43f ae72 	beq.w	810a4c0 <_strtod_l+0x490>
 810a7dc:	9a05      	ldr	r2, [sp, #20]
 810a7de:	9918      	ldr	r1, [sp, #96]	; 0x60
 810a7e0:	4620      	mov	r0, r4
 810a7e2:	f002 f8ab 	bl	810c93c <__mdiff>
 810a7e6:	4605      	mov	r5, r0
 810a7e8:	2800      	cmp	r0, #0
 810a7ea:	f43f ae69 	beq.w	810a4c0 <_strtod_l+0x490>
 810a7ee:	68c3      	ldr	r3, [r0, #12]
 810a7f0:	930b      	str	r3, [sp, #44]	; 0x2c
 810a7f2:	2300      	movs	r3, #0
 810a7f4:	60c3      	str	r3, [r0, #12]
 810a7f6:	4631      	mov	r1, r6
 810a7f8:	f002 f884 	bl	810c904 <__mcmp>
 810a7fc:	2800      	cmp	r0, #0
 810a7fe:	da60      	bge.n	810a8c2 <_strtod_l+0x892>
 810a800:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810a802:	ea53 030a 	orrs.w	r3, r3, sl
 810a806:	f040 8082 	bne.w	810a90e <_strtod_l+0x8de>
 810a80a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810a80e:	2b00      	cmp	r3, #0
 810a810:	d17d      	bne.n	810a90e <_strtod_l+0x8de>
 810a812:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810a816:	0d1b      	lsrs	r3, r3, #20
 810a818:	051b      	lsls	r3, r3, #20
 810a81a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 810a81e:	d976      	bls.n	810a90e <_strtod_l+0x8de>
 810a820:	696b      	ldr	r3, [r5, #20]
 810a822:	b913      	cbnz	r3, 810a82a <_strtod_l+0x7fa>
 810a824:	692b      	ldr	r3, [r5, #16]
 810a826:	2b01      	cmp	r3, #1
 810a828:	dd71      	ble.n	810a90e <_strtod_l+0x8de>
 810a82a:	4629      	mov	r1, r5
 810a82c:	2201      	movs	r2, #1
 810a82e:	4620      	mov	r0, r4
 810a830:	f001 fff8 	bl	810c824 <__lshift>
 810a834:	4631      	mov	r1, r6
 810a836:	4605      	mov	r5, r0
 810a838:	f002 f864 	bl	810c904 <__mcmp>
 810a83c:	2800      	cmp	r0, #0
 810a83e:	dd66      	ble.n	810a90e <_strtod_l+0x8de>
 810a840:	9904      	ldr	r1, [sp, #16]
 810a842:	4a53      	ldr	r2, [pc, #332]	; (810a990 <_strtod_l+0x960>)
 810a844:	465b      	mov	r3, fp
 810a846:	2900      	cmp	r1, #0
 810a848:	f000 8081 	beq.w	810a94e <_strtod_l+0x91e>
 810a84c:	ea02 010b 	and.w	r1, r2, fp
 810a850:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 810a854:	dc7b      	bgt.n	810a94e <_strtod_l+0x91e>
 810a856:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 810a85a:	f77f aea9 	ble.w	810a5b0 <_strtod_l+0x580>
 810a85e:	4b4d      	ldr	r3, [pc, #308]	; (810a994 <_strtod_l+0x964>)
 810a860:	4650      	mov	r0, sl
 810a862:	4659      	mov	r1, fp
 810a864:	2200      	movs	r2, #0
 810a866:	f7f5 ff4f 	bl	8100708 <__aeabi_dmul>
 810a86a:	460b      	mov	r3, r1
 810a86c:	4303      	orrs	r3, r0
 810a86e:	bf08      	it	eq
 810a870:	2322      	moveq	r3, #34	; 0x22
 810a872:	4682      	mov	sl, r0
 810a874:	468b      	mov	fp, r1
 810a876:	bf08      	it	eq
 810a878:	6023      	streq	r3, [r4, #0]
 810a87a:	e62b      	b.n	810a4d4 <_strtod_l+0x4a4>
 810a87c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810a880:	fa02 f303 	lsl.w	r3, r2, r3
 810a884:	ea03 0a0a 	and.w	sl, r3, sl
 810a888:	e6e3      	b.n	810a652 <_strtod_l+0x622>
 810a88a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 810a88e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 810a892:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 810a896:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 810a89a:	fa01 f308 	lsl.w	r3, r1, r8
 810a89e:	9308      	str	r3, [sp, #32]
 810a8a0:	910d      	str	r1, [sp, #52]	; 0x34
 810a8a2:	e746      	b.n	810a732 <_strtod_l+0x702>
 810a8a4:	2300      	movs	r3, #0
 810a8a6:	9308      	str	r3, [sp, #32]
 810a8a8:	2301      	movs	r3, #1
 810a8aa:	930d      	str	r3, [sp, #52]	; 0x34
 810a8ac:	e741      	b.n	810a732 <_strtod_l+0x702>
 810a8ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 810a8b0:	4642      	mov	r2, r8
 810a8b2:	4620      	mov	r0, r4
 810a8b4:	f001 ffb6 	bl	810c824 <__lshift>
 810a8b8:	9018      	str	r0, [sp, #96]	; 0x60
 810a8ba:	2800      	cmp	r0, #0
 810a8bc:	f47f af6b 	bne.w	810a796 <_strtod_l+0x766>
 810a8c0:	e5fe      	b.n	810a4c0 <_strtod_l+0x490>
 810a8c2:	465f      	mov	r7, fp
 810a8c4:	d16e      	bne.n	810a9a4 <_strtod_l+0x974>
 810a8c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810a8c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810a8cc:	b342      	cbz	r2, 810a920 <_strtod_l+0x8f0>
 810a8ce:	4a32      	ldr	r2, [pc, #200]	; (810a998 <_strtod_l+0x968>)
 810a8d0:	4293      	cmp	r3, r2
 810a8d2:	d128      	bne.n	810a926 <_strtod_l+0x8f6>
 810a8d4:	9b04      	ldr	r3, [sp, #16]
 810a8d6:	4651      	mov	r1, sl
 810a8d8:	b1eb      	cbz	r3, 810a916 <_strtod_l+0x8e6>
 810a8da:	4b2d      	ldr	r3, [pc, #180]	; (810a990 <_strtod_l+0x960>)
 810a8dc:	403b      	ands	r3, r7
 810a8de:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 810a8e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810a8e6:	d819      	bhi.n	810a91c <_strtod_l+0x8ec>
 810a8e8:	0d1b      	lsrs	r3, r3, #20
 810a8ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 810a8ee:	fa02 f303 	lsl.w	r3, r2, r3
 810a8f2:	4299      	cmp	r1, r3
 810a8f4:	d117      	bne.n	810a926 <_strtod_l+0x8f6>
 810a8f6:	4b29      	ldr	r3, [pc, #164]	; (810a99c <_strtod_l+0x96c>)
 810a8f8:	429f      	cmp	r7, r3
 810a8fa:	d102      	bne.n	810a902 <_strtod_l+0x8d2>
 810a8fc:	3101      	adds	r1, #1
 810a8fe:	f43f addf 	beq.w	810a4c0 <_strtod_l+0x490>
 810a902:	4b23      	ldr	r3, [pc, #140]	; (810a990 <_strtod_l+0x960>)
 810a904:	403b      	ands	r3, r7
 810a906:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 810a90a:	f04f 0a00 	mov.w	sl, #0
 810a90e:	9b04      	ldr	r3, [sp, #16]
 810a910:	2b00      	cmp	r3, #0
 810a912:	d1a4      	bne.n	810a85e <_strtod_l+0x82e>
 810a914:	e5de      	b.n	810a4d4 <_strtod_l+0x4a4>
 810a916:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810a91a:	e7ea      	b.n	810a8f2 <_strtod_l+0x8c2>
 810a91c:	4613      	mov	r3, r2
 810a91e:	e7e8      	b.n	810a8f2 <_strtod_l+0x8c2>
 810a920:	ea53 030a 	orrs.w	r3, r3, sl
 810a924:	d08c      	beq.n	810a840 <_strtod_l+0x810>
 810a926:	9b08      	ldr	r3, [sp, #32]
 810a928:	b1db      	cbz	r3, 810a962 <_strtod_l+0x932>
 810a92a:	423b      	tst	r3, r7
 810a92c:	d0ef      	beq.n	810a90e <_strtod_l+0x8de>
 810a92e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810a930:	9a04      	ldr	r2, [sp, #16]
 810a932:	4650      	mov	r0, sl
 810a934:	4659      	mov	r1, fp
 810a936:	b1c3      	cbz	r3, 810a96a <_strtod_l+0x93a>
 810a938:	f7ff fb5c 	bl	8109ff4 <sulp>
 810a93c:	4602      	mov	r2, r0
 810a93e:	460b      	mov	r3, r1
 810a940:	ec51 0b18 	vmov	r0, r1, d8
 810a944:	f7f5 fd2a 	bl	810039c <__adddf3>
 810a948:	4682      	mov	sl, r0
 810a94a:	468b      	mov	fp, r1
 810a94c:	e7df      	b.n	810a90e <_strtod_l+0x8de>
 810a94e:	4013      	ands	r3, r2
 810a950:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 810a954:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 810a958:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 810a95c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 810a960:	e7d5      	b.n	810a90e <_strtod_l+0x8de>
 810a962:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810a964:	ea13 0f0a 	tst.w	r3, sl
 810a968:	e7e0      	b.n	810a92c <_strtod_l+0x8fc>
 810a96a:	f7ff fb43 	bl	8109ff4 <sulp>
 810a96e:	4602      	mov	r2, r0
 810a970:	460b      	mov	r3, r1
 810a972:	ec51 0b18 	vmov	r0, r1, d8
 810a976:	f7f5 fd0f 	bl	8100398 <__aeabi_dsub>
 810a97a:	2200      	movs	r2, #0
 810a97c:	2300      	movs	r3, #0
 810a97e:	4682      	mov	sl, r0
 810a980:	468b      	mov	fp, r1
 810a982:	f7f6 f929 	bl	8100bd8 <__aeabi_dcmpeq>
 810a986:	2800      	cmp	r0, #0
 810a988:	d0c1      	beq.n	810a90e <_strtod_l+0x8de>
 810a98a:	e611      	b.n	810a5b0 <_strtod_l+0x580>
 810a98c:	fffffc02 	.word	0xfffffc02
 810a990:	7ff00000 	.word	0x7ff00000
 810a994:	39500000 	.word	0x39500000
 810a998:	000fffff 	.word	0x000fffff
 810a99c:	7fefffff 	.word	0x7fefffff
 810a9a0:	0810dc68 	.word	0x0810dc68
 810a9a4:	4631      	mov	r1, r6
 810a9a6:	4628      	mov	r0, r5
 810a9a8:	f002 f92a 	bl	810cc00 <__ratio>
 810a9ac:	ec59 8b10 	vmov	r8, r9, d0
 810a9b0:	ee10 0a10 	vmov	r0, s0
 810a9b4:	2200      	movs	r2, #0
 810a9b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 810a9ba:	4649      	mov	r1, r9
 810a9bc:	f7f6 f920 	bl	8100c00 <__aeabi_dcmple>
 810a9c0:	2800      	cmp	r0, #0
 810a9c2:	d07a      	beq.n	810aaba <_strtod_l+0xa8a>
 810a9c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810a9c6:	2b00      	cmp	r3, #0
 810a9c8:	d04a      	beq.n	810aa60 <_strtod_l+0xa30>
 810a9ca:	4b95      	ldr	r3, [pc, #596]	; (810ac20 <_strtod_l+0xbf0>)
 810a9cc:	2200      	movs	r2, #0
 810a9ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 810a9d2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 810ac20 <_strtod_l+0xbf0>
 810a9d6:	f04f 0800 	mov.w	r8, #0
 810a9da:	4b92      	ldr	r3, [pc, #584]	; (810ac24 <_strtod_l+0xbf4>)
 810a9dc:	403b      	ands	r3, r7
 810a9de:	930d      	str	r3, [sp, #52]	; 0x34
 810a9e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810a9e2:	4b91      	ldr	r3, [pc, #580]	; (810ac28 <_strtod_l+0xbf8>)
 810a9e4:	429a      	cmp	r2, r3
 810a9e6:	f040 80b0 	bne.w	810ab4a <_strtod_l+0xb1a>
 810a9ea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 810a9ee:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 810a9f2:	ec4b ab10 	vmov	d0, sl, fp
 810a9f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 810a9fa:	f002 f829 	bl	810ca50 <__ulp>
 810a9fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 810aa02:	ec53 2b10 	vmov	r2, r3, d0
 810aa06:	f7f5 fe7f 	bl	8100708 <__aeabi_dmul>
 810aa0a:	4652      	mov	r2, sl
 810aa0c:	465b      	mov	r3, fp
 810aa0e:	f7f5 fcc5 	bl	810039c <__adddf3>
 810aa12:	460b      	mov	r3, r1
 810aa14:	4983      	ldr	r1, [pc, #524]	; (810ac24 <_strtod_l+0xbf4>)
 810aa16:	4a85      	ldr	r2, [pc, #532]	; (810ac2c <_strtod_l+0xbfc>)
 810aa18:	4019      	ands	r1, r3
 810aa1a:	4291      	cmp	r1, r2
 810aa1c:	4682      	mov	sl, r0
 810aa1e:	d960      	bls.n	810aae2 <_strtod_l+0xab2>
 810aa20:	ee18 3a90 	vmov	r3, s17
 810aa24:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 810aa28:	4293      	cmp	r3, r2
 810aa2a:	d104      	bne.n	810aa36 <_strtod_l+0xa06>
 810aa2c:	ee18 3a10 	vmov	r3, s16
 810aa30:	3301      	adds	r3, #1
 810aa32:	f43f ad45 	beq.w	810a4c0 <_strtod_l+0x490>
 810aa36:	f8df b200 	ldr.w	fp, [pc, #512]	; 810ac38 <_strtod_l+0xc08>
 810aa3a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 810aa3e:	9918      	ldr	r1, [sp, #96]	; 0x60
 810aa40:	4620      	mov	r0, r4
 810aa42:	f001 fcd3 	bl	810c3ec <_Bfree>
 810aa46:	9905      	ldr	r1, [sp, #20]
 810aa48:	4620      	mov	r0, r4
 810aa4a:	f001 fccf 	bl	810c3ec <_Bfree>
 810aa4e:	4631      	mov	r1, r6
 810aa50:	4620      	mov	r0, r4
 810aa52:	f001 fccb 	bl	810c3ec <_Bfree>
 810aa56:	4629      	mov	r1, r5
 810aa58:	4620      	mov	r0, r4
 810aa5a:	f001 fcc7 	bl	810c3ec <_Bfree>
 810aa5e:	e61a      	b.n	810a696 <_strtod_l+0x666>
 810aa60:	f1ba 0f00 	cmp.w	sl, #0
 810aa64:	d11b      	bne.n	810aa9e <_strtod_l+0xa6e>
 810aa66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810aa6a:	b9f3      	cbnz	r3, 810aaaa <_strtod_l+0xa7a>
 810aa6c:	4b6c      	ldr	r3, [pc, #432]	; (810ac20 <_strtod_l+0xbf0>)
 810aa6e:	2200      	movs	r2, #0
 810aa70:	4640      	mov	r0, r8
 810aa72:	4649      	mov	r1, r9
 810aa74:	f7f6 f8ba 	bl	8100bec <__aeabi_dcmplt>
 810aa78:	b9d0      	cbnz	r0, 810aab0 <_strtod_l+0xa80>
 810aa7a:	4640      	mov	r0, r8
 810aa7c:	4649      	mov	r1, r9
 810aa7e:	4b6c      	ldr	r3, [pc, #432]	; (810ac30 <_strtod_l+0xc00>)
 810aa80:	2200      	movs	r2, #0
 810aa82:	f7f5 fe41 	bl	8100708 <__aeabi_dmul>
 810aa86:	4680      	mov	r8, r0
 810aa88:	4689      	mov	r9, r1
 810aa8a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 810aa8e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 810aa92:	9315      	str	r3, [sp, #84]	; 0x54
 810aa94:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 810aa98:	e9cd 2308 	strd	r2, r3, [sp, #32]
 810aa9c:	e79d      	b.n	810a9da <_strtod_l+0x9aa>
 810aa9e:	f1ba 0f01 	cmp.w	sl, #1
 810aaa2:	d102      	bne.n	810aaaa <_strtod_l+0xa7a>
 810aaa4:	2f00      	cmp	r7, #0
 810aaa6:	f43f ad83 	beq.w	810a5b0 <_strtod_l+0x580>
 810aaaa:	4b62      	ldr	r3, [pc, #392]	; (810ac34 <_strtod_l+0xc04>)
 810aaac:	2200      	movs	r2, #0
 810aaae:	e78e      	b.n	810a9ce <_strtod_l+0x99e>
 810aab0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 810ac30 <_strtod_l+0xc00>
 810aab4:	f04f 0800 	mov.w	r8, #0
 810aab8:	e7e7      	b.n	810aa8a <_strtod_l+0xa5a>
 810aaba:	4b5d      	ldr	r3, [pc, #372]	; (810ac30 <_strtod_l+0xc00>)
 810aabc:	4640      	mov	r0, r8
 810aabe:	4649      	mov	r1, r9
 810aac0:	2200      	movs	r2, #0
 810aac2:	f7f5 fe21 	bl	8100708 <__aeabi_dmul>
 810aac6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810aac8:	4680      	mov	r8, r0
 810aaca:	4689      	mov	r9, r1
 810aacc:	b933      	cbnz	r3, 810aadc <_strtod_l+0xaac>
 810aace:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810aad2:	900e      	str	r0, [sp, #56]	; 0x38
 810aad4:	930f      	str	r3, [sp, #60]	; 0x3c
 810aad6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 810aada:	e7dd      	b.n	810aa98 <_strtod_l+0xa68>
 810aadc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 810aae0:	e7f9      	b.n	810aad6 <_strtod_l+0xaa6>
 810aae2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 810aae6:	9b04      	ldr	r3, [sp, #16]
 810aae8:	2b00      	cmp	r3, #0
 810aaea:	d1a8      	bne.n	810aa3e <_strtod_l+0xa0e>
 810aaec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810aaf0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810aaf2:	0d1b      	lsrs	r3, r3, #20
 810aaf4:	051b      	lsls	r3, r3, #20
 810aaf6:	429a      	cmp	r2, r3
 810aaf8:	d1a1      	bne.n	810aa3e <_strtod_l+0xa0e>
 810aafa:	4640      	mov	r0, r8
 810aafc:	4649      	mov	r1, r9
 810aafe:	f7f6 f963 	bl	8100dc8 <__aeabi_d2lz>
 810ab02:	f7f5 fdd3 	bl	81006ac <__aeabi_l2d>
 810ab06:	4602      	mov	r2, r0
 810ab08:	460b      	mov	r3, r1
 810ab0a:	4640      	mov	r0, r8
 810ab0c:	4649      	mov	r1, r9
 810ab0e:	f7f5 fc43 	bl	8100398 <__aeabi_dsub>
 810ab12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810ab14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810ab18:	ea43 030a 	orr.w	r3, r3, sl
 810ab1c:	4313      	orrs	r3, r2
 810ab1e:	4680      	mov	r8, r0
 810ab20:	4689      	mov	r9, r1
 810ab22:	d055      	beq.n	810abd0 <_strtod_l+0xba0>
 810ab24:	a336      	add	r3, pc, #216	; (adr r3, 810ac00 <_strtod_l+0xbd0>)
 810ab26:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ab2a:	f7f6 f85f 	bl	8100bec <__aeabi_dcmplt>
 810ab2e:	2800      	cmp	r0, #0
 810ab30:	f47f acd0 	bne.w	810a4d4 <_strtod_l+0x4a4>
 810ab34:	a334      	add	r3, pc, #208	; (adr r3, 810ac08 <_strtod_l+0xbd8>)
 810ab36:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ab3a:	4640      	mov	r0, r8
 810ab3c:	4649      	mov	r1, r9
 810ab3e:	f7f6 f873 	bl	8100c28 <__aeabi_dcmpgt>
 810ab42:	2800      	cmp	r0, #0
 810ab44:	f43f af7b 	beq.w	810aa3e <_strtod_l+0xa0e>
 810ab48:	e4c4      	b.n	810a4d4 <_strtod_l+0x4a4>
 810ab4a:	9b04      	ldr	r3, [sp, #16]
 810ab4c:	b333      	cbz	r3, 810ab9c <_strtod_l+0xb6c>
 810ab4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810ab50:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 810ab54:	d822      	bhi.n	810ab9c <_strtod_l+0xb6c>
 810ab56:	a32e      	add	r3, pc, #184	; (adr r3, 810ac10 <_strtod_l+0xbe0>)
 810ab58:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ab5c:	4640      	mov	r0, r8
 810ab5e:	4649      	mov	r1, r9
 810ab60:	f7f6 f84e 	bl	8100c00 <__aeabi_dcmple>
 810ab64:	b1a0      	cbz	r0, 810ab90 <_strtod_l+0xb60>
 810ab66:	4649      	mov	r1, r9
 810ab68:	4640      	mov	r0, r8
 810ab6a:	f7f6 f8a5 	bl	8100cb8 <__aeabi_d2uiz>
 810ab6e:	2801      	cmp	r0, #1
 810ab70:	bf38      	it	cc
 810ab72:	2001      	movcc	r0, #1
 810ab74:	f7f5 fd4e 	bl	8100614 <__aeabi_ui2d>
 810ab78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810ab7a:	4680      	mov	r8, r0
 810ab7c:	4689      	mov	r9, r1
 810ab7e:	bb23      	cbnz	r3, 810abca <_strtod_l+0xb9a>
 810ab80:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810ab84:	9010      	str	r0, [sp, #64]	; 0x40
 810ab86:	9311      	str	r3, [sp, #68]	; 0x44
 810ab88:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 810ab8c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 810ab90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810ab92:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810ab94:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 810ab98:	1a9b      	subs	r3, r3, r2
 810ab9a:	9309      	str	r3, [sp, #36]	; 0x24
 810ab9c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 810aba0:	eeb0 0a48 	vmov.f32	s0, s16
 810aba4:	eef0 0a68 	vmov.f32	s1, s17
 810aba8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 810abac:	f001 ff50 	bl	810ca50 <__ulp>
 810abb0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 810abb4:	ec53 2b10 	vmov	r2, r3, d0
 810abb8:	f7f5 fda6 	bl	8100708 <__aeabi_dmul>
 810abbc:	ec53 2b18 	vmov	r2, r3, d8
 810abc0:	f7f5 fbec 	bl	810039c <__adddf3>
 810abc4:	4682      	mov	sl, r0
 810abc6:	468b      	mov	fp, r1
 810abc8:	e78d      	b.n	810aae6 <_strtod_l+0xab6>
 810abca:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 810abce:	e7db      	b.n	810ab88 <_strtod_l+0xb58>
 810abd0:	a311      	add	r3, pc, #68	; (adr r3, 810ac18 <_strtod_l+0xbe8>)
 810abd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810abd6:	f7f6 f809 	bl	8100bec <__aeabi_dcmplt>
 810abda:	e7b2      	b.n	810ab42 <_strtod_l+0xb12>
 810abdc:	2300      	movs	r3, #0
 810abde:	930a      	str	r3, [sp, #40]	; 0x28
 810abe0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 810abe2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810abe4:	6013      	str	r3, [r2, #0]
 810abe6:	f7ff ba6b 	b.w	810a0c0 <_strtod_l+0x90>
 810abea:	2a65      	cmp	r2, #101	; 0x65
 810abec:	f43f ab5f 	beq.w	810a2ae <_strtod_l+0x27e>
 810abf0:	2a45      	cmp	r2, #69	; 0x45
 810abf2:	f43f ab5c 	beq.w	810a2ae <_strtod_l+0x27e>
 810abf6:	2301      	movs	r3, #1
 810abf8:	f7ff bb94 	b.w	810a324 <_strtod_l+0x2f4>
 810abfc:	f3af 8000 	nop.w
 810ac00:	94a03595 	.word	0x94a03595
 810ac04:	3fdfffff 	.word	0x3fdfffff
 810ac08:	35afe535 	.word	0x35afe535
 810ac0c:	3fe00000 	.word	0x3fe00000
 810ac10:	ffc00000 	.word	0xffc00000
 810ac14:	41dfffff 	.word	0x41dfffff
 810ac18:	94a03595 	.word	0x94a03595
 810ac1c:	3fcfffff 	.word	0x3fcfffff
 810ac20:	3ff00000 	.word	0x3ff00000
 810ac24:	7ff00000 	.word	0x7ff00000
 810ac28:	7fe00000 	.word	0x7fe00000
 810ac2c:	7c9fffff 	.word	0x7c9fffff
 810ac30:	3fe00000 	.word	0x3fe00000
 810ac34:	bff00000 	.word	0xbff00000
 810ac38:	7fefffff 	.word	0x7fefffff

0810ac3c <_strtod_r>:
 810ac3c:	4b01      	ldr	r3, [pc, #4]	; (810ac44 <_strtod_r+0x8>)
 810ac3e:	f7ff b9f7 	b.w	810a030 <_strtod_l>
 810ac42:	bf00      	nop
 810ac44:	10000094 	.word	0x10000094

0810ac48 <_strtol_l.constprop.0>:
 810ac48:	2b01      	cmp	r3, #1
 810ac4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810ac4e:	d001      	beq.n	810ac54 <_strtol_l.constprop.0+0xc>
 810ac50:	2b24      	cmp	r3, #36	; 0x24
 810ac52:	d906      	bls.n	810ac62 <_strtol_l.constprop.0+0x1a>
 810ac54:	f7fe fae4 	bl	8109220 <__errno>
 810ac58:	2316      	movs	r3, #22
 810ac5a:	6003      	str	r3, [r0, #0]
 810ac5c:	2000      	movs	r0, #0
 810ac5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810ac62:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 810ad48 <_strtol_l.constprop.0+0x100>
 810ac66:	460d      	mov	r5, r1
 810ac68:	462e      	mov	r6, r5
 810ac6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 810ac6e:	f814 700c 	ldrb.w	r7, [r4, ip]
 810ac72:	f017 0708 	ands.w	r7, r7, #8
 810ac76:	d1f7      	bne.n	810ac68 <_strtol_l.constprop.0+0x20>
 810ac78:	2c2d      	cmp	r4, #45	; 0x2d
 810ac7a:	d132      	bne.n	810ace2 <_strtol_l.constprop.0+0x9a>
 810ac7c:	782c      	ldrb	r4, [r5, #0]
 810ac7e:	2701      	movs	r7, #1
 810ac80:	1cb5      	adds	r5, r6, #2
 810ac82:	2b00      	cmp	r3, #0
 810ac84:	d05b      	beq.n	810ad3e <_strtol_l.constprop.0+0xf6>
 810ac86:	2b10      	cmp	r3, #16
 810ac88:	d109      	bne.n	810ac9e <_strtol_l.constprop.0+0x56>
 810ac8a:	2c30      	cmp	r4, #48	; 0x30
 810ac8c:	d107      	bne.n	810ac9e <_strtol_l.constprop.0+0x56>
 810ac8e:	782c      	ldrb	r4, [r5, #0]
 810ac90:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 810ac94:	2c58      	cmp	r4, #88	; 0x58
 810ac96:	d14d      	bne.n	810ad34 <_strtol_l.constprop.0+0xec>
 810ac98:	786c      	ldrb	r4, [r5, #1]
 810ac9a:	2310      	movs	r3, #16
 810ac9c:	3502      	adds	r5, #2
 810ac9e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 810aca2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 810aca6:	f04f 0c00 	mov.w	ip, #0
 810acaa:	fbb8 f9f3 	udiv	r9, r8, r3
 810acae:	4666      	mov	r6, ip
 810acb0:	fb03 8a19 	mls	sl, r3, r9, r8
 810acb4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 810acb8:	f1be 0f09 	cmp.w	lr, #9
 810acbc:	d816      	bhi.n	810acec <_strtol_l.constprop.0+0xa4>
 810acbe:	4674      	mov	r4, lr
 810acc0:	42a3      	cmp	r3, r4
 810acc2:	dd24      	ble.n	810ad0e <_strtol_l.constprop.0+0xc6>
 810acc4:	f1bc 0f00 	cmp.w	ip, #0
 810acc8:	db1e      	blt.n	810ad08 <_strtol_l.constprop.0+0xc0>
 810acca:	45b1      	cmp	r9, r6
 810accc:	d31c      	bcc.n	810ad08 <_strtol_l.constprop.0+0xc0>
 810acce:	d101      	bne.n	810acd4 <_strtol_l.constprop.0+0x8c>
 810acd0:	45a2      	cmp	sl, r4
 810acd2:	db19      	blt.n	810ad08 <_strtol_l.constprop.0+0xc0>
 810acd4:	fb06 4603 	mla	r6, r6, r3, r4
 810acd8:	f04f 0c01 	mov.w	ip, #1
 810acdc:	f815 4b01 	ldrb.w	r4, [r5], #1
 810ace0:	e7e8      	b.n	810acb4 <_strtol_l.constprop.0+0x6c>
 810ace2:	2c2b      	cmp	r4, #43	; 0x2b
 810ace4:	bf04      	itt	eq
 810ace6:	782c      	ldrbeq	r4, [r5, #0]
 810ace8:	1cb5      	addeq	r5, r6, #2
 810acea:	e7ca      	b.n	810ac82 <_strtol_l.constprop.0+0x3a>
 810acec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 810acf0:	f1be 0f19 	cmp.w	lr, #25
 810acf4:	d801      	bhi.n	810acfa <_strtol_l.constprop.0+0xb2>
 810acf6:	3c37      	subs	r4, #55	; 0x37
 810acf8:	e7e2      	b.n	810acc0 <_strtol_l.constprop.0+0x78>
 810acfa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 810acfe:	f1be 0f19 	cmp.w	lr, #25
 810ad02:	d804      	bhi.n	810ad0e <_strtol_l.constprop.0+0xc6>
 810ad04:	3c57      	subs	r4, #87	; 0x57
 810ad06:	e7db      	b.n	810acc0 <_strtol_l.constprop.0+0x78>
 810ad08:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 810ad0c:	e7e6      	b.n	810acdc <_strtol_l.constprop.0+0x94>
 810ad0e:	f1bc 0f00 	cmp.w	ip, #0
 810ad12:	da05      	bge.n	810ad20 <_strtol_l.constprop.0+0xd8>
 810ad14:	2322      	movs	r3, #34	; 0x22
 810ad16:	6003      	str	r3, [r0, #0]
 810ad18:	4646      	mov	r6, r8
 810ad1a:	b942      	cbnz	r2, 810ad2e <_strtol_l.constprop.0+0xe6>
 810ad1c:	4630      	mov	r0, r6
 810ad1e:	e79e      	b.n	810ac5e <_strtol_l.constprop.0+0x16>
 810ad20:	b107      	cbz	r7, 810ad24 <_strtol_l.constprop.0+0xdc>
 810ad22:	4276      	negs	r6, r6
 810ad24:	2a00      	cmp	r2, #0
 810ad26:	d0f9      	beq.n	810ad1c <_strtol_l.constprop.0+0xd4>
 810ad28:	f1bc 0f00 	cmp.w	ip, #0
 810ad2c:	d000      	beq.n	810ad30 <_strtol_l.constprop.0+0xe8>
 810ad2e:	1e69      	subs	r1, r5, #1
 810ad30:	6011      	str	r1, [r2, #0]
 810ad32:	e7f3      	b.n	810ad1c <_strtol_l.constprop.0+0xd4>
 810ad34:	2430      	movs	r4, #48	; 0x30
 810ad36:	2b00      	cmp	r3, #0
 810ad38:	d1b1      	bne.n	810ac9e <_strtol_l.constprop.0+0x56>
 810ad3a:	2308      	movs	r3, #8
 810ad3c:	e7af      	b.n	810ac9e <_strtol_l.constprop.0+0x56>
 810ad3e:	2c30      	cmp	r4, #48	; 0x30
 810ad40:	d0a5      	beq.n	810ac8e <_strtol_l.constprop.0+0x46>
 810ad42:	230a      	movs	r3, #10
 810ad44:	e7ab      	b.n	810ac9e <_strtol_l.constprop.0+0x56>
 810ad46:	bf00      	nop
 810ad48:	0810dc91 	.word	0x0810dc91

0810ad4c <_strtol_r>:
 810ad4c:	f7ff bf7c 	b.w	810ac48 <_strtol_l.constprop.0>

0810ad50 <quorem>:
 810ad50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ad54:	6903      	ldr	r3, [r0, #16]
 810ad56:	690c      	ldr	r4, [r1, #16]
 810ad58:	42a3      	cmp	r3, r4
 810ad5a:	4607      	mov	r7, r0
 810ad5c:	f2c0 8081 	blt.w	810ae62 <quorem+0x112>
 810ad60:	3c01      	subs	r4, #1
 810ad62:	f101 0814 	add.w	r8, r1, #20
 810ad66:	f100 0514 	add.w	r5, r0, #20
 810ad6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810ad6e:	9301      	str	r3, [sp, #4]
 810ad70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 810ad74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810ad78:	3301      	adds	r3, #1
 810ad7a:	429a      	cmp	r2, r3
 810ad7c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 810ad80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 810ad84:	fbb2 f6f3 	udiv	r6, r2, r3
 810ad88:	d331      	bcc.n	810adee <quorem+0x9e>
 810ad8a:	f04f 0e00 	mov.w	lr, #0
 810ad8e:	4640      	mov	r0, r8
 810ad90:	46ac      	mov	ip, r5
 810ad92:	46f2      	mov	sl, lr
 810ad94:	f850 2b04 	ldr.w	r2, [r0], #4
 810ad98:	b293      	uxth	r3, r2
 810ad9a:	fb06 e303 	mla	r3, r6, r3, lr
 810ad9e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 810ada2:	b29b      	uxth	r3, r3
 810ada4:	ebaa 0303 	sub.w	r3, sl, r3
 810ada8:	f8dc a000 	ldr.w	sl, [ip]
 810adac:	0c12      	lsrs	r2, r2, #16
 810adae:	fa13 f38a 	uxtah	r3, r3, sl
 810adb2:	fb06 e202 	mla	r2, r6, r2, lr
 810adb6:	9300      	str	r3, [sp, #0]
 810adb8:	9b00      	ldr	r3, [sp, #0]
 810adba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 810adbe:	b292      	uxth	r2, r2
 810adc0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 810adc4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810adc8:	f8bd 3000 	ldrh.w	r3, [sp]
 810adcc:	4581      	cmp	r9, r0
 810adce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810add2:	f84c 3b04 	str.w	r3, [ip], #4
 810add6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 810adda:	d2db      	bcs.n	810ad94 <quorem+0x44>
 810addc:	f855 300b 	ldr.w	r3, [r5, fp]
 810ade0:	b92b      	cbnz	r3, 810adee <quorem+0x9e>
 810ade2:	9b01      	ldr	r3, [sp, #4]
 810ade4:	3b04      	subs	r3, #4
 810ade6:	429d      	cmp	r5, r3
 810ade8:	461a      	mov	r2, r3
 810adea:	d32e      	bcc.n	810ae4a <quorem+0xfa>
 810adec:	613c      	str	r4, [r7, #16]
 810adee:	4638      	mov	r0, r7
 810adf0:	f001 fd88 	bl	810c904 <__mcmp>
 810adf4:	2800      	cmp	r0, #0
 810adf6:	db24      	blt.n	810ae42 <quorem+0xf2>
 810adf8:	3601      	adds	r6, #1
 810adfa:	4628      	mov	r0, r5
 810adfc:	f04f 0c00 	mov.w	ip, #0
 810ae00:	f858 2b04 	ldr.w	r2, [r8], #4
 810ae04:	f8d0 e000 	ldr.w	lr, [r0]
 810ae08:	b293      	uxth	r3, r2
 810ae0a:	ebac 0303 	sub.w	r3, ip, r3
 810ae0e:	0c12      	lsrs	r2, r2, #16
 810ae10:	fa13 f38e 	uxtah	r3, r3, lr
 810ae14:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 810ae18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810ae1c:	b29b      	uxth	r3, r3
 810ae1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810ae22:	45c1      	cmp	r9, r8
 810ae24:	f840 3b04 	str.w	r3, [r0], #4
 810ae28:	ea4f 4c22 	mov.w	ip, r2, asr #16
 810ae2c:	d2e8      	bcs.n	810ae00 <quorem+0xb0>
 810ae2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810ae32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810ae36:	b922      	cbnz	r2, 810ae42 <quorem+0xf2>
 810ae38:	3b04      	subs	r3, #4
 810ae3a:	429d      	cmp	r5, r3
 810ae3c:	461a      	mov	r2, r3
 810ae3e:	d30a      	bcc.n	810ae56 <quorem+0x106>
 810ae40:	613c      	str	r4, [r7, #16]
 810ae42:	4630      	mov	r0, r6
 810ae44:	b003      	add	sp, #12
 810ae46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810ae4a:	6812      	ldr	r2, [r2, #0]
 810ae4c:	3b04      	subs	r3, #4
 810ae4e:	2a00      	cmp	r2, #0
 810ae50:	d1cc      	bne.n	810adec <quorem+0x9c>
 810ae52:	3c01      	subs	r4, #1
 810ae54:	e7c7      	b.n	810ade6 <quorem+0x96>
 810ae56:	6812      	ldr	r2, [r2, #0]
 810ae58:	3b04      	subs	r3, #4
 810ae5a:	2a00      	cmp	r2, #0
 810ae5c:	d1f0      	bne.n	810ae40 <quorem+0xf0>
 810ae5e:	3c01      	subs	r4, #1
 810ae60:	e7eb      	b.n	810ae3a <quorem+0xea>
 810ae62:	2000      	movs	r0, #0
 810ae64:	e7ee      	b.n	810ae44 <quorem+0xf4>
	...

0810ae68 <_dtoa_r>:
 810ae68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ae6c:	ed2d 8b04 	vpush	{d8-d9}
 810ae70:	ec57 6b10 	vmov	r6, r7, d0
 810ae74:	b093      	sub	sp, #76	; 0x4c
 810ae76:	6a45      	ldr	r5, [r0, #36]	; 0x24
 810ae78:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 810ae7c:	9106      	str	r1, [sp, #24]
 810ae7e:	ee10 aa10 	vmov	sl, s0
 810ae82:	4604      	mov	r4, r0
 810ae84:	9209      	str	r2, [sp, #36]	; 0x24
 810ae86:	930c      	str	r3, [sp, #48]	; 0x30
 810ae88:	46bb      	mov	fp, r7
 810ae8a:	b975      	cbnz	r5, 810aeaa <_dtoa_r+0x42>
 810ae8c:	2010      	movs	r0, #16
 810ae8e:	f001 fa45 	bl	810c31c <malloc>
 810ae92:	4602      	mov	r2, r0
 810ae94:	6260      	str	r0, [r4, #36]	; 0x24
 810ae96:	b920      	cbnz	r0, 810aea2 <_dtoa_r+0x3a>
 810ae98:	4ba7      	ldr	r3, [pc, #668]	; (810b138 <_dtoa_r+0x2d0>)
 810ae9a:	21ea      	movs	r1, #234	; 0xea
 810ae9c:	48a7      	ldr	r0, [pc, #668]	; (810b13c <_dtoa_r+0x2d4>)
 810ae9e:	f002 fc23 	bl	810d6e8 <__assert_func>
 810aea2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 810aea6:	6005      	str	r5, [r0, #0]
 810aea8:	60c5      	str	r5, [r0, #12]
 810aeaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810aeac:	6819      	ldr	r1, [r3, #0]
 810aeae:	b151      	cbz	r1, 810aec6 <_dtoa_r+0x5e>
 810aeb0:	685a      	ldr	r2, [r3, #4]
 810aeb2:	604a      	str	r2, [r1, #4]
 810aeb4:	2301      	movs	r3, #1
 810aeb6:	4093      	lsls	r3, r2
 810aeb8:	608b      	str	r3, [r1, #8]
 810aeba:	4620      	mov	r0, r4
 810aebc:	f001 fa96 	bl	810c3ec <_Bfree>
 810aec0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810aec2:	2200      	movs	r2, #0
 810aec4:	601a      	str	r2, [r3, #0]
 810aec6:	1e3b      	subs	r3, r7, #0
 810aec8:	bfaa      	itet	ge
 810aeca:	2300      	movge	r3, #0
 810aecc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 810aed0:	f8c8 3000 	strge.w	r3, [r8]
 810aed4:	4b9a      	ldr	r3, [pc, #616]	; (810b140 <_dtoa_r+0x2d8>)
 810aed6:	bfbc      	itt	lt
 810aed8:	2201      	movlt	r2, #1
 810aeda:	f8c8 2000 	strlt.w	r2, [r8]
 810aede:	ea33 030b 	bics.w	r3, r3, fp
 810aee2:	d11b      	bne.n	810af1c <_dtoa_r+0xb4>
 810aee4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 810aee6:	f242 730f 	movw	r3, #9999	; 0x270f
 810aeea:	6013      	str	r3, [r2, #0]
 810aeec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810aef0:	4333      	orrs	r3, r6
 810aef2:	f000 8592 	beq.w	810ba1a <_dtoa_r+0xbb2>
 810aef6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810aef8:	b963      	cbnz	r3, 810af14 <_dtoa_r+0xac>
 810aefa:	4b92      	ldr	r3, [pc, #584]	; (810b144 <_dtoa_r+0x2dc>)
 810aefc:	e022      	b.n	810af44 <_dtoa_r+0xdc>
 810aefe:	4b92      	ldr	r3, [pc, #584]	; (810b148 <_dtoa_r+0x2e0>)
 810af00:	9301      	str	r3, [sp, #4]
 810af02:	3308      	adds	r3, #8
 810af04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810af06:	6013      	str	r3, [r2, #0]
 810af08:	9801      	ldr	r0, [sp, #4]
 810af0a:	b013      	add	sp, #76	; 0x4c
 810af0c:	ecbd 8b04 	vpop	{d8-d9}
 810af10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810af14:	4b8b      	ldr	r3, [pc, #556]	; (810b144 <_dtoa_r+0x2dc>)
 810af16:	9301      	str	r3, [sp, #4]
 810af18:	3303      	adds	r3, #3
 810af1a:	e7f3      	b.n	810af04 <_dtoa_r+0x9c>
 810af1c:	2200      	movs	r2, #0
 810af1e:	2300      	movs	r3, #0
 810af20:	4650      	mov	r0, sl
 810af22:	4659      	mov	r1, fp
 810af24:	f7f5 fe58 	bl	8100bd8 <__aeabi_dcmpeq>
 810af28:	ec4b ab19 	vmov	d9, sl, fp
 810af2c:	4680      	mov	r8, r0
 810af2e:	b158      	cbz	r0, 810af48 <_dtoa_r+0xe0>
 810af30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 810af32:	2301      	movs	r3, #1
 810af34:	6013      	str	r3, [r2, #0]
 810af36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810af38:	2b00      	cmp	r3, #0
 810af3a:	f000 856b 	beq.w	810ba14 <_dtoa_r+0xbac>
 810af3e:	4883      	ldr	r0, [pc, #524]	; (810b14c <_dtoa_r+0x2e4>)
 810af40:	6018      	str	r0, [r3, #0]
 810af42:	1e43      	subs	r3, r0, #1
 810af44:	9301      	str	r3, [sp, #4]
 810af46:	e7df      	b.n	810af08 <_dtoa_r+0xa0>
 810af48:	ec4b ab10 	vmov	d0, sl, fp
 810af4c:	aa10      	add	r2, sp, #64	; 0x40
 810af4e:	a911      	add	r1, sp, #68	; 0x44
 810af50:	4620      	mov	r0, r4
 810af52:	f001 fdf9 	bl	810cb48 <__d2b>
 810af56:	f3cb 550a 	ubfx	r5, fp, #20, #11
 810af5a:	ee08 0a10 	vmov	s16, r0
 810af5e:	2d00      	cmp	r5, #0
 810af60:	f000 8084 	beq.w	810b06c <_dtoa_r+0x204>
 810af64:	ee19 3a90 	vmov	r3, s19
 810af68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810af6c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 810af70:	4656      	mov	r6, sl
 810af72:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 810af76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 810af7a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 810af7e:	4b74      	ldr	r3, [pc, #464]	; (810b150 <_dtoa_r+0x2e8>)
 810af80:	2200      	movs	r2, #0
 810af82:	4630      	mov	r0, r6
 810af84:	4639      	mov	r1, r7
 810af86:	f7f5 fa07 	bl	8100398 <__aeabi_dsub>
 810af8a:	a365      	add	r3, pc, #404	; (adr r3, 810b120 <_dtoa_r+0x2b8>)
 810af8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810af90:	f7f5 fbba 	bl	8100708 <__aeabi_dmul>
 810af94:	a364      	add	r3, pc, #400	; (adr r3, 810b128 <_dtoa_r+0x2c0>)
 810af96:	e9d3 2300 	ldrd	r2, r3, [r3]
 810af9a:	f7f5 f9ff 	bl	810039c <__adddf3>
 810af9e:	4606      	mov	r6, r0
 810afa0:	4628      	mov	r0, r5
 810afa2:	460f      	mov	r7, r1
 810afa4:	f7f5 fb46 	bl	8100634 <__aeabi_i2d>
 810afa8:	a361      	add	r3, pc, #388	; (adr r3, 810b130 <_dtoa_r+0x2c8>)
 810afaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 810afae:	f7f5 fbab 	bl	8100708 <__aeabi_dmul>
 810afb2:	4602      	mov	r2, r0
 810afb4:	460b      	mov	r3, r1
 810afb6:	4630      	mov	r0, r6
 810afb8:	4639      	mov	r1, r7
 810afba:	f7f5 f9ef 	bl	810039c <__adddf3>
 810afbe:	4606      	mov	r6, r0
 810afc0:	460f      	mov	r7, r1
 810afc2:	f7f5 fe51 	bl	8100c68 <__aeabi_d2iz>
 810afc6:	2200      	movs	r2, #0
 810afc8:	9000      	str	r0, [sp, #0]
 810afca:	2300      	movs	r3, #0
 810afcc:	4630      	mov	r0, r6
 810afce:	4639      	mov	r1, r7
 810afd0:	f7f5 fe0c 	bl	8100bec <__aeabi_dcmplt>
 810afd4:	b150      	cbz	r0, 810afec <_dtoa_r+0x184>
 810afd6:	9800      	ldr	r0, [sp, #0]
 810afd8:	f7f5 fb2c 	bl	8100634 <__aeabi_i2d>
 810afdc:	4632      	mov	r2, r6
 810afde:	463b      	mov	r3, r7
 810afe0:	f7f5 fdfa 	bl	8100bd8 <__aeabi_dcmpeq>
 810afe4:	b910      	cbnz	r0, 810afec <_dtoa_r+0x184>
 810afe6:	9b00      	ldr	r3, [sp, #0]
 810afe8:	3b01      	subs	r3, #1
 810afea:	9300      	str	r3, [sp, #0]
 810afec:	9b00      	ldr	r3, [sp, #0]
 810afee:	2b16      	cmp	r3, #22
 810aff0:	d85a      	bhi.n	810b0a8 <_dtoa_r+0x240>
 810aff2:	9a00      	ldr	r2, [sp, #0]
 810aff4:	4b57      	ldr	r3, [pc, #348]	; (810b154 <_dtoa_r+0x2ec>)
 810aff6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810affa:	e9d3 2300 	ldrd	r2, r3, [r3]
 810affe:	ec51 0b19 	vmov	r0, r1, d9
 810b002:	f7f5 fdf3 	bl	8100bec <__aeabi_dcmplt>
 810b006:	2800      	cmp	r0, #0
 810b008:	d050      	beq.n	810b0ac <_dtoa_r+0x244>
 810b00a:	9b00      	ldr	r3, [sp, #0]
 810b00c:	3b01      	subs	r3, #1
 810b00e:	9300      	str	r3, [sp, #0]
 810b010:	2300      	movs	r3, #0
 810b012:	930b      	str	r3, [sp, #44]	; 0x2c
 810b014:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810b016:	1b5d      	subs	r5, r3, r5
 810b018:	1e6b      	subs	r3, r5, #1
 810b01a:	9305      	str	r3, [sp, #20]
 810b01c:	bf45      	ittet	mi
 810b01e:	f1c5 0301 	rsbmi	r3, r5, #1
 810b022:	9304      	strmi	r3, [sp, #16]
 810b024:	2300      	movpl	r3, #0
 810b026:	2300      	movmi	r3, #0
 810b028:	bf4c      	ite	mi
 810b02a:	9305      	strmi	r3, [sp, #20]
 810b02c:	9304      	strpl	r3, [sp, #16]
 810b02e:	9b00      	ldr	r3, [sp, #0]
 810b030:	2b00      	cmp	r3, #0
 810b032:	db3d      	blt.n	810b0b0 <_dtoa_r+0x248>
 810b034:	9b05      	ldr	r3, [sp, #20]
 810b036:	9a00      	ldr	r2, [sp, #0]
 810b038:	920a      	str	r2, [sp, #40]	; 0x28
 810b03a:	4413      	add	r3, r2
 810b03c:	9305      	str	r3, [sp, #20]
 810b03e:	2300      	movs	r3, #0
 810b040:	9307      	str	r3, [sp, #28]
 810b042:	9b06      	ldr	r3, [sp, #24]
 810b044:	2b09      	cmp	r3, #9
 810b046:	f200 8089 	bhi.w	810b15c <_dtoa_r+0x2f4>
 810b04a:	2b05      	cmp	r3, #5
 810b04c:	bfc4      	itt	gt
 810b04e:	3b04      	subgt	r3, #4
 810b050:	9306      	strgt	r3, [sp, #24]
 810b052:	9b06      	ldr	r3, [sp, #24]
 810b054:	f1a3 0302 	sub.w	r3, r3, #2
 810b058:	bfcc      	ite	gt
 810b05a:	2500      	movgt	r5, #0
 810b05c:	2501      	movle	r5, #1
 810b05e:	2b03      	cmp	r3, #3
 810b060:	f200 8087 	bhi.w	810b172 <_dtoa_r+0x30a>
 810b064:	e8df f003 	tbb	[pc, r3]
 810b068:	59383a2d 	.word	0x59383a2d
 810b06c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 810b070:	441d      	add	r5, r3
 810b072:	f205 4332 	addw	r3, r5, #1074	; 0x432
 810b076:	2b20      	cmp	r3, #32
 810b078:	bfc1      	itttt	gt
 810b07a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 810b07e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 810b082:	fa0b f303 	lslgt.w	r3, fp, r3
 810b086:	fa26 f000 	lsrgt.w	r0, r6, r0
 810b08a:	bfda      	itte	le
 810b08c:	f1c3 0320 	rsble	r3, r3, #32
 810b090:	fa06 f003 	lslle.w	r0, r6, r3
 810b094:	4318      	orrgt	r0, r3
 810b096:	f7f5 fabd 	bl	8100614 <__aeabi_ui2d>
 810b09a:	2301      	movs	r3, #1
 810b09c:	4606      	mov	r6, r0
 810b09e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 810b0a2:	3d01      	subs	r5, #1
 810b0a4:	930e      	str	r3, [sp, #56]	; 0x38
 810b0a6:	e76a      	b.n	810af7e <_dtoa_r+0x116>
 810b0a8:	2301      	movs	r3, #1
 810b0aa:	e7b2      	b.n	810b012 <_dtoa_r+0x1aa>
 810b0ac:	900b      	str	r0, [sp, #44]	; 0x2c
 810b0ae:	e7b1      	b.n	810b014 <_dtoa_r+0x1ac>
 810b0b0:	9b04      	ldr	r3, [sp, #16]
 810b0b2:	9a00      	ldr	r2, [sp, #0]
 810b0b4:	1a9b      	subs	r3, r3, r2
 810b0b6:	9304      	str	r3, [sp, #16]
 810b0b8:	4253      	negs	r3, r2
 810b0ba:	9307      	str	r3, [sp, #28]
 810b0bc:	2300      	movs	r3, #0
 810b0be:	930a      	str	r3, [sp, #40]	; 0x28
 810b0c0:	e7bf      	b.n	810b042 <_dtoa_r+0x1da>
 810b0c2:	2300      	movs	r3, #0
 810b0c4:	9308      	str	r3, [sp, #32]
 810b0c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b0c8:	2b00      	cmp	r3, #0
 810b0ca:	dc55      	bgt.n	810b178 <_dtoa_r+0x310>
 810b0cc:	2301      	movs	r3, #1
 810b0ce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 810b0d2:	461a      	mov	r2, r3
 810b0d4:	9209      	str	r2, [sp, #36]	; 0x24
 810b0d6:	e00c      	b.n	810b0f2 <_dtoa_r+0x28a>
 810b0d8:	2301      	movs	r3, #1
 810b0da:	e7f3      	b.n	810b0c4 <_dtoa_r+0x25c>
 810b0dc:	2300      	movs	r3, #0
 810b0de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810b0e0:	9308      	str	r3, [sp, #32]
 810b0e2:	9b00      	ldr	r3, [sp, #0]
 810b0e4:	4413      	add	r3, r2
 810b0e6:	9302      	str	r3, [sp, #8]
 810b0e8:	3301      	adds	r3, #1
 810b0ea:	2b01      	cmp	r3, #1
 810b0ec:	9303      	str	r3, [sp, #12]
 810b0ee:	bfb8      	it	lt
 810b0f0:	2301      	movlt	r3, #1
 810b0f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 810b0f4:	2200      	movs	r2, #0
 810b0f6:	6042      	str	r2, [r0, #4]
 810b0f8:	2204      	movs	r2, #4
 810b0fa:	f102 0614 	add.w	r6, r2, #20
 810b0fe:	429e      	cmp	r6, r3
 810b100:	6841      	ldr	r1, [r0, #4]
 810b102:	d93d      	bls.n	810b180 <_dtoa_r+0x318>
 810b104:	4620      	mov	r0, r4
 810b106:	f001 f931 	bl	810c36c <_Balloc>
 810b10a:	9001      	str	r0, [sp, #4]
 810b10c:	2800      	cmp	r0, #0
 810b10e:	d13b      	bne.n	810b188 <_dtoa_r+0x320>
 810b110:	4b11      	ldr	r3, [pc, #68]	; (810b158 <_dtoa_r+0x2f0>)
 810b112:	4602      	mov	r2, r0
 810b114:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 810b118:	e6c0      	b.n	810ae9c <_dtoa_r+0x34>
 810b11a:	2301      	movs	r3, #1
 810b11c:	e7df      	b.n	810b0de <_dtoa_r+0x276>
 810b11e:	bf00      	nop
 810b120:	636f4361 	.word	0x636f4361
 810b124:	3fd287a7 	.word	0x3fd287a7
 810b128:	8b60c8b3 	.word	0x8b60c8b3
 810b12c:	3fc68a28 	.word	0x3fc68a28
 810b130:	509f79fb 	.word	0x509f79fb
 810b134:	3fd34413 	.word	0x3fd34413
 810b138:	0810dd9e 	.word	0x0810dd9e
 810b13c:	0810ddb5 	.word	0x0810ddb5
 810b140:	7ff00000 	.word	0x7ff00000
 810b144:	0810dd9a 	.word	0x0810dd9a
 810b148:	0810dd91 	.word	0x0810dd91
 810b14c:	0810dc11 	.word	0x0810dc11
 810b150:	3ff80000 	.word	0x3ff80000
 810b154:	0810df88 	.word	0x0810df88
 810b158:	0810de10 	.word	0x0810de10
 810b15c:	2501      	movs	r5, #1
 810b15e:	2300      	movs	r3, #0
 810b160:	9306      	str	r3, [sp, #24]
 810b162:	9508      	str	r5, [sp, #32]
 810b164:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810b168:	e9cd 3302 	strd	r3, r3, [sp, #8]
 810b16c:	2200      	movs	r2, #0
 810b16e:	2312      	movs	r3, #18
 810b170:	e7b0      	b.n	810b0d4 <_dtoa_r+0x26c>
 810b172:	2301      	movs	r3, #1
 810b174:	9308      	str	r3, [sp, #32]
 810b176:	e7f5      	b.n	810b164 <_dtoa_r+0x2fc>
 810b178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b17a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 810b17e:	e7b8      	b.n	810b0f2 <_dtoa_r+0x28a>
 810b180:	3101      	adds	r1, #1
 810b182:	6041      	str	r1, [r0, #4]
 810b184:	0052      	lsls	r2, r2, #1
 810b186:	e7b8      	b.n	810b0fa <_dtoa_r+0x292>
 810b188:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810b18a:	9a01      	ldr	r2, [sp, #4]
 810b18c:	601a      	str	r2, [r3, #0]
 810b18e:	9b03      	ldr	r3, [sp, #12]
 810b190:	2b0e      	cmp	r3, #14
 810b192:	f200 809d 	bhi.w	810b2d0 <_dtoa_r+0x468>
 810b196:	2d00      	cmp	r5, #0
 810b198:	f000 809a 	beq.w	810b2d0 <_dtoa_r+0x468>
 810b19c:	9b00      	ldr	r3, [sp, #0]
 810b19e:	2b00      	cmp	r3, #0
 810b1a0:	dd32      	ble.n	810b208 <_dtoa_r+0x3a0>
 810b1a2:	4ab7      	ldr	r2, [pc, #732]	; (810b480 <_dtoa_r+0x618>)
 810b1a4:	f003 030f 	and.w	r3, r3, #15
 810b1a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 810b1ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 810b1b0:	9b00      	ldr	r3, [sp, #0]
 810b1b2:	05d8      	lsls	r0, r3, #23
 810b1b4:	ea4f 1723 	mov.w	r7, r3, asr #4
 810b1b8:	d516      	bpl.n	810b1e8 <_dtoa_r+0x380>
 810b1ba:	4bb2      	ldr	r3, [pc, #712]	; (810b484 <_dtoa_r+0x61c>)
 810b1bc:	ec51 0b19 	vmov	r0, r1, d9
 810b1c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 810b1c4:	f7f5 fbca 	bl	810095c <__aeabi_ddiv>
 810b1c8:	f007 070f 	and.w	r7, r7, #15
 810b1cc:	4682      	mov	sl, r0
 810b1ce:	468b      	mov	fp, r1
 810b1d0:	2503      	movs	r5, #3
 810b1d2:	4eac      	ldr	r6, [pc, #688]	; (810b484 <_dtoa_r+0x61c>)
 810b1d4:	b957      	cbnz	r7, 810b1ec <_dtoa_r+0x384>
 810b1d6:	4642      	mov	r2, r8
 810b1d8:	464b      	mov	r3, r9
 810b1da:	4650      	mov	r0, sl
 810b1dc:	4659      	mov	r1, fp
 810b1de:	f7f5 fbbd 	bl	810095c <__aeabi_ddiv>
 810b1e2:	4682      	mov	sl, r0
 810b1e4:	468b      	mov	fp, r1
 810b1e6:	e028      	b.n	810b23a <_dtoa_r+0x3d2>
 810b1e8:	2502      	movs	r5, #2
 810b1ea:	e7f2      	b.n	810b1d2 <_dtoa_r+0x36a>
 810b1ec:	07f9      	lsls	r1, r7, #31
 810b1ee:	d508      	bpl.n	810b202 <_dtoa_r+0x39a>
 810b1f0:	4640      	mov	r0, r8
 810b1f2:	4649      	mov	r1, r9
 810b1f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 810b1f8:	f7f5 fa86 	bl	8100708 <__aeabi_dmul>
 810b1fc:	3501      	adds	r5, #1
 810b1fe:	4680      	mov	r8, r0
 810b200:	4689      	mov	r9, r1
 810b202:	107f      	asrs	r7, r7, #1
 810b204:	3608      	adds	r6, #8
 810b206:	e7e5      	b.n	810b1d4 <_dtoa_r+0x36c>
 810b208:	f000 809b 	beq.w	810b342 <_dtoa_r+0x4da>
 810b20c:	9b00      	ldr	r3, [sp, #0]
 810b20e:	4f9d      	ldr	r7, [pc, #628]	; (810b484 <_dtoa_r+0x61c>)
 810b210:	425e      	negs	r6, r3
 810b212:	4b9b      	ldr	r3, [pc, #620]	; (810b480 <_dtoa_r+0x618>)
 810b214:	f006 020f 	and.w	r2, r6, #15
 810b218:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810b21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b220:	ec51 0b19 	vmov	r0, r1, d9
 810b224:	f7f5 fa70 	bl	8100708 <__aeabi_dmul>
 810b228:	1136      	asrs	r6, r6, #4
 810b22a:	4682      	mov	sl, r0
 810b22c:	468b      	mov	fp, r1
 810b22e:	2300      	movs	r3, #0
 810b230:	2502      	movs	r5, #2
 810b232:	2e00      	cmp	r6, #0
 810b234:	d17a      	bne.n	810b32c <_dtoa_r+0x4c4>
 810b236:	2b00      	cmp	r3, #0
 810b238:	d1d3      	bne.n	810b1e2 <_dtoa_r+0x37a>
 810b23a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810b23c:	2b00      	cmp	r3, #0
 810b23e:	f000 8082 	beq.w	810b346 <_dtoa_r+0x4de>
 810b242:	4b91      	ldr	r3, [pc, #580]	; (810b488 <_dtoa_r+0x620>)
 810b244:	2200      	movs	r2, #0
 810b246:	4650      	mov	r0, sl
 810b248:	4659      	mov	r1, fp
 810b24a:	f7f5 fccf 	bl	8100bec <__aeabi_dcmplt>
 810b24e:	2800      	cmp	r0, #0
 810b250:	d079      	beq.n	810b346 <_dtoa_r+0x4de>
 810b252:	9b03      	ldr	r3, [sp, #12]
 810b254:	2b00      	cmp	r3, #0
 810b256:	d076      	beq.n	810b346 <_dtoa_r+0x4de>
 810b258:	9b02      	ldr	r3, [sp, #8]
 810b25a:	2b00      	cmp	r3, #0
 810b25c:	dd36      	ble.n	810b2cc <_dtoa_r+0x464>
 810b25e:	9b00      	ldr	r3, [sp, #0]
 810b260:	4650      	mov	r0, sl
 810b262:	4659      	mov	r1, fp
 810b264:	1e5f      	subs	r7, r3, #1
 810b266:	2200      	movs	r2, #0
 810b268:	4b88      	ldr	r3, [pc, #544]	; (810b48c <_dtoa_r+0x624>)
 810b26a:	f7f5 fa4d 	bl	8100708 <__aeabi_dmul>
 810b26e:	9e02      	ldr	r6, [sp, #8]
 810b270:	4682      	mov	sl, r0
 810b272:	468b      	mov	fp, r1
 810b274:	3501      	adds	r5, #1
 810b276:	4628      	mov	r0, r5
 810b278:	f7f5 f9dc 	bl	8100634 <__aeabi_i2d>
 810b27c:	4652      	mov	r2, sl
 810b27e:	465b      	mov	r3, fp
 810b280:	f7f5 fa42 	bl	8100708 <__aeabi_dmul>
 810b284:	4b82      	ldr	r3, [pc, #520]	; (810b490 <_dtoa_r+0x628>)
 810b286:	2200      	movs	r2, #0
 810b288:	f7f5 f888 	bl	810039c <__adddf3>
 810b28c:	46d0      	mov	r8, sl
 810b28e:	46d9      	mov	r9, fp
 810b290:	4682      	mov	sl, r0
 810b292:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 810b296:	2e00      	cmp	r6, #0
 810b298:	d158      	bne.n	810b34c <_dtoa_r+0x4e4>
 810b29a:	4b7e      	ldr	r3, [pc, #504]	; (810b494 <_dtoa_r+0x62c>)
 810b29c:	2200      	movs	r2, #0
 810b29e:	4640      	mov	r0, r8
 810b2a0:	4649      	mov	r1, r9
 810b2a2:	f7f5 f879 	bl	8100398 <__aeabi_dsub>
 810b2a6:	4652      	mov	r2, sl
 810b2a8:	465b      	mov	r3, fp
 810b2aa:	4680      	mov	r8, r0
 810b2ac:	4689      	mov	r9, r1
 810b2ae:	f7f5 fcbb 	bl	8100c28 <__aeabi_dcmpgt>
 810b2b2:	2800      	cmp	r0, #0
 810b2b4:	f040 8295 	bne.w	810b7e2 <_dtoa_r+0x97a>
 810b2b8:	4652      	mov	r2, sl
 810b2ba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 810b2be:	4640      	mov	r0, r8
 810b2c0:	4649      	mov	r1, r9
 810b2c2:	f7f5 fc93 	bl	8100bec <__aeabi_dcmplt>
 810b2c6:	2800      	cmp	r0, #0
 810b2c8:	f040 8289 	bne.w	810b7de <_dtoa_r+0x976>
 810b2cc:	ec5b ab19 	vmov	sl, fp, d9
 810b2d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810b2d2:	2b00      	cmp	r3, #0
 810b2d4:	f2c0 8148 	blt.w	810b568 <_dtoa_r+0x700>
 810b2d8:	9a00      	ldr	r2, [sp, #0]
 810b2da:	2a0e      	cmp	r2, #14
 810b2dc:	f300 8144 	bgt.w	810b568 <_dtoa_r+0x700>
 810b2e0:	4b67      	ldr	r3, [pc, #412]	; (810b480 <_dtoa_r+0x618>)
 810b2e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810b2e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 810b2ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b2ec:	2b00      	cmp	r3, #0
 810b2ee:	f280 80d5 	bge.w	810b49c <_dtoa_r+0x634>
 810b2f2:	9b03      	ldr	r3, [sp, #12]
 810b2f4:	2b00      	cmp	r3, #0
 810b2f6:	f300 80d1 	bgt.w	810b49c <_dtoa_r+0x634>
 810b2fa:	f040 826f 	bne.w	810b7dc <_dtoa_r+0x974>
 810b2fe:	4b65      	ldr	r3, [pc, #404]	; (810b494 <_dtoa_r+0x62c>)
 810b300:	2200      	movs	r2, #0
 810b302:	4640      	mov	r0, r8
 810b304:	4649      	mov	r1, r9
 810b306:	f7f5 f9ff 	bl	8100708 <__aeabi_dmul>
 810b30a:	4652      	mov	r2, sl
 810b30c:	465b      	mov	r3, fp
 810b30e:	f7f5 fc81 	bl	8100c14 <__aeabi_dcmpge>
 810b312:	9e03      	ldr	r6, [sp, #12]
 810b314:	4637      	mov	r7, r6
 810b316:	2800      	cmp	r0, #0
 810b318:	f040 8245 	bne.w	810b7a6 <_dtoa_r+0x93e>
 810b31c:	9d01      	ldr	r5, [sp, #4]
 810b31e:	2331      	movs	r3, #49	; 0x31
 810b320:	f805 3b01 	strb.w	r3, [r5], #1
 810b324:	9b00      	ldr	r3, [sp, #0]
 810b326:	3301      	adds	r3, #1
 810b328:	9300      	str	r3, [sp, #0]
 810b32a:	e240      	b.n	810b7ae <_dtoa_r+0x946>
 810b32c:	07f2      	lsls	r2, r6, #31
 810b32e:	d505      	bpl.n	810b33c <_dtoa_r+0x4d4>
 810b330:	e9d7 2300 	ldrd	r2, r3, [r7]
 810b334:	f7f5 f9e8 	bl	8100708 <__aeabi_dmul>
 810b338:	3501      	adds	r5, #1
 810b33a:	2301      	movs	r3, #1
 810b33c:	1076      	asrs	r6, r6, #1
 810b33e:	3708      	adds	r7, #8
 810b340:	e777      	b.n	810b232 <_dtoa_r+0x3ca>
 810b342:	2502      	movs	r5, #2
 810b344:	e779      	b.n	810b23a <_dtoa_r+0x3d2>
 810b346:	9f00      	ldr	r7, [sp, #0]
 810b348:	9e03      	ldr	r6, [sp, #12]
 810b34a:	e794      	b.n	810b276 <_dtoa_r+0x40e>
 810b34c:	9901      	ldr	r1, [sp, #4]
 810b34e:	4b4c      	ldr	r3, [pc, #304]	; (810b480 <_dtoa_r+0x618>)
 810b350:	4431      	add	r1, r6
 810b352:	910d      	str	r1, [sp, #52]	; 0x34
 810b354:	9908      	ldr	r1, [sp, #32]
 810b356:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 810b35a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 810b35e:	2900      	cmp	r1, #0
 810b360:	d043      	beq.n	810b3ea <_dtoa_r+0x582>
 810b362:	494d      	ldr	r1, [pc, #308]	; (810b498 <_dtoa_r+0x630>)
 810b364:	2000      	movs	r0, #0
 810b366:	f7f5 faf9 	bl	810095c <__aeabi_ddiv>
 810b36a:	4652      	mov	r2, sl
 810b36c:	465b      	mov	r3, fp
 810b36e:	f7f5 f813 	bl	8100398 <__aeabi_dsub>
 810b372:	9d01      	ldr	r5, [sp, #4]
 810b374:	4682      	mov	sl, r0
 810b376:	468b      	mov	fp, r1
 810b378:	4649      	mov	r1, r9
 810b37a:	4640      	mov	r0, r8
 810b37c:	f7f5 fc74 	bl	8100c68 <__aeabi_d2iz>
 810b380:	4606      	mov	r6, r0
 810b382:	f7f5 f957 	bl	8100634 <__aeabi_i2d>
 810b386:	4602      	mov	r2, r0
 810b388:	460b      	mov	r3, r1
 810b38a:	4640      	mov	r0, r8
 810b38c:	4649      	mov	r1, r9
 810b38e:	f7f5 f803 	bl	8100398 <__aeabi_dsub>
 810b392:	3630      	adds	r6, #48	; 0x30
 810b394:	f805 6b01 	strb.w	r6, [r5], #1
 810b398:	4652      	mov	r2, sl
 810b39a:	465b      	mov	r3, fp
 810b39c:	4680      	mov	r8, r0
 810b39e:	4689      	mov	r9, r1
 810b3a0:	f7f5 fc24 	bl	8100bec <__aeabi_dcmplt>
 810b3a4:	2800      	cmp	r0, #0
 810b3a6:	d163      	bne.n	810b470 <_dtoa_r+0x608>
 810b3a8:	4642      	mov	r2, r8
 810b3aa:	464b      	mov	r3, r9
 810b3ac:	4936      	ldr	r1, [pc, #216]	; (810b488 <_dtoa_r+0x620>)
 810b3ae:	2000      	movs	r0, #0
 810b3b0:	f7f4 fff2 	bl	8100398 <__aeabi_dsub>
 810b3b4:	4652      	mov	r2, sl
 810b3b6:	465b      	mov	r3, fp
 810b3b8:	f7f5 fc18 	bl	8100bec <__aeabi_dcmplt>
 810b3bc:	2800      	cmp	r0, #0
 810b3be:	f040 80b5 	bne.w	810b52c <_dtoa_r+0x6c4>
 810b3c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810b3c4:	429d      	cmp	r5, r3
 810b3c6:	d081      	beq.n	810b2cc <_dtoa_r+0x464>
 810b3c8:	4b30      	ldr	r3, [pc, #192]	; (810b48c <_dtoa_r+0x624>)
 810b3ca:	2200      	movs	r2, #0
 810b3cc:	4650      	mov	r0, sl
 810b3ce:	4659      	mov	r1, fp
 810b3d0:	f7f5 f99a 	bl	8100708 <__aeabi_dmul>
 810b3d4:	4b2d      	ldr	r3, [pc, #180]	; (810b48c <_dtoa_r+0x624>)
 810b3d6:	4682      	mov	sl, r0
 810b3d8:	468b      	mov	fp, r1
 810b3da:	4640      	mov	r0, r8
 810b3dc:	4649      	mov	r1, r9
 810b3de:	2200      	movs	r2, #0
 810b3e0:	f7f5 f992 	bl	8100708 <__aeabi_dmul>
 810b3e4:	4680      	mov	r8, r0
 810b3e6:	4689      	mov	r9, r1
 810b3e8:	e7c6      	b.n	810b378 <_dtoa_r+0x510>
 810b3ea:	4650      	mov	r0, sl
 810b3ec:	4659      	mov	r1, fp
 810b3ee:	f7f5 f98b 	bl	8100708 <__aeabi_dmul>
 810b3f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810b3f4:	9d01      	ldr	r5, [sp, #4]
 810b3f6:	930f      	str	r3, [sp, #60]	; 0x3c
 810b3f8:	4682      	mov	sl, r0
 810b3fa:	468b      	mov	fp, r1
 810b3fc:	4649      	mov	r1, r9
 810b3fe:	4640      	mov	r0, r8
 810b400:	f7f5 fc32 	bl	8100c68 <__aeabi_d2iz>
 810b404:	4606      	mov	r6, r0
 810b406:	f7f5 f915 	bl	8100634 <__aeabi_i2d>
 810b40a:	3630      	adds	r6, #48	; 0x30
 810b40c:	4602      	mov	r2, r0
 810b40e:	460b      	mov	r3, r1
 810b410:	4640      	mov	r0, r8
 810b412:	4649      	mov	r1, r9
 810b414:	f7f4 ffc0 	bl	8100398 <__aeabi_dsub>
 810b418:	f805 6b01 	strb.w	r6, [r5], #1
 810b41c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810b41e:	429d      	cmp	r5, r3
 810b420:	4680      	mov	r8, r0
 810b422:	4689      	mov	r9, r1
 810b424:	f04f 0200 	mov.w	r2, #0
 810b428:	d124      	bne.n	810b474 <_dtoa_r+0x60c>
 810b42a:	4b1b      	ldr	r3, [pc, #108]	; (810b498 <_dtoa_r+0x630>)
 810b42c:	4650      	mov	r0, sl
 810b42e:	4659      	mov	r1, fp
 810b430:	f7f4 ffb4 	bl	810039c <__adddf3>
 810b434:	4602      	mov	r2, r0
 810b436:	460b      	mov	r3, r1
 810b438:	4640      	mov	r0, r8
 810b43a:	4649      	mov	r1, r9
 810b43c:	f7f5 fbf4 	bl	8100c28 <__aeabi_dcmpgt>
 810b440:	2800      	cmp	r0, #0
 810b442:	d173      	bne.n	810b52c <_dtoa_r+0x6c4>
 810b444:	4652      	mov	r2, sl
 810b446:	465b      	mov	r3, fp
 810b448:	4913      	ldr	r1, [pc, #76]	; (810b498 <_dtoa_r+0x630>)
 810b44a:	2000      	movs	r0, #0
 810b44c:	f7f4 ffa4 	bl	8100398 <__aeabi_dsub>
 810b450:	4602      	mov	r2, r0
 810b452:	460b      	mov	r3, r1
 810b454:	4640      	mov	r0, r8
 810b456:	4649      	mov	r1, r9
 810b458:	f7f5 fbc8 	bl	8100bec <__aeabi_dcmplt>
 810b45c:	2800      	cmp	r0, #0
 810b45e:	f43f af35 	beq.w	810b2cc <_dtoa_r+0x464>
 810b462:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 810b464:	1e6b      	subs	r3, r5, #1
 810b466:	930f      	str	r3, [sp, #60]	; 0x3c
 810b468:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810b46c:	2b30      	cmp	r3, #48	; 0x30
 810b46e:	d0f8      	beq.n	810b462 <_dtoa_r+0x5fa>
 810b470:	9700      	str	r7, [sp, #0]
 810b472:	e049      	b.n	810b508 <_dtoa_r+0x6a0>
 810b474:	4b05      	ldr	r3, [pc, #20]	; (810b48c <_dtoa_r+0x624>)
 810b476:	f7f5 f947 	bl	8100708 <__aeabi_dmul>
 810b47a:	4680      	mov	r8, r0
 810b47c:	4689      	mov	r9, r1
 810b47e:	e7bd      	b.n	810b3fc <_dtoa_r+0x594>
 810b480:	0810df88 	.word	0x0810df88
 810b484:	0810df60 	.word	0x0810df60
 810b488:	3ff00000 	.word	0x3ff00000
 810b48c:	40240000 	.word	0x40240000
 810b490:	401c0000 	.word	0x401c0000
 810b494:	40140000 	.word	0x40140000
 810b498:	3fe00000 	.word	0x3fe00000
 810b49c:	9d01      	ldr	r5, [sp, #4]
 810b49e:	4656      	mov	r6, sl
 810b4a0:	465f      	mov	r7, fp
 810b4a2:	4642      	mov	r2, r8
 810b4a4:	464b      	mov	r3, r9
 810b4a6:	4630      	mov	r0, r6
 810b4a8:	4639      	mov	r1, r7
 810b4aa:	f7f5 fa57 	bl	810095c <__aeabi_ddiv>
 810b4ae:	f7f5 fbdb 	bl	8100c68 <__aeabi_d2iz>
 810b4b2:	4682      	mov	sl, r0
 810b4b4:	f7f5 f8be 	bl	8100634 <__aeabi_i2d>
 810b4b8:	4642      	mov	r2, r8
 810b4ba:	464b      	mov	r3, r9
 810b4bc:	f7f5 f924 	bl	8100708 <__aeabi_dmul>
 810b4c0:	4602      	mov	r2, r0
 810b4c2:	460b      	mov	r3, r1
 810b4c4:	4630      	mov	r0, r6
 810b4c6:	4639      	mov	r1, r7
 810b4c8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 810b4cc:	f7f4 ff64 	bl	8100398 <__aeabi_dsub>
 810b4d0:	f805 6b01 	strb.w	r6, [r5], #1
 810b4d4:	9e01      	ldr	r6, [sp, #4]
 810b4d6:	9f03      	ldr	r7, [sp, #12]
 810b4d8:	1bae      	subs	r6, r5, r6
 810b4da:	42b7      	cmp	r7, r6
 810b4dc:	4602      	mov	r2, r0
 810b4de:	460b      	mov	r3, r1
 810b4e0:	d135      	bne.n	810b54e <_dtoa_r+0x6e6>
 810b4e2:	f7f4 ff5b 	bl	810039c <__adddf3>
 810b4e6:	4642      	mov	r2, r8
 810b4e8:	464b      	mov	r3, r9
 810b4ea:	4606      	mov	r6, r0
 810b4ec:	460f      	mov	r7, r1
 810b4ee:	f7f5 fb9b 	bl	8100c28 <__aeabi_dcmpgt>
 810b4f2:	b9d0      	cbnz	r0, 810b52a <_dtoa_r+0x6c2>
 810b4f4:	4642      	mov	r2, r8
 810b4f6:	464b      	mov	r3, r9
 810b4f8:	4630      	mov	r0, r6
 810b4fa:	4639      	mov	r1, r7
 810b4fc:	f7f5 fb6c 	bl	8100bd8 <__aeabi_dcmpeq>
 810b500:	b110      	cbz	r0, 810b508 <_dtoa_r+0x6a0>
 810b502:	f01a 0f01 	tst.w	sl, #1
 810b506:	d110      	bne.n	810b52a <_dtoa_r+0x6c2>
 810b508:	4620      	mov	r0, r4
 810b50a:	ee18 1a10 	vmov	r1, s16
 810b50e:	f000 ff6d 	bl	810c3ec <_Bfree>
 810b512:	2300      	movs	r3, #0
 810b514:	9800      	ldr	r0, [sp, #0]
 810b516:	702b      	strb	r3, [r5, #0]
 810b518:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810b51a:	3001      	adds	r0, #1
 810b51c:	6018      	str	r0, [r3, #0]
 810b51e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810b520:	2b00      	cmp	r3, #0
 810b522:	f43f acf1 	beq.w	810af08 <_dtoa_r+0xa0>
 810b526:	601d      	str	r5, [r3, #0]
 810b528:	e4ee      	b.n	810af08 <_dtoa_r+0xa0>
 810b52a:	9f00      	ldr	r7, [sp, #0]
 810b52c:	462b      	mov	r3, r5
 810b52e:	461d      	mov	r5, r3
 810b530:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810b534:	2a39      	cmp	r2, #57	; 0x39
 810b536:	d106      	bne.n	810b546 <_dtoa_r+0x6de>
 810b538:	9a01      	ldr	r2, [sp, #4]
 810b53a:	429a      	cmp	r2, r3
 810b53c:	d1f7      	bne.n	810b52e <_dtoa_r+0x6c6>
 810b53e:	9901      	ldr	r1, [sp, #4]
 810b540:	2230      	movs	r2, #48	; 0x30
 810b542:	3701      	adds	r7, #1
 810b544:	700a      	strb	r2, [r1, #0]
 810b546:	781a      	ldrb	r2, [r3, #0]
 810b548:	3201      	adds	r2, #1
 810b54a:	701a      	strb	r2, [r3, #0]
 810b54c:	e790      	b.n	810b470 <_dtoa_r+0x608>
 810b54e:	4ba6      	ldr	r3, [pc, #664]	; (810b7e8 <_dtoa_r+0x980>)
 810b550:	2200      	movs	r2, #0
 810b552:	f7f5 f8d9 	bl	8100708 <__aeabi_dmul>
 810b556:	2200      	movs	r2, #0
 810b558:	2300      	movs	r3, #0
 810b55a:	4606      	mov	r6, r0
 810b55c:	460f      	mov	r7, r1
 810b55e:	f7f5 fb3b 	bl	8100bd8 <__aeabi_dcmpeq>
 810b562:	2800      	cmp	r0, #0
 810b564:	d09d      	beq.n	810b4a2 <_dtoa_r+0x63a>
 810b566:	e7cf      	b.n	810b508 <_dtoa_r+0x6a0>
 810b568:	9a08      	ldr	r2, [sp, #32]
 810b56a:	2a00      	cmp	r2, #0
 810b56c:	f000 80d7 	beq.w	810b71e <_dtoa_r+0x8b6>
 810b570:	9a06      	ldr	r2, [sp, #24]
 810b572:	2a01      	cmp	r2, #1
 810b574:	f300 80ba 	bgt.w	810b6ec <_dtoa_r+0x884>
 810b578:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810b57a:	2a00      	cmp	r2, #0
 810b57c:	f000 80b2 	beq.w	810b6e4 <_dtoa_r+0x87c>
 810b580:	f203 4333 	addw	r3, r3, #1075	; 0x433
 810b584:	9e07      	ldr	r6, [sp, #28]
 810b586:	9d04      	ldr	r5, [sp, #16]
 810b588:	9a04      	ldr	r2, [sp, #16]
 810b58a:	441a      	add	r2, r3
 810b58c:	9204      	str	r2, [sp, #16]
 810b58e:	9a05      	ldr	r2, [sp, #20]
 810b590:	2101      	movs	r1, #1
 810b592:	441a      	add	r2, r3
 810b594:	4620      	mov	r0, r4
 810b596:	9205      	str	r2, [sp, #20]
 810b598:	f001 f82a 	bl	810c5f0 <__i2b>
 810b59c:	4607      	mov	r7, r0
 810b59e:	2d00      	cmp	r5, #0
 810b5a0:	dd0c      	ble.n	810b5bc <_dtoa_r+0x754>
 810b5a2:	9b05      	ldr	r3, [sp, #20]
 810b5a4:	2b00      	cmp	r3, #0
 810b5a6:	dd09      	ble.n	810b5bc <_dtoa_r+0x754>
 810b5a8:	42ab      	cmp	r3, r5
 810b5aa:	9a04      	ldr	r2, [sp, #16]
 810b5ac:	bfa8      	it	ge
 810b5ae:	462b      	movge	r3, r5
 810b5b0:	1ad2      	subs	r2, r2, r3
 810b5b2:	9204      	str	r2, [sp, #16]
 810b5b4:	9a05      	ldr	r2, [sp, #20]
 810b5b6:	1aed      	subs	r5, r5, r3
 810b5b8:	1ad3      	subs	r3, r2, r3
 810b5ba:	9305      	str	r3, [sp, #20]
 810b5bc:	9b07      	ldr	r3, [sp, #28]
 810b5be:	b31b      	cbz	r3, 810b608 <_dtoa_r+0x7a0>
 810b5c0:	9b08      	ldr	r3, [sp, #32]
 810b5c2:	2b00      	cmp	r3, #0
 810b5c4:	f000 80af 	beq.w	810b726 <_dtoa_r+0x8be>
 810b5c8:	2e00      	cmp	r6, #0
 810b5ca:	dd13      	ble.n	810b5f4 <_dtoa_r+0x78c>
 810b5cc:	4639      	mov	r1, r7
 810b5ce:	4632      	mov	r2, r6
 810b5d0:	4620      	mov	r0, r4
 810b5d2:	f001 f8cd 	bl	810c770 <__pow5mult>
 810b5d6:	ee18 2a10 	vmov	r2, s16
 810b5da:	4601      	mov	r1, r0
 810b5dc:	4607      	mov	r7, r0
 810b5de:	4620      	mov	r0, r4
 810b5e0:	f001 f81c 	bl	810c61c <__multiply>
 810b5e4:	ee18 1a10 	vmov	r1, s16
 810b5e8:	4680      	mov	r8, r0
 810b5ea:	4620      	mov	r0, r4
 810b5ec:	f000 fefe 	bl	810c3ec <_Bfree>
 810b5f0:	ee08 8a10 	vmov	s16, r8
 810b5f4:	9b07      	ldr	r3, [sp, #28]
 810b5f6:	1b9a      	subs	r2, r3, r6
 810b5f8:	d006      	beq.n	810b608 <_dtoa_r+0x7a0>
 810b5fa:	ee18 1a10 	vmov	r1, s16
 810b5fe:	4620      	mov	r0, r4
 810b600:	f001 f8b6 	bl	810c770 <__pow5mult>
 810b604:	ee08 0a10 	vmov	s16, r0
 810b608:	2101      	movs	r1, #1
 810b60a:	4620      	mov	r0, r4
 810b60c:	f000 fff0 	bl	810c5f0 <__i2b>
 810b610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b612:	2b00      	cmp	r3, #0
 810b614:	4606      	mov	r6, r0
 810b616:	f340 8088 	ble.w	810b72a <_dtoa_r+0x8c2>
 810b61a:	461a      	mov	r2, r3
 810b61c:	4601      	mov	r1, r0
 810b61e:	4620      	mov	r0, r4
 810b620:	f001 f8a6 	bl	810c770 <__pow5mult>
 810b624:	9b06      	ldr	r3, [sp, #24]
 810b626:	2b01      	cmp	r3, #1
 810b628:	4606      	mov	r6, r0
 810b62a:	f340 8081 	ble.w	810b730 <_dtoa_r+0x8c8>
 810b62e:	f04f 0800 	mov.w	r8, #0
 810b632:	6933      	ldr	r3, [r6, #16]
 810b634:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 810b638:	6918      	ldr	r0, [r3, #16]
 810b63a:	f000 ff89 	bl	810c550 <__hi0bits>
 810b63e:	f1c0 0020 	rsb	r0, r0, #32
 810b642:	9b05      	ldr	r3, [sp, #20]
 810b644:	4418      	add	r0, r3
 810b646:	f010 001f 	ands.w	r0, r0, #31
 810b64a:	f000 8092 	beq.w	810b772 <_dtoa_r+0x90a>
 810b64e:	f1c0 0320 	rsb	r3, r0, #32
 810b652:	2b04      	cmp	r3, #4
 810b654:	f340 808a 	ble.w	810b76c <_dtoa_r+0x904>
 810b658:	f1c0 001c 	rsb	r0, r0, #28
 810b65c:	9b04      	ldr	r3, [sp, #16]
 810b65e:	4403      	add	r3, r0
 810b660:	9304      	str	r3, [sp, #16]
 810b662:	9b05      	ldr	r3, [sp, #20]
 810b664:	4403      	add	r3, r0
 810b666:	4405      	add	r5, r0
 810b668:	9305      	str	r3, [sp, #20]
 810b66a:	9b04      	ldr	r3, [sp, #16]
 810b66c:	2b00      	cmp	r3, #0
 810b66e:	dd07      	ble.n	810b680 <_dtoa_r+0x818>
 810b670:	ee18 1a10 	vmov	r1, s16
 810b674:	461a      	mov	r2, r3
 810b676:	4620      	mov	r0, r4
 810b678:	f001 f8d4 	bl	810c824 <__lshift>
 810b67c:	ee08 0a10 	vmov	s16, r0
 810b680:	9b05      	ldr	r3, [sp, #20]
 810b682:	2b00      	cmp	r3, #0
 810b684:	dd05      	ble.n	810b692 <_dtoa_r+0x82a>
 810b686:	4631      	mov	r1, r6
 810b688:	461a      	mov	r2, r3
 810b68a:	4620      	mov	r0, r4
 810b68c:	f001 f8ca 	bl	810c824 <__lshift>
 810b690:	4606      	mov	r6, r0
 810b692:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810b694:	2b00      	cmp	r3, #0
 810b696:	d06e      	beq.n	810b776 <_dtoa_r+0x90e>
 810b698:	ee18 0a10 	vmov	r0, s16
 810b69c:	4631      	mov	r1, r6
 810b69e:	f001 f931 	bl	810c904 <__mcmp>
 810b6a2:	2800      	cmp	r0, #0
 810b6a4:	da67      	bge.n	810b776 <_dtoa_r+0x90e>
 810b6a6:	9b00      	ldr	r3, [sp, #0]
 810b6a8:	3b01      	subs	r3, #1
 810b6aa:	ee18 1a10 	vmov	r1, s16
 810b6ae:	9300      	str	r3, [sp, #0]
 810b6b0:	220a      	movs	r2, #10
 810b6b2:	2300      	movs	r3, #0
 810b6b4:	4620      	mov	r0, r4
 810b6b6:	f000 febb 	bl	810c430 <__multadd>
 810b6ba:	9b08      	ldr	r3, [sp, #32]
 810b6bc:	ee08 0a10 	vmov	s16, r0
 810b6c0:	2b00      	cmp	r3, #0
 810b6c2:	f000 81b1 	beq.w	810ba28 <_dtoa_r+0xbc0>
 810b6c6:	2300      	movs	r3, #0
 810b6c8:	4639      	mov	r1, r7
 810b6ca:	220a      	movs	r2, #10
 810b6cc:	4620      	mov	r0, r4
 810b6ce:	f000 feaf 	bl	810c430 <__multadd>
 810b6d2:	9b02      	ldr	r3, [sp, #8]
 810b6d4:	2b00      	cmp	r3, #0
 810b6d6:	4607      	mov	r7, r0
 810b6d8:	f300 808e 	bgt.w	810b7f8 <_dtoa_r+0x990>
 810b6dc:	9b06      	ldr	r3, [sp, #24]
 810b6de:	2b02      	cmp	r3, #2
 810b6e0:	dc51      	bgt.n	810b786 <_dtoa_r+0x91e>
 810b6e2:	e089      	b.n	810b7f8 <_dtoa_r+0x990>
 810b6e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810b6e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 810b6ea:	e74b      	b.n	810b584 <_dtoa_r+0x71c>
 810b6ec:	9b03      	ldr	r3, [sp, #12]
 810b6ee:	1e5e      	subs	r6, r3, #1
 810b6f0:	9b07      	ldr	r3, [sp, #28]
 810b6f2:	42b3      	cmp	r3, r6
 810b6f4:	bfbf      	itttt	lt
 810b6f6:	9b07      	ldrlt	r3, [sp, #28]
 810b6f8:	9607      	strlt	r6, [sp, #28]
 810b6fa:	1af2      	sublt	r2, r6, r3
 810b6fc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 810b6fe:	bfb6      	itet	lt
 810b700:	189b      	addlt	r3, r3, r2
 810b702:	1b9e      	subge	r6, r3, r6
 810b704:	930a      	strlt	r3, [sp, #40]	; 0x28
 810b706:	9b03      	ldr	r3, [sp, #12]
 810b708:	bfb8      	it	lt
 810b70a:	2600      	movlt	r6, #0
 810b70c:	2b00      	cmp	r3, #0
 810b70e:	bfb7      	itett	lt
 810b710:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 810b714:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 810b718:	1a9d      	sublt	r5, r3, r2
 810b71a:	2300      	movlt	r3, #0
 810b71c:	e734      	b.n	810b588 <_dtoa_r+0x720>
 810b71e:	9e07      	ldr	r6, [sp, #28]
 810b720:	9d04      	ldr	r5, [sp, #16]
 810b722:	9f08      	ldr	r7, [sp, #32]
 810b724:	e73b      	b.n	810b59e <_dtoa_r+0x736>
 810b726:	9a07      	ldr	r2, [sp, #28]
 810b728:	e767      	b.n	810b5fa <_dtoa_r+0x792>
 810b72a:	9b06      	ldr	r3, [sp, #24]
 810b72c:	2b01      	cmp	r3, #1
 810b72e:	dc18      	bgt.n	810b762 <_dtoa_r+0x8fa>
 810b730:	f1ba 0f00 	cmp.w	sl, #0
 810b734:	d115      	bne.n	810b762 <_dtoa_r+0x8fa>
 810b736:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810b73a:	b993      	cbnz	r3, 810b762 <_dtoa_r+0x8fa>
 810b73c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810b740:	0d1b      	lsrs	r3, r3, #20
 810b742:	051b      	lsls	r3, r3, #20
 810b744:	b183      	cbz	r3, 810b768 <_dtoa_r+0x900>
 810b746:	9b04      	ldr	r3, [sp, #16]
 810b748:	3301      	adds	r3, #1
 810b74a:	9304      	str	r3, [sp, #16]
 810b74c:	9b05      	ldr	r3, [sp, #20]
 810b74e:	3301      	adds	r3, #1
 810b750:	9305      	str	r3, [sp, #20]
 810b752:	f04f 0801 	mov.w	r8, #1
 810b756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b758:	2b00      	cmp	r3, #0
 810b75a:	f47f af6a 	bne.w	810b632 <_dtoa_r+0x7ca>
 810b75e:	2001      	movs	r0, #1
 810b760:	e76f      	b.n	810b642 <_dtoa_r+0x7da>
 810b762:	f04f 0800 	mov.w	r8, #0
 810b766:	e7f6      	b.n	810b756 <_dtoa_r+0x8ee>
 810b768:	4698      	mov	r8, r3
 810b76a:	e7f4      	b.n	810b756 <_dtoa_r+0x8ee>
 810b76c:	f43f af7d 	beq.w	810b66a <_dtoa_r+0x802>
 810b770:	4618      	mov	r0, r3
 810b772:	301c      	adds	r0, #28
 810b774:	e772      	b.n	810b65c <_dtoa_r+0x7f4>
 810b776:	9b03      	ldr	r3, [sp, #12]
 810b778:	2b00      	cmp	r3, #0
 810b77a:	dc37      	bgt.n	810b7ec <_dtoa_r+0x984>
 810b77c:	9b06      	ldr	r3, [sp, #24]
 810b77e:	2b02      	cmp	r3, #2
 810b780:	dd34      	ble.n	810b7ec <_dtoa_r+0x984>
 810b782:	9b03      	ldr	r3, [sp, #12]
 810b784:	9302      	str	r3, [sp, #8]
 810b786:	9b02      	ldr	r3, [sp, #8]
 810b788:	b96b      	cbnz	r3, 810b7a6 <_dtoa_r+0x93e>
 810b78a:	4631      	mov	r1, r6
 810b78c:	2205      	movs	r2, #5
 810b78e:	4620      	mov	r0, r4
 810b790:	f000 fe4e 	bl	810c430 <__multadd>
 810b794:	4601      	mov	r1, r0
 810b796:	4606      	mov	r6, r0
 810b798:	ee18 0a10 	vmov	r0, s16
 810b79c:	f001 f8b2 	bl	810c904 <__mcmp>
 810b7a0:	2800      	cmp	r0, #0
 810b7a2:	f73f adbb 	bgt.w	810b31c <_dtoa_r+0x4b4>
 810b7a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b7a8:	9d01      	ldr	r5, [sp, #4]
 810b7aa:	43db      	mvns	r3, r3
 810b7ac:	9300      	str	r3, [sp, #0]
 810b7ae:	f04f 0800 	mov.w	r8, #0
 810b7b2:	4631      	mov	r1, r6
 810b7b4:	4620      	mov	r0, r4
 810b7b6:	f000 fe19 	bl	810c3ec <_Bfree>
 810b7ba:	2f00      	cmp	r7, #0
 810b7bc:	f43f aea4 	beq.w	810b508 <_dtoa_r+0x6a0>
 810b7c0:	f1b8 0f00 	cmp.w	r8, #0
 810b7c4:	d005      	beq.n	810b7d2 <_dtoa_r+0x96a>
 810b7c6:	45b8      	cmp	r8, r7
 810b7c8:	d003      	beq.n	810b7d2 <_dtoa_r+0x96a>
 810b7ca:	4641      	mov	r1, r8
 810b7cc:	4620      	mov	r0, r4
 810b7ce:	f000 fe0d 	bl	810c3ec <_Bfree>
 810b7d2:	4639      	mov	r1, r7
 810b7d4:	4620      	mov	r0, r4
 810b7d6:	f000 fe09 	bl	810c3ec <_Bfree>
 810b7da:	e695      	b.n	810b508 <_dtoa_r+0x6a0>
 810b7dc:	2600      	movs	r6, #0
 810b7de:	4637      	mov	r7, r6
 810b7e0:	e7e1      	b.n	810b7a6 <_dtoa_r+0x93e>
 810b7e2:	9700      	str	r7, [sp, #0]
 810b7e4:	4637      	mov	r7, r6
 810b7e6:	e599      	b.n	810b31c <_dtoa_r+0x4b4>
 810b7e8:	40240000 	.word	0x40240000
 810b7ec:	9b08      	ldr	r3, [sp, #32]
 810b7ee:	2b00      	cmp	r3, #0
 810b7f0:	f000 80ca 	beq.w	810b988 <_dtoa_r+0xb20>
 810b7f4:	9b03      	ldr	r3, [sp, #12]
 810b7f6:	9302      	str	r3, [sp, #8]
 810b7f8:	2d00      	cmp	r5, #0
 810b7fa:	dd05      	ble.n	810b808 <_dtoa_r+0x9a0>
 810b7fc:	4639      	mov	r1, r7
 810b7fe:	462a      	mov	r2, r5
 810b800:	4620      	mov	r0, r4
 810b802:	f001 f80f 	bl	810c824 <__lshift>
 810b806:	4607      	mov	r7, r0
 810b808:	f1b8 0f00 	cmp.w	r8, #0
 810b80c:	d05b      	beq.n	810b8c6 <_dtoa_r+0xa5e>
 810b80e:	6879      	ldr	r1, [r7, #4]
 810b810:	4620      	mov	r0, r4
 810b812:	f000 fdab 	bl	810c36c <_Balloc>
 810b816:	4605      	mov	r5, r0
 810b818:	b928      	cbnz	r0, 810b826 <_dtoa_r+0x9be>
 810b81a:	4b87      	ldr	r3, [pc, #540]	; (810ba38 <_dtoa_r+0xbd0>)
 810b81c:	4602      	mov	r2, r0
 810b81e:	f240 21ea 	movw	r1, #746	; 0x2ea
 810b822:	f7ff bb3b 	b.w	810ae9c <_dtoa_r+0x34>
 810b826:	693a      	ldr	r2, [r7, #16]
 810b828:	3202      	adds	r2, #2
 810b82a:	0092      	lsls	r2, r2, #2
 810b82c:	f107 010c 	add.w	r1, r7, #12
 810b830:	300c      	adds	r0, #12
 810b832:	f000 fd8d 	bl	810c350 <memcpy>
 810b836:	2201      	movs	r2, #1
 810b838:	4629      	mov	r1, r5
 810b83a:	4620      	mov	r0, r4
 810b83c:	f000 fff2 	bl	810c824 <__lshift>
 810b840:	9b01      	ldr	r3, [sp, #4]
 810b842:	f103 0901 	add.w	r9, r3, #1
 810b846:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 810b84a:	4413      	add	r3, r2
 810b84c:	9305      	str	r3, [sp, #20]
 810b84e:	f00a 0301 	and.w	r3, sl, #1
 810b852:	46b8      	mov	r8, r7
 810b854:	9304      	str	r3, [sp, #16]
 810b856:	4607      	mov	r7, r0
 810b858:	4631      	mov	r1, r6
 810b85a:	ee18 0a10 	vmov	r0, s16
 810b85e:	f7ff fa77 	bl	810ad50 <quorem>
 810b862:	4641      	mov	r1, r8
 810b864:	9002      	str	r0, [sp, #8]
 810b866:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 810b86a:	ee18 0a10 	vmov	r0, s16
 810b86e:	f001 f849 	bl	810c904 <__mcmp>
 810b872:	463a      	mov	r2, r7
 810b874:	9003      	str	r0, [sp, #12]
 810b876:	4631      	mov	r1, r6
 810b878:	4620      	mov	r0, r4
 810b87a:	f001 f85f 	bl	810c93c <__mdiff>
 810b87e:	68c2      	ldr	r2, [r0, #12]
 810b880:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 810b884:	4605      	mov	r5, r0
 810b886:	bb02      	cbnz	r2, 810b8ca <_dtoa_r+0xa62>
 810b888:	4601      	mov	r1, r0
 810b88a:	ee18 0a10 	vmov	r0, s16
 810b88e:	f001 f839 	bl	810c904 <__mcmp>
 810b892:	4602      	mov	r2, r0
 810b894:	4629      	mov	r1, r5
 810b896:	4620      	mov	r0, r4
 810b898:	9207      	str	r2, [sp, #28]
 810b89a:	f000 fda7 	bl	810c3ec <_Bfree>
 810b89e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 810b8a2:	ea43 0102 	orr.w	r1, r3, r2
 810b8a6:	9b04      	ldr	r3, [sp, #16]
 810b8a8:	430b      	orrs	r3, r1
 810b8aa:	464d      	mov	r5, r9
 810b8ac:	d10f      	bne.n	810b8ce <_dtoa_r+0xa66>
 810b8ae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 810b8b2:	d02a      	beq.n	810b90a <_dtoa_r+0xaa2>
 810b8b4:	9b03      	ldr	r3, [sp, #12]
 810b8b6:	2b00      	cmp	r3, #0
 810b8b8:	dd02      	ble.n	810b8c0 <_dtoa_r+0xa58>
 810b8ba:	9b02      	ldr	r3, [sp, #8]
 810b8bc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 810b8c0:	f88b a000 	strb.w	sl, [fp]
 810b8c4:	e775      	b.n	810b7b2 <_dtoa_r+0x94a>
 810b8c6:	4638      	mov	r0, r7
 810b8c8:	e7ba      	b.n	810b840 <_dtoa_r+0x9d8>
 810b8ca:	2201      	movs	r2, #1
 810b8cc:	e7e2      	b.n	810b894 <_dtoa_r+0xa2c>
 810b8ce:	9b03      	ldr	r3, [sp, #12]
 810b8d0:	2b00      	cmp	r3, #0
 810b8d2:	db04      	blt.n	810b8de <_dtoa_r+0xa76>
 810b8d4:	9906      	ldr	r1, [sp, #24]
 810b8d6:	430b      	orrs	r3, r1
 810b8d8:	9904      	ldr	r1, [sp, #16]
 810b8da:	430b      	orrs	r3, r1
 810b8dc:	d122      	bne.n	810b924 <_dtoa_r+0xabc>
 810b8de:	2a00      	cmp	r2, #0
 810b8e0:	ddee      	ble.n	810b8c0 <_dtoa_r+0xa58>
 810b8e2:	ee18 1a10 	vmov	r1, s16
 810b8e6:	2201      	movs	r2, #1
 810b8e8:	4620      	mov	r0, r4
 810b8ea:	f000 ff9b 	bl	810c824 <__lshift>
 810b8ee:	4631      	mov	r1, r6
 810b8f0:	ee08 0a10 	vmov	s16, r0
 810b8f4:	f001 f806 	bl	810c904 <__mcmp>
 810b8f8:	2800      	cmp	r0, #0
 810b8fa:	dc03      	bgt.n	810b904 <_dtoa_r+0xa9c>
 810b8fc:	d1e0      	bne.n	810b8c0 <_dtoa_r+0xa58>
 810b8fe:	f01a 0f01 	tst.w	sl, #1
 810b902:	d0dd      	beq.n	810b8c0 <_dtoa_r+0xa58>
 810b904:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 810b908:	d1d7      	bne.n	810b8ba <_dtoa_r+0xa52>
 810b90a:	2339      	movs	r3, #57	; 0x39
 810b90c:	f88b 3000 	strb.w	r3, [fp]
 810b910:	462b      	mov	r3, r5
 810b912:	461d      	mov	r5, r3
 810b914:	3b01      	subs	r3, #1
 810b916:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 810b91a:	2a39      	cmp	r2, #57	; 0x39
 810b91c:	d071      	beq.n	810ba02 <_dtoa_r+0xb9a>
 810b91e:	3201      	adds	r2, #1
 810b920:	701a      	strb	r2, [r3, #0]
 810b922:	e746      	b.n	810b7b2 <_dtoa_r+0x94a>
 810b924:	2a00      	cmp	r2, #0
 810b926:	dd07      	ble.n	810b938 <_dtoa_r+0xad0>
 810b928:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 810b92c:	d0ed      	beq.n	810b90a <_dtoa_r+0xaa2>
 810b92e:	f10a 0301 	add.w	r3, sl, #1
 810b932:	f88b 3000 	strb.w	r3, [fp]
 810b936:	e73c      	b.n	810b7b2 <_dtoa_r+0x94a>
 810b938:	9b05      	ldr	r3, [sp, #20]
 810b93a:	f809 ac01 	strb.w	sl, [r9, #-1]
 810b93e:	4599      	cmp	r9, r3
 810b940:	d047      	beq.n	810b9d2 <_dtoa_r+0xb6a>
 810b942:	ee18 1a10 	vmov	r1, s16
 810b946:	2300      	movs	r3, #0
 810b948:	220a      	movs	r2, #10
 810b94a:	4620      	mov	r0, r4
 810b94c:	f000 fd70 	bl	810c430 <__multadd>
 810b950:	45b8      	cmp	r8, r7
 810b952:	ee08 0a10 	vmov	s16, r0
 810b956:	f04f 0300 	mov.w	r3, #0
 810b95a:	f04f 020a 	mov.w	r2, #10
 810b95e:	4641      	mov	r1, r8
 810b960:	4620      	mov	r0, r4
 810b962:	d106      	bne.n	810b972 <_dtoa_r+0xb0a>
 810b964:	f000 fd64 	bl	810c430 <__multadd>
 810b968:	4680      	mov	r8, r0
 810b96a:	4607      	mov	r7, r0
 810b96c:	f109 0901 	add.w	r9, r9, #1
 810b970:	e772      	b.n	810b858 <_dtoa_r+0x9f0>
 810b972:	f000 fd5d 	bl	810c430 <__multadd>
 810b976:	4639      	mov	r1, r7
 810b978:	4680      	mov	r8, r0
 810b97a:	2300      	movs	r3, #0
 810b97c:	220a      	movs	r2, #10
 810b97e:	4620      	mov	r0, r4
 810b980:	f000 fd56 	bl	810c430 <__multadd>
 810b984:	4607      	mov	r7, r0
 810b986:	e7f1      	b.n	810b96c <_dtoa_r+0xb04>
 810b988:	9b03      	ldr	r3, [sp, #12]
 810b98a:	9302      	str	r3, [sp, #8]
 810b98c:	9d01      	ldr	r5, [sp, #4]
 810b98e:	ee18 0a10 	vmov	r0, s16
 810b992:	4631      	mov	r1, r6
 810b994:	f7ff f9dc 	bl	810ad50 <quorem>
 810b998:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 810b99c:	9b01      	ldr	r3, [sp, #4]
 810b99e:	f805 ab01 	strb.w	sl, [r5], #1
 810b9a2:	1aea      	subs	r2, r5, r3
 810b9a4:	9b02      	ldr	r3, [sp, #8]
 810b9a6:	4293      	cmp	r3, r2
 810b9a8:	dd09      	ble.n	810b9be <_dtoa_r+0xb56>
 810b9aa:	ee18 1a10 	vmov	r1, s16
 810b9ae:	2300      	movs	r3, #0
 810b9b0:	220a      	movs	r2, #10
 810b9b2:	4620      	mov	r0, r4
 810b9b4:	f000 fd3c 	bl	810c430 <__multadd>
 810b9b8:	ee08 0a10 	vmov	s16, r0
 810b9bc:	e7e7      	b.n	810b98e <_dtoa_r+0xb26>
 810b9be:	9b02      	ldr	r3, [sp, #8]
 810b9c0:	2b00      	cmp	r3, #0
 810b9c2:	bfc8      	it	gt
 810b9c4:	461d      	movgt	r5, r3
 810b9c6:	9b01      	ldr	r3, [sp, #4]
 810b9c8:	bfd8      	it	le
 810b9ca:	2501      	movle	r5, #1
 810b9cc:	441d      	add	r5, r3
 810b9ce:	f04f 0800 	mov.w	r8, #0
 810b9d2:	ee18 1a10 	vmov	r1, s16
 810b9d6:	2201      	movs	r2, #1
 810b9d8:	4620      	mov	r0, r4
 810b9da:	f000 ff23 	bl	810c824 <__lshift>
 810b9de:	4631      	mov	r1, r6
 810b9e0:	ee08 0a10 	vmov	s16, r0
 810b9e4:	f000 ff8e 	bl	810c904 <__mcmp>
 810b9e8:	2800      	cmp	r0, #0
 810b9ea:	dc91      	bgt.n	810b910 <_dtoa_r+0xaa8>
 810b9ec:	d102      	bne.n	810b9f4 <_dtoa_r+0xb8c>
 810b9ee:	f01a 0f01 	tst.w	sl, #1
 810b9f2:	d18d      	bne.n	810b910 <_dtoa_r+0xaa8>
 810b9f4:	462b      	mov	r3, r5
 810b9f6:	461d      	mov	r5, r3
 810b9f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810b9fc:	2a30      	cmp	r2, #48	; 0x30
 810b9fe:	d0fa      	beq.n	810b9f6 <_dtoa_r+0xb8e>
 810ba00:	e6d7      	b.n	810b7b2 <_dtoa_r+0x94a>
 810ba02:	9a01      	ldr	r2, [sp, #4]
 810ba04:	429a      	cmp	r2, r3
 810ba06:	d184      	bne.n	810b912 <_dtoa_r+0xaaa>
 810ba08:	9b00      	ldr	r3, [sp, #0]
 810ba0a:	3301      	adds	r3, #1
 810ba0c:	9300      	str	r3, [sp, #0]
 810ba0e:	2331      	movs	r3, #49	; 0x31
 810ba10:	7013      	strb	r3, [r2, #0]
 810ba12:	e6ce      	b.n	810b7b2 <_dtoa_r+0x94a>
 810ba14:	4b09      	ldr	r3, [pc, #36]	; (810ba3c <_dtoa_r+0xbd4>)
 810ba16:	f7ff ba95 	b.w	810af44 <_dtoa_r+0xdc>
 810ba1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810ba1c:	2b00      	cmp	r3, #0
 810ba1e:	f47f aa6e 	bne.w	810aefe <_dtoa_r+0x96>
 810ba22:	4b07      	ldr	r3, [pc, #28]	; (810ba40 <_dtoa_r+0xbd8>)
 810ba24:	f7ff ba8e 	b.w	810af44 <_dtoa_r+0xdc>
 810ba28:	9b02      	ldr	r3, [sp, #8]
 810ba2a:	2b00      	cmp	r3, #0
 810ba2c:	dcae      	bgt.n	810b98c <_dtoa_r+0xb24>
 810ba2e:	9b06      	ldr	r3, [sp, #24]
 810ba30:	2b02      	cmp	r3, #2
 810ba32:	f73f aea8 	bgt.w	810b786 <_dtoa_r+0x91e>
 810ba36:	e7a9      	b.n	810b98c <_dtoa_r+0xb24>
 810ba38:	0810de10 	.word	0x0810de10
 810ba3c:	0810dc10 	.word	0x0810dc10
 810ba40:	0810dd91 	.word	0x0810dd91

0810ba44 <std>:
 810ba44:	2300      	movs	r3, #0
 810ba46:	b510      	push	{r4, lr}
 810ba48:	4604      	mov	r4, r0
 810ba4a:	e9c0 3300 	strd	r3, r3, [r0]
 810ba4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810ba52:	6083      	str	r3, [r0, #8]
 810ba54:	8181      	strh	r1, [r0, #12]
 810ba56:	6643      	str	r3, [r0, #100]	; 0x64
 810ba58:	81c2      	strh	r2, [r0, #14]
 810ba5a:	6183      	str	r3, [r0, #24]
 810ba5c:	4619      	mov	r1, r3
 810ba5e:	2208      	movs	r2, #8
 810ba60:	305c      	adds	r0, #92	; 0x5c
 810ba62:	f7fd fc07 	bl	8109274 <memset>
 810ba66:	4b05      	ldr	r3, [pc, #20]	; (810ba7c <std+0x38>)
 810ba68:	6263      	str	r3, [r4, #36]	; 0x24
 810ba6a:	4b05      	ldr	r3, [pc, #20]	; (810ba80 <std+0x3c>)
 810ba6c:	62a3      	str	r3, [r4, #40]	; 0x28
 810ba6e:	4b05      	ldr	r3, [pc, #20]	; (810ba84 <std+0x40>)
 810ba70:	62e3      	str	r3, [r4, #44]	; 0x2c
 810ba72:	4b05      	ldr	r3, [pc, #20]	; (810ba88 <std+0x44>)
 810ba74:	6224      	str	r4, [r4, #32]
 810ba76:	6323      	str	r3, [r4, #48]	; 0x30
 810ba78:	bd10      	pop	{r4, pc}
 810ba7a:	bf00      	nop
 810ba7c:	0810d479 	.word	0x0810d479
 810ba80:	0810d49b 	.word	0x0810d49b
 810ba84:	0810d4d3 	.word	0x0810d4d3
 810ba88:	0810d4f7 	.word	0x0810d4f7

0810ba8c <_cleanup_r>:
 810ba8c:	4901      	ldr	r1, [pc, #4]	; (810ba94 <_cleanup_r+0x8>)
 810ba8e:	f000 b8af 	b.w	810bbf0 <_fwalk_reent>
 810ba92:	bf00      	nop
 810ba94:	0810d851 	.word	0x0810d851

0810ba98 <__sfmoreglue>:
 810ba98:	b570      	push	{r4, r5, r6, lr}
 810ba9a:	2268      	movs	r2, #104	; 0x68
 810ba9c:	1e4d      	subs	r5, r1, #1
 810ba9e:	4355      	muls	r5, r2
 810baa0:	460e      	mov	r6, r1
 810baa2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 810baa6:	f001 f9a5 	bl	810cdf4 <_malloc_r>
 810baaa:	4604      	mov	r4, r0
 810baac:	b140      	cbz	r0, 810bac0 <__sfmoreglue+0x28>
 810baae:	2100      	movs	r1, #0
 810bab0:	e9c0 1600 	strd	r1, r6, [r0]
 810bab4:	300c      	adds	r0, #12
 810bab6:	60a0      	str	r0, [r4, #8]
 810bab8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 810babc:	f7fd fbda 	bl	8109274 <memset>
 810bac0:	4620      	mov	r0, r4
 810bac2:	bd70      	pop	{r4, r5, r6, pc}

0810bac4 <__sfp_lock_acquire>:
 810bac4:	4801      	ldr	r0, [pc, #4]	; (810bacc <__sfp_lock_acquire+0x8>)
 810bac6:	f000 bc26 	b.w	810c316 <__retarget_lock_acquire_recursive>
 810baca:	bf00      	nop
 810bacc:	10000435 	.word	0x10000435

0810bad0 <__sfp_lock_release>:
 810bad0:	4801      	ldr	r0, [pc, #4]	; (810bad8 <__sfp_lock_release+0x8>)
 810bad2:	f000 bc21 	b.w	810c318 <__retarget_lock_release_recursive>
 810bad6:	bf00      	nop
 810bad8:	10000435 	.word	0x10000435

0810badc <__sinit_lock_acquire>:
 810badc:	4801      	ldr	r0, [pc, #4]	; (810bae4 <__sinit_lock_acquire+0x8>)
 810bade:	f000 bc1a 	b.w	810c316 <__retarget_lock_acquire_recursive>
 810bae2:	bf00      	nop
 810bae4:	10000436 	.word	0x10000436

0810bae8 <__sinit_lock_release>:
 810bae8:	4801      	ldr	r0, [pc, #4]	; (810baf0 <__sinit_lock_release+0x8>)
 810baea:	f000 bc15 	b.w	810c318 <__retarget_lock_release_recursive>
 810baee:	bf00      	nop
 810baf0:	10000436 	.word	0x10000436

0810baf4 <__sinit>:
 810baf4:	b510      	push	{r4, lr}
 810baf6:	4604      	mov	r4, r0
 810baf8:	f7ff fff0 	bl	810badc <__sinit_lock_acquire>
 810bafc:	69a3      	ldr	r3, [r4, #24]
 810bafe:	b11b      	cbz	r3, 810bb08 <__sinit+0x14>
 810bb00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810bb04:	f7ff bff0 	b.w	810bae8 <__sinit_lock_release>
 810bb08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 810bb0c:	6523      	str	r3, [r4, #80]	; 0x50
 810bb0e:	4b13      	ldr	r3, [pc, #76]	; (810bb5c <__sinit+0x68>)
 810bb10:	4a13      	ldr	r2, [pc, #76]	; (810bb60 <__sinit+0x6c>)
 810bb12:	681b      	ldr	r3, [r3, #0]
 810bb14:	62a2      	str	r2, [r4, #40]	; 0x28
 810bb16:	42a3      	cmp	r3, r4
 810bb18:	bf04      	itt	eq
 810bb1a:	2301      	moveq	r3, #1
 810bb1c:	61a3      	streq	r3, [r4, #24]
 810bb1e:	4620      	mov	r0, r4
 810bb20:	f000 f820 	bl	810bb64 <__sfp>
 810bb24:	6060      	str	r0, [r4, #4]
 810bb26:	4620      	mov	r0, r4
 810bb28:	f000 f81c 	bl	810bb64 <__sfp>
 810bb2c:	60a0      	str	r0, [r4, #8]
 810bb2e:	4620      	mov	r0, r4
 810bb30:	f000 f818 	bl	810bb64 <__sfp>
 810bb34:	2200      	movs	r2, #0
 810bb36:	60e0      	str	r0, [r4, #12]
 810bb38:	2104      	movs	r1, #4
 810bb3a:	6860      	ldr	r0, [r4, #4]
 810bb3c:	f7ff ff82 	bl	810ba44 <std>
 810bb40:	68a0      	ldr	r0, [r4, #8]
 810bb42:	2201      	movs	r2, #1
 810bb44:	2109      	movs	r1, #9
 810bb46:	f7ff ff7d 	bl	810ba44 <std>
 810bb4a:	68e0      	ldr	r0, [r4, #12]
 810bb4c:	2202      	movs	r2, #2
 810bb4e:	2112      	movs	r1, #18
 810bb50:	f7ff ff78 	bl	810ba44 <std>
 810bb54:	2301      	movs	r3, #1
 810bb56:	61a3      	str	r3, [r4, #24]
 810bb58:	e7d2      	b.n	810bb00 <__sinit+0xc>
 810bb5a:	bf00      	nop
 810bb5c:	0810dbfc 	.word	0x0810dbfc
 810bb60:	0810ba8d 	.word	0x0810ba8d

0810bb64 <__sfp>:
 810bb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810bb66:	4607      	mov	r7, r0
 810bb68:	f7ff ffac 	bl	810bac4 <__sfp_lock_acquire>
 810bb6c:	4b1e      	ldr	r3, [pc, #120]	; (810bbe8 <__sfp+0x84>)
 810bb6e:	681e      	ldr	r6, [r3, #0]
 810bb70:	69b3      	ldr	r3, [r6, #24]
 810bb72:	b913      	cbnz	r3, 810bb7a <__sfp+0x16>
 810bb74:	4630      	mov	r0, r6
 810bb76:	f7ff ffbd 	bl	810baf4 <__sinit>
 810bb7a:	3648      	adds	r6, #72	; 0x48
 810bb7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 810bb80:	3b01      	subs	r3, #1
 810bb82:	d503      	bpl.n	810bb8c <__sfp+0x28>
 810bb84:	6833      	ldr	r3, [r6, #0]
 810bb86:	b30b      	cbz	r3, 810bbcc <__sfp+0x68>
 810bb88:	6836      	ldr	r6, [r6, #0]
 810bb8a:	e7f7      	b.n	810bb7c <__sfp+0x18>
 810bb8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 810bb90:	b9d5      	cbnz	r5, 810bbc8 <__sfp+0x64>
 810bb92:	4b16      	ldr	r3, [pc, #88]	; (810bbec <__sfp+0x88>)
 810bb94:	60e3      	str	r3, [r4, #12]
 810bb96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 810bb9a:	6665      	str	r5, [r4, #100]	; 0x64
 810bb9c:	f000 fbba 	bl	810c314 <__retarget_lock_init_recursive>
 810bba0:	f7ff ff96 	bl	810bad0 <__sfp_lock_release>
 810bba4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 810bba8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 810bbac:	6025      	str	r5, [r4, #0]
 810bbae:	61a5      	str	r5, [r4, #24]
 810bbb0:	2208      	movs	r2, #8
 810bbb2:	4629      	mov	r1, r5
 810bbb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 810bbb8:	f7fd fb5c 	bl	8109274 <memset>
 810bbbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 810bbc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 810bbc4:	4620      	mov	r0, r4
 810bbc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810bbc8:	3468      	adds	r4, #104	; 0x68
 810bbca:	e7d9      	b.n	810bb80 <__sfp+0x1c>
 810bbcc:	2104      	movs	r1, #4
 810bbce:	4638      	mov	r0, r7
 810bbd0:	f7ff ff62 	bl	810ba98 <__sfmoreglue>
 810bbd4:	4604      	mov	r4, r0
 810bbd6:	6030      	str	r0, [r6, #0]
 810bbd8:	2800      	cmp	r0, #0
 810bbda:	d1d5      	bne.n	810bb88 <__sfp+0x24>
 810bbdc:	f7ff ff78 	bl	810bad0 <__sfp_lock_release>
 810bbe0:	230c      	movs	r3, #12
 810bbe2:	603b      	str	r3, [r7, #0]
 810bbe4:	e7ee      	b.n	810bbc4 <__sfp+0x60>
 810bbe6:	bf00      	nop
 810bbe8:	0810dbfc 	.word	0x0810dbfc
 810bbec:	ffff0001 	.word	0xffff0001

0810bbf0 <_fwalk_reent>:
 810bbf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810bbf4:	4606      	mov	r6, r0
 810bbf6:	4688      	mov	r8, r1
 810bbf8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 810bbfc:	2700      	movs	r7, #0
 810bbfe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810bc02:	f1b9 0901 	subs.w	r9, r9, #1
 810bc06:	d505      	bpl.n	810bc14 <_fwalk_reent+0x24>
 810bc08:	6824      	ldr	r4, [r4, #0]
 810bc0a:	2c00      	cmp	r4, #0
 810bc0c:	d1f7      	bne.n	810bbfe <_fwalk_reent+0xe>
 810bc0e:	4638      	mov	r0, r7
 810bc10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810bc14:	89ab      	ldrh	r3, [r5, #12]
 810bc16:	2b01      	cmp	r3, #1
 810bc18:	d907      	bls.n	810bc2a <_fwalk_reent+0x3a>
 810bc1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810bc1e:	3301      	adds	r3, #1
 810bc20:	d003      	beq.n	810bc2a <_fwalk_reent+0x3a>
 810bc22:	4629      	mov	r1, r5
 810bc24:	4630      	mov	r0, r6
 810bc26:	47c0      	blx	r8
 810bc28:	4307      	orrs	r7, r0
 810bc2a:	3568      	adds	r5, #104	; 0x68
 810bc2c:	e7e9      	b.n	810bc02 <_fwalk_reent+0x12>

0810bc2e <rshift>:
 810bc2e:	6903      	ldr	r3, [r0, #16]
 810bc30:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 810bc34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810bc38:	ea4f 1261 	mov.w	r2, r1, asr #5
 810bc3c:	f100 0414 	add.w	r4, r0, #20
 810bc40:	dd45      	ble.n	810bcce <rshift+0xa0>
 810bc42:	f011 011f 	ands.w	r1, r1, #31
 810bc46:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 810bc4a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 810bc4e:	d10c      	bne.n	810bc6a <rshift+0x3c>
 810bc50:	f100 0710 	add.w	r7, r0, #16
 810bc54:	4629      	mov	r1, r5
 810bc56:	42b1      	cmp	r1, r6
 810bc58:	d334      	bcc.n	810bcc4 <rshift+0x96>
 810bc5a:	1a9b      	subs	r3, r3, r2
 810bc5c:	009b      	lsls	r3, r3, #2
 810bc5e:	1eea      	subs	r2, r5, #3
 810bc60:	4296      	cmp	r6, r2
 810bc62:	bf38      	it	cc
 810bc64:	2300      	movcc	r3, #0
 810bc66:	4423      	add	r3, r4
 810bc68:	e015      	b.n	810bc96 <rshift+0x68>
 810bc6a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 810bc6e:	f1c1 0820 	rsb	r8, r1, #32
 810bc72:	40cf      	lsrs	r7, r1
 810bc74:	f105 0e04 	add.w	lr, r5, #4
 810bc78:	46a1      	mov	r9, r4
 810bc7a:	4576      	cmp	r6, lr
 810bc7c:	46f4      	mov	ip, lr
 810bc7e:	d815      	bhi.n	810bcac <rshift+0x7e>
 810bc80:	1a9a      	subs	r2, r3, r2
 810bc82:	0092      	lsls	r2, r2, #2
 810bc84:	3a04      	subs	r2, #4
 810bc86:	3501      	adds	r5, #1
 810bc88:	42ae      	cmp	r6, r5
 810bc8a:	bf38      	it	cc
 810bc8c:	2200      	movcc	r2, #0
 810bc8e:	18a3      	adds	r3, r4, r2
 810bc90:	50a7      	str	r7, [r4, r2]
 810bc92:	b107      	cbz	r7, 810bc96 <rshift+0x68>
 810bc94:	3304      	adds	r3, #4
 810bc96:	1b1a      	subs	r2, r3, r4
 810bc98:	42a3      	cmp	r3, r4
 810bc9a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 810bc9e:	bf08      	it	eq
 810bca0:	2300      	moveq	r3, #0
 810bca2:	6102      	str	r2, [r0, #16]
 810bca4:	bf08      	it	eq
 810bca6:	6143      	streq	r3, [r0, #20]
 810bca8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810bcac:	f8dc c000 	ldr.w	ip, [ip]
 810bcb0:	fa0c fc08 	lsl.w	ip, ip, r8
 810bcb4:	ea4c 0707 	orr.w	r7, ip, r7
 810bcb8:	f849 7b04 	str.w	r7, [r9], #4
 810bcbc:	f85e 7b04 	ldr.w	r7, [lr], #4
 810bcc0:	40cf      	lsrs	r7, r1
 810bcc2:	e7da      	b.n	810bc7a <rshift+0x4c>
 810bcc4:	f851 cb04 	ldr.w	ip, [r1], #4
 810bcc8:	f847 cf04 	str.w	ip, [r7, #4]!
 810bccc:	e7c3      	b.n	810bc56 <rshift+0x28>
 810bcce:	4623      	mov	r3, r4
 810bcd0:	e7e1      	b.n	810bc96 <rshift+0x68>

0810bcd2 <__hexdig_fun>:
 810bcd2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 810bcd6:	2b09      	cmp	r3, #9
 810bcd8:	d802      	bhi.n	810bce0 <__hexdig_fun+0xe>
 810bcda:	3820      	subs	r0, #32
 810bcdc:	b2c0      	uxtb	r0, r0
 810bcde:	4770      	bx	lr
 810bce0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 810bce4:	2b05      	cmp	r3, #5
 810bce6:	d801      	bhi.n	810bcec <__hexdig_fun+0x1a>
 810bce8:	3847      	subs	r0, #71	; 0x47
 810bcea:	e7f7      	b.n	810bcdc <__hexdig_fun+0xa>
 810bcec:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 810bcf0:	2b05      	cmp	r3, #5
 810bcf2:	d801      	bhi.n	810bcf8 <__hexdig_fun+0x26>
 810bcf4:	3827      	subs	r0, #39	; 0x27
 810bcf6:	e7f1      	b.n	810bcdc <__hexdig_fun+0xa>
 810bcf8:	2000      	movs	r0, #0
 810bcfa:	4770      	bx	lr

0810bcfc <__gethex>:
 810bcfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810bd00:	ed2d 8b02 	vpush	{d8}
 810bd04:	b089      	sub	sp, #36	; 0x24
 810bd06:	ee08 0a10 	vmov	s16, r0
 810bd0a:	9304      	str	r3, [sp, #16]
 810bd0c:	4bb4      	ldr	r3, [pc, #720]	; (810bfe0 <__gethex+0x2e4>)
 810bd0e:	681b      	ldr	r3, [r3, #0]
 810bd10:	9301      	str	r3, [sp, #4]
 810bd12:	4618      	mov	r0, r3
 810bd14:	468b      	mov	fp, r1
 810bd16:	4690      	mov	r8, r2
 810bd18:	f7f4 fae2 	bl	81002e0 <strlen>
 810bd1c:	9b01      	ldr	r3, [sp, #4]
 810bd1e:	f8db 2000 	ldr.w	r2, [fp]
 810bd22:	4403      	add	r3, r0
 810bd24:	4682      	mov	sl, r0
 810bd26:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 810bd2a:	9305      	str	r3, [sp, #20]
 810bd2c:	1c93      	adds	r3, r2, #2
 810bd2e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 810bd32:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 810bd36:	32fe      	adds	r2, #254	; 0xfe
 810bd38:	18d1      	adds	r1, r2, r3
 810bd3a:	461f      	mov	r7, r3
 810bd3c:	f813 0b01 	ldrb.w	r0, [r3], #1
 810bd40:	9100      	str	r1, [sp, #0]
 810bd42:	2830      	cmp	r0, #48	; 0x30
 810bd44:	d0f8      	beq.n	810bd38 <__gethex+0x3c>
 810bd46:	f7ff ffc4 	bl	810bcd2 <__hexdig_fun>
 810bd4a:	4604      	mov	r4, r0
 810bd4c:	2800      	cmp	r0, #0
 810bd4e:	d13a      	bne.n	810bdc6 <__gethex+0xca>
 810bd50:	9901      	ldr	r1, [sp, #4]
 810bd52:	4652      	mov	r2, sl
 810bd54:	4638      	mov	r0, r7
 810bd56:	f001 fbd2 	bl	810d4fe <strncmp>
 810bd5a:	4605      	mov	r5, r0
 810bd5c:	2800      	cmp	r0, #0
 810bd5e:	d168      	bne.n	810be32 <__gethex+0x136>
 810bd60:	f817 000a 	ldrb.w	r0, [r7, sl]
 810bd64:	eb07 060a 	add.w	r6, r7, sl
 810bd68:	f7ff ffb3 	bl	810bcd2 <__hexdig_fun>
 810bd6c:	2800      	cmp	r0, #0
 810bd6e:	d062      	beq.n	810be36 <__gethex+0x13a>
 810bd70:	4633      	mov	r3, r6
 810bd72:	7818      	ldrb	r0, [r3, #0]
 810bd74:	2830      	cmp	r0, #48	; 0x30
 810bd76:	461f      	mov	r7, r3
 810bd78:	f103 0301 	add.w	r3, r3, #1
 810bd7c:	d0f9      	beq.n	810bd72 <__gethex+0x76>
 810bd7e:	f7ff ffa8 	bl	810bcd2 <__hexdig_fun>
 810bd82:	2301      	movs	r3, #1
 810bd84:	fab0 f480 	clz	r4, r0
 810bd88:	0964      	lsrs	r4, r4, #5
 810bd8a:	4635      	mov	r5, r6
 810bd8c:	9300      	str	r3, [sp, #0]
 810bd8e:	463a      	mov	r2, r7
 810bd90:	4616      	mov	r6, r2
 810bd92:	3201      	adds	r2, #1
 810bd94:	7830      	ldrb	r0, [r6, #0]
 810bd96:	f7ff ff9c 	bl	810bcd2 <__hexdig_fun>
 810bd9a:	2800      	cmp	r0, #0
 810bd9c:	d1f8      	bne.n	810bd90 <__gethex+0x94>
 810bd9e:	9901      	ldr	r1, [sp, #4]
 810bda0:	4652      	mov	r2, sl
 810bda2:	4630      	mov	r0, r6
 810bda4:	f001 fbab 	bl	810d4fe <strncmp>
 810bda8:	b980      	cbnz	r0, 810bdcc <__gethex+0xd0>
 810bdaa:	b94d      	cbnz	r5, 810bdc0 <__gethex+0xc4>
 810bdac:	eb06 050a 	add.w	r5, r6, sl
 810bdb0:	462a      	mov	r2, r5
 810bdb2:	4616      	mov	r6, r2
 810bdb4:	3201      	adds	r2, #1
 810bdb6:	7830      	ldrb	r0, [r6, #0]
 810bdb8:	f7ff ff8b 	bl	810bcd2 <__hexdig_fun>
 810bdbc:	2800      	cmp	r0, #0
 810bdbe:	d1f8      	bne.n	810bdb2 <__gethex+0xb6>
 810bdc0:	1bad      	subs	r5, r5, r6
 810bdc2:	00ad      	lsls	r5, r5, #2
 810bdc4:	e004      	b.n	810bdd0 <__gethex+0xd4>
 810bdc6:	2400      	movs	r4, #0
 810bdc8:	4625      	mov	r5, r4
 810bdca:	e7e0      	b.n	810bd8e <__gethex+0x92>
 810bdcc:	2d00      	cmp	r5, #0
 810bdce:	d1f7      	bne.n	810bdc0 <__gethex+0xc4>
 810bdd0:	7833      	ldrb	r3, [r6, #0]
 810bdd2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810bdd6:	2b50      	cmp	r3, #80	; 0x50
 810bdd8:	d13b      	bne.n	810be52 <__gethex+0x156>
 810bdda:	7873      	ldrb	r3, [r6, #1]
 810bddc:	2b2b      	cmp	r3, #43	; 0x2b
 810bdde:	d02c      	beq.n	810be3a <__gethex+0x13e>
 810bde0:	2b2d      	cmp	r3, #45	; 0x2d
 810bde2:	d02e      	beq.n	810be42 <__gethex+0x146>
 810bde4:	1c71      	adds	r1, r6, #1
 810bde6:	f04f 0900 	mov.w	r9, #0
 810bdea:	7808      	ldrb	r0, [r1, #0]
 810bdec:	f7ff ff71 	bl	810bcd2 <__hexdig_fun>
 810bdf0:	1e43      	subs	r3, r0, #1
 810bdf2:	b2db      	uxtb	r3, r3
 810bdf4:	2b18      	cmp	r3, #24
 810bdf6:	d82c      	bhi.n	810be52 <__gethex+0x156>
 810bdf8:	f1a0 0210 	sub.w	r2, r0, #16
 810bdfc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 810be00:	f7ff ff67 	bl	810bcd2 <__hexdig_fun>
 810be04:	1e43      	subs	r3, r0, #1
 810be06:	b2db      	uxtb	r3, r3
 810be08:	2b18      	cmp	r3, #24
 810be0a:	d91d      	bls.n	810be48 <__gethex+0x14c>
 810be0c:	f1b9 0f00 	cmp.w	r9, #0
 810be10:	d000      	beq.n	810be14 <__gethex+0x118>
 810be12:	4252      	negs	r2, r2
 810be14:	4415      	add	r5, r2
 810be16:	f8cb 1000 	str.w	r1, [fp]
 810be1a:	b1e4      	cbz	r4, 810be56 <__gethex+0x15a>
 810be1c:	9b00      	ldr	r3, [sp, #0]
 810be1e:	2b00      	cmp	r3, #0
 810be20:	bf14      	ite	ne
 810be22:	2700      	movne	r7, #0
 810be24:	2706      	moveq	r7, #6
 810be26:	4638      	mov	r0, r7
 810be28:	b009      	add	sp, #36	; 0x24
 810be2a:	ecbd 8b02 	vpop	{d8}
 810be2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810be32:	463e      	mov	r6, r7
 810be34:	4625      	mov	r5, r4
 810be36:	2401      	movs	r4, #1
 810be38:	e7ca      	b.n	810bdd0 <__gethex+0xd4>
 810be3a:	f04f 0900 	mov.w	r9, #0
 810be3e:	1cb1      	adds	r1, r6, #2
 810be40:	e7d3      	b.n	810bdea <__gethex+0xee>
 810be42:	f04f 0901 	mov.w	r9, #1
 810be46:	e7fa      	b.n	810be3e <__gethex+0x142>
 810be48:	230a      	movs	r3, #10
 810be4a:	fb03 0202 	mla	r2, r3, r2, r0
 810be4e:	3a10      	subs	r2, #16
 810be50:	e7d4      	b.n	810bdfc <__gethex+0x100>
 810be52:	4631      	mov	r1, r6
 810be54:	e7df      	b.n	810be16 <__gethex+0x11a>
 810be56:	1bf3      	subs	r3, r6, r7
 810be58:	3b01      	subs	r3, #1
 810be5a:	4621      	mov	r1, r4
 810be5c:	2b07      	cmp	r3, #7
 810be5e:	dc0b      	bgt.n	810be78 <__gethex+0x17c>
 810be60:	ee18 0a10 	vmov	r0, s16
 810be64:	f000 fa82 	bl	810c36c <_Balloc>
 810be68:	4604      	mov	r4, r0
 810be6a:	b940      	cbnz	r0, 810be7e <__gethex+0x182>
 810be6c:	4b5d      	ldr	r3, [pc, #372]	; (810bfe4 <__gethex+0x2e8>)
 810be6e:	4602      	mov	r2, r0
 810be70:	21de      	movs	r1, #222	; 0xde
 810be72:	485d      	ldr	r0, [pc, #372]	; (810bfe8 <__gethex+0x2ec>)
 810be74:	f001 fc38 	bl	810d6e8 <__assert_func>
 810be78:	3101      	adds	r1, #1
 810be7a:	105b      	asrs	r3, r3, #1
 810be7c:	e7ee      	b.n	810be5c <__gethex+0x160>
 810be7e:	f100 0914 	add.w	r9, r0, #20
 810be82:	f04f 0b00 	mov.w	fp, #0
 810be86:	f1ca 0301 	rsb	r3, sl, #1
 810be8a:	f8cd 9008 	str.w	r9, [sp, #8]
 810be8e:	f8cd b000 	str.w	fp, [sp]
 810be92:	9306      	str	r3, [sp, #24]
 810be94:	42b7      	cmp	r7, r6
 810be96:	d340      	bcc.n	810bf1a <__gethex+0x21e>
 810be98:	9802      	ldr	r0, [sp, #8]
 810be9a:	9b00      	ldr	r3, [sp, #0]
 810be9c:	f840 3b04 	str.w	r3, [r0], #4
 810bea0:	eba0 0009 	sub.w	r0, r0, r9
 810bea4:	1080      	asrs	r0, r0, #2
 810bea6:	0146      	lsls	r6, r0, #5
 810bea8:	6120      	str	r0, [r4, #16]
 810beaa:	4618      	mov	r0, r3
 810beac:	f000 fb50 	bl	810c550 <__hi0bits>
 810beb0:	1a30      	subs	r0, r6, r0
 810beb2:	f8d8 6000 	ldr.w	r6, [r8]
 810beb6:	42b0      	cmp	r0, r6
 810beb8:	dd63      	ble.n	810bf82 <__gethex+0x286>
 810beba:	1b87      	subs	r7, r0, r6
 810bebc:	4639      	mov	r1, r7
 810bebe:	4620      	mov	r0, r4
 810bec0:	f000 fef4 	bl	810ccac <__any_on>
 810bec4:	4682      	mov	sl, r0
 810bec6:	b1a8      	cbz	r0, 810bef4 <__gethex+0x1f8>
 810bec8:	1e7b      	subs	r3, r7, #1
 810beca:	1159      	asrs	r1, r3, #5
 810becc:	f003 021f 	and.w	r2, r3, #31
 810bed0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 810bed4:	f04f 0a01 	mov.w	sl, #1
 810bed8:	fa0a f202 	lsl.w	r2, sl, r2
 810bedc:	420a      	tst	r2, r1
 810bede:	d009      	beq.n	810bef4 <__gethex+0x1f8>
 810bee0:	4553      	cmp	r3, sl
 810bee2:	dd05      	ble.n	810bef0 <__gethex+0x1f4>
 810bee4:	1eb9      	subs	r1, r7, #2
 810bee6:	4620      	mov	r0, r4
 810bee8:	f000 fee0 	bl	810ccac <__any_on>
 810beec:	2800      	cmp	r0, #0
 810beee:	d145      	bne.n	810bf7c <__gethex+0x280>
 810bef0:	f04f 0a02 	mov.w	sl, #2
 810bef4:	4639      	mov	r1, r7
 810bef6:	4620      	mov	r0, r4
 810bef8:	f7ff fe99 	bl	810bc2e <rshift>
 810befc:	443d      	add	r5, r7
 810befe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810bf02:	42ab      	cmp	r3, r5
 810bf04:	da4c      	bge.n	810bfa0 <__gethex+0x2a4>
 810bf06:	ee18 0a10 	vmov	r0, s16
 810bf0a:	4621      	mov	r1, r4
 810bf0c:	f000 fa6e 	bl	810c3ec <_Bfree>
 810bf10:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810bf12:	2300      	movs	r3, #0
 810bf14:	6013      	str	r3, [r2, #0]
 810bf16:	27a3      	movs	r7, #163	; 0xa3
 810bf18:	e785      	b.n	810be26 <__gethex+0x12a>
 810bf1a:	1e73      	subs	r3, r6, #1
 810bf1c:	9a05      	ldr	r2, [sp, #20]
 810bf1e:	9303      	str	r3, [sp, #12]
 810bf20:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 810bf24:	4293      	cmp	r3, r2
 810bf26:	d019      	beq.n	810bf5c <__gethex+0x260>
 810bf28:	f1bb 0f20 	cmp.w	fp, #32
 810bf2c:	d107      	bne.n	810bf3e <__gethex+0x242>
 810bf2e:	9b02      	ldr	r3, [sp, #8]
 810bf30:	9a00      	ldr	r2, [sp, #0]
 810bf32:	f843 2b04 	str.w	r2, [r3], #4
 810bf36:	9302      	str	r3, [sp, #8]
 810bf38:	2300      	movs	r3, #0
 810bf3a:	9300      	str	r3, [sp, #0]
 810bf3c:	469b      	mov	fp, r3
 810bf3e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 810bf42:	f7ff fec6 	bl	810bcd2 <__hexdig_fun>
 810bf46:	9b00      	ldr	r3, [sp, #0]
 810bf48:	f000 000f 	and.w	r0, r0, #15
 810bf4c:	fa00 f00b 	lsl.w	r0, r0, fp
 810bf50:	4303      	orrs	r3, r0
 810bf52:	9300      	str	r3, [sp, #0]
 810bf54:	f10b 0b04 	add.w	fp, fp, #4
 810bf58:	9b03      	ldr	r3, [sp, #12]
 810bf5a:	e00d      	b.n	810bf78 <__gethex+0x27c>
 810bf5c:	9b03      	ldr	r3, [sp, #12]
 810bf5e:	9a06      	ldr	r2, [sp, #24]
 810bf60:	4413      	add	r3, r2
 810bf62:	42bb      	cmp	r3, r7
 810bf64:	d3e0      	bcc.n	810bf28 <__gethex+0x22c>
 810bf66:	4618      	mov	r0, r3
 810bf68:	9901      	ldr	r1, [sp, #4]
 810bf6a:	9307      	str	r3, [sp, #28]
 810bf6c:	4652      	mov	r2, sl
 810bf6e:	f001 fac6 	bl	810d4fe <strncmp>
 810bf72:	9b07      	ldr	r3, [sp, #28]
 810bf74:	2800      	cmp	r0, #0
 810bf76:	d1d7      	bne.n	810bf28 <__gethex+0x22c>
 810bf78:	461e      	mov	r6, r3
 810bf7a:	e78b      	b.n	810be94 <__gethex+0x198>
 810bf7c:	f04f 0a03 	mov.w	sl, #3
 810bf80:	e7b8      	b.n	810bef4 <__gethex+0x1f8>
 810bf82:	da0a      	bge.n	810bf9a <__gethex+0x29e>
 810bf84:	1a37      	subs	r7, r6, r0
 810bf86:	4621      	mov	r1, r4
 810bf88:	ee18 0a10 	vmov	r0, s16
 810bf8c:	463a      	mov	r2, r7
 810bf8e:	f000 fc49 	bl	810c824 <__lshift>
 810bf92:	1bed      	subs	r5, r5, r7
 810bf94:	4604      	mov	r4, r0
 810bf96:	f100 0914 	add.w	r9, r0, #20
 810bf9a:	f04f 0a00 	mov.w	sl, #0
 810bf9e:	e7ae      	b.n	810befe <__gethex+0x202>
 810bfa0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 810bfa4:	42a8      	cmp	r0, r5
 810bfa6:	dd72      	ble.n	810c08e <__gethex+0x392>
 810bfa8:	1b45      	subs	r5, r0, r5
 810bfaa:	42ae      	cmp	r6, r5
 810bfac:	dc36      	bgt.n	810c01c <__gethex+0x320>
 810bfae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810bfb2:	2b02      	cmp	r3, #2
 810bfb4:	d02a      	beq.n	810c00c <__gethex+0x310>
 810bfb6:	2b03      	cmp	r3, #3
 810bfb8:	d02c      	beq.n	810c014 <__gethex+0x318>
 810bfba:	2b01      	cmp	r3, #1
 810bfbc:	d11c      	bne.n	810bff8 <__gethex+0x2fc>
 810bfbe:	42ae      	cmp	r6, r5
 810bfc0:	d11a      	bne.n	810bff8 <__gethex+0x2fc>
 810bfc2:	2e01      	cmp	r6, #1
 810bfc4:	d112      	bne.n	810bfec <__gethex+0x2f0>
 810bfc6:	9a04      	ldr	r2, [sp, #16]
 810bfc8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 810bfcc:	6013      	str	r3, [r2, #0]
 810bfce:	2301      	movs	r3, #1
 810bfd0:	6123      	str	r3, [r4, #16]
 810bfd2:	f8c9 3000 	str.w	r3, [r9]
 810bfd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810bfd8:	2762      	movs	r7, #98	; 0x62
 810bfda:	601c      	str	r4, [r3, #0]
 810bfdc:	e723      	b.n	810be26 <__gethex+0x12a>
 810bfde:	bf00      	nop
 810bfe0:	0810deec 	.word	0x0810deec
 810bfe4:	0810de10 	.word	0x0810de10
 810bfe8:	0810de84 	.word	0x0810de84
 810bfec:	1e71      	subs	r1, r6, #1
 810bfee:	4620      	mov	r0, r4
 810bff0:	f000 fe5c 	bl	810ccac <__any_on>
 810bff4:	2800      	cmp	r0, #0
 810bff6:	d1e6      	bne.n	810bfc6 <__gethex+0x2ca>
 810bff8:	ee18 0a10 	vmov	r0, s16
 810bffc:	4621      	mov	r1, r4
 810bffe:	f000 f9f5 	bl	810c3ec <_Bfree>
 810c002:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810c004:	2300      	movs	r3, #0
 810c006:	6013      	str	r3, [r2, #0]
 810c008:	2750      	movs	r7, #80	; 0x50
 810c00a:	e70c      	b.n	810be26 <__gethex+0x12a>
 810c00c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810c00e:	2b00      	cmp	r3, #0
 810c010:	d1f2      	bne.n	810bff8 <__gethex+0x2fc>
 810c012:	e7d8      	b.n	810bfc6 <__gethex+0x2ca>
 810c014:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810c016:	2b00      	cmp	r3, #0
 810c018:	d1d5      	bne.n	810bfc6 <__gethex+0x2ca>
 810c01a:	e7ed      	b.n	810bff8 <__gethex+0x2fc>
 810c01c:	1e6f      	subs	r7, r5, #1
 810c01e:	f1ba 0f00 	cmp.w	sl, #0
 810c022:	d131      	bne.n	810c088 <__gethex+0x38c>
 810c024:	b127      	cbz	r7, 810c030 <__gethex+0x334>
 810c026:	4639      	mov	r1, r7
 810c028:	4620      	mov	r0, r4
 810c02a:	f000 fe3f 	bl	810ccac <__any_on>
 810c02e:	4682      	mov	sl, r0
 810c030:	117b      	asrs	r3, r7, #5
 810c032:	2101      	movs	r1, #1
 810c034:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 810c038:	f007 071f 	and.w	r7, r7, #31
 810c03c:	fa01 f707 	lsl.w	r7, r1, r7
 810c040:	421f      	tst	r7, r3
 810c042:	4629      	mov	r1, r5
 810c044:	4620      	mov	r0, r4
 810c046:	bf18      	it	ne
 810c048:	f04a 0a02 	orrne.w	sl, sl, #2
 810c04c:	1b76      	subs	r6, r6, r5
 810c04e:	f7ff fdee 	bl	810bc2e <rshift>
 810c052:	f8d8 5004 	ldr.w	r5, [r8, #4]
 810c056:	2702      	movs	r7, #2
 810c058:	f1ba 0f00 	cmp.w	sl, #0
 810c05c:	d048      	beq.n	810c0f0 <__gethex+0x3f4>
 810c05e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810c062:	2b02      	cmp	r3, #2
 810c064:	d015      	beq.n	810c092 <__gethex+0x396>
 810c066:	2b03      	cmp	r3, #3
 810c068:	d017      	beq.n	810c09a <__gethex+0x39e>
 810c06a:	2b01      	cmp	r3, #1
 810c06c:	d109      	bne.n	810c082 <__gethex+0x386>
 810c06e:	f01a 0f02 	tst.w	sl, #2
 810c072:	d006      	beq.n	810c082 <__gethex+0x386>
 810c074:	f8d9 0000 	ldr.w	r0, [r9]
 810c078:	ea4a 0a00 	orr.w	sl, sl, r0
 810c07c:	f01a 0f01 	tst.w	sl, #1
 810c080:	d10e      	bne.n	810c0a0 <__gethex+0x3a4>
 810c082:	f047 0710 	orr.w	r7, r7, #16
 810c086:	e033      	b.n	810c0f0 <__gethex+0x3f4>
 810c088:	f04f 0a01 	mov.w	sl, #1
 810c08c:	e7d0      	b.n	810c030 <__gethex+0x334>
 810c08e:	2701      	movs	r7, #1
 810c090:	e7e2      	b.n	810c058 <__gethex+0x35c>
 810c092:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810c094:	f1c3 0301 	rsb	r3, r3, #1
 810c098:	9315      	str	r3, [sp, #84]	; 0x54
 810c09a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810c09c:	2b00      	cmp	r3, #0
 810c09e:	d0f0      	beq.n	810c082 <__gethex+0x386>
 810c0a0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 810c0a4:	f104 0314 	add.w	r3, r4, #20
 810c0a8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 810c0ac:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 810c0b0:	f04f 0c00 	mov.w	ip, #0
 810c0b4:	4618      	mov	r0, r3
 810c0b6:	f853 2b04 	ldr.w	r2, [r3], #4
 810c0ba:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 810c0be:	d01c      	beq.n	810c0fa <__gethex+0x3fe>
 810c0c0:	3201      	adds	r2, #1
 810c0c2:	6002      	str	r2, [r0, #0]
 810c0c4:	2f02      	cmp	r7, #2
 810c0c6:	f104 0314 	add.w	r3, r4, #20
 810c0ca:	d13f      	bne.n	810c14c <__gethex+0x450>
 810c0cc:	f8d8 2000 	ldr.w	r2, [r8]
 810c0d0:	3a01      	subs	r2, #1
 810c0d2:	42b2      	cmp	r2, r6
 810c0d4:	d10a      	bne.n	810c0ec <__gethex+0x3f0>
 810c0d6:	1171      	asrs	r1, r6, #5
 810c0d8:	2201      	movs	r2, #1
 810c0da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 810c0de:	f006 061f 	and.w	r6, r6, #31
 810c0e2:	fa02 f606 	lsl.w	r6, r2, r6
 810c0e6:	421e      	tst	r6, r3
 810c0e8:	bf18      	it	ne
 810c0ea:	4617      	movne	r7, r2
 810c0ec:	f047 0720 	orr.w	r7, r7, #32
 810c0f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810c0f2:	601c      	str	r4, [r3, #0]
 810c0f4:	9b04      	ldr	r3, [sp, #16]
 810c0f6:	601d      	str	r5, [r3, #0]
 810c0f8:	e695      	b.n	810be26 <__gethex+0x12a>
 810c0fa:	4299      	cmp	r1, r3
 810c0fc:	f843 cc04 	str.w	ip, [r3, #-4]
 810c100:	d8d8      	bhi.n	810c0b4 <__gethex+0x3b8>
 810c102:	68a3      	ldr	r3, [r4, #8]
 810c104:	459b      	cmp	fp, r3
 810c106:	db19      	blt.n	810c13c <__gethex+0x440>
 810c108:	6861      	ldr	r1, [r4, #4]
 810c10a:	ee18 0a10 	vmov	r0, s16
 810c10e:	3101      	adds	r1, #1
 810c110:	f000 f92c 	bl	810c36c <_Balloc>
 810c114:	4681      	mov	r9, r0
 810c116:	b918      	cbnz	r0, 810c120 <__gethex+0x424>
 810c118:	4b1a      	ldr	r3, [pc, #104]	; (810c184 <__gethex+0x488>)
 810c11a:	4602      	mov	r2, r0
 810c11c:	2184      	movs	r1, #132	; 0x84
 810c11e:	e6a8      	b.n	810be72 <__gethex+0x176>
 810c120:	6922      	ldr	r2, [r4, #16]
 810c122:	3202      	adds	r2, #2
 810c124:	f104 010c 	add.w	r1, r4, #12
 810c128:	0092      	lsls	r2, r2, #2
 810c12a:	300c      	adds	r0, #12
 810c12c:	f000 f910 	bl	810c350 <memcpy>
 810c130:	4621      	mov	r1, r4
 810c132:	ee18 0a10 	vmov	r0, s16
 810c136:	f000 f959 	bl	810c3ec <_Bfree>
 810c13a:	464c      	mov	r4, r9
 810c13c:	6923      	ldr	r3, [r4, #16]
 810c13e:	1c5a      	adds	r2, r3, #1
 810c140:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 810c144:	6122      	str	r2, [r4, #16]
 810c146:	2201      	movs	r2, #1
 810c148:	615a      	str	r2, [r3, #20]
 810c14a:	e7bb      	b.n	810c0c4 <__gethex+0x3c8>
 810c14c:	6922      	ldr	r2, [r4, #16]
 810c14e:	455a      	cmp	r2, fp
 810c150:	dd0b      	ble.n	810c16a <__gethex+0x46e>
 810c152:	2101      	movs	r1, #1
 810c154:	4620      	mov	r0, r4
 810c156:	f7ff fd6a 	bl	810bc2e <rshift>
 810c15a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810c15e:	3501      	adds	r5, #1
 810c160:	42ab      	cmp	r3, r5
 810c162:	f6ff aed0 	blt.w	810bf06 <__gethex+0x20a>
 810c166:	2701      	movs	r7, #1
 810c168:	e7c0      	b.n	810c0ec <__gethex+0x3f0>
 810c16a:	f016 061f 	ands.w	r6, r6, #31
 810c16e:	d0fa      	beq.n	810c166 <__gethex+0x46a>
 810c170:	4453      	add	r3, sl
 810c172:	f1c6 0620 	rsb	r6, r6, #32
 810c176:	f853 0c04 	ldr.w	r0, [r3, #-4]
 810c17a:	f000 f9e9 	bl	810c550 <__hi0bits>
 810c17e:	42b0      	cmp	r0, r6
 810c180:	dbe7      	blt.n	810c152 <__gethex+0x456>
 810c182:	e7f0      	b.n	810c166 <__gethex+0x46a>
 810c184:	0810de10 	.word	0x0810de10

0810c188 <L_shift>:
 810c188:	f1c2 0208 	rsb	r2, r2, #8
 810c18c:	0092      	lsls	r2, r2, #2
 810c18e:	b570      	push	{r4, r5, r6, lr}
 810c190:	f1c2 0620 	rsb	r6, r2, #32
 810c194:	6843      	ldr	r3, [r0, #4]
 810c196:	6804      	ldr	r4, [r0, #0]
 810c198:	fa03 f506 	lsl.w	r5, r3, r6
 810c19c:	432c      	orrs	r4, r5
 810c19e:	40d3      	lsrs	r3, r2
 810c1a0:	6004      	str	r4, [r0, #0]
 810c1a2:	f840 3f04 	str.w	r3, [r0, #4]!
 810c1a6:	4288      	cmp	r0, r1
 810c1a8:	d3f4      	bcc.n	810c194 <L_shift+0xc>
 810c1aa:	bd70      	pop	{r4, r5, r6, pc}

0810c1ac <__match>:
 810c1ac:	b530      	push	{r4, r5, lr}
 810c1ae:	6803      	ldr	r3, [r0, #0]
 810c1b0:	3301      	adds	r3, #1
 810c1b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 810c1b6:	b914      	cbnz	r4, 810c1be <__match+0x12>
 810c1b8:	6003      	str	r3, [r0, #0]
 810c1ba:	2001      	movs	r0, #1
 810c1bc:	bd30      	pop	{r4, r5, pc}
 810c1be:	f813 2b01 	ldrb.w	r2, [r3], #1
 810c1c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 810c1c6:	2d19      	cmp	r5, #25
 810c1c8:	bf98      	it	ls
 810c1ca:	3220      	addls	r2, #32
 810c1cc:	42a2      	cmp	r2, r4
 810c1ce:	d0f0      	beq.n	810c1b2 <__match+0x6>
 810c1d0:	2000      	movs	r0, #0
 810c1d2:	e7f3      	b.n	810c1bc <__match+0x10>

0810c1d4 <__hexnan>:
 810c1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c1d8:	680b      	ldr	r3, [r1, #0]
 810c1da:	115e      	asrs	r6, r3, #5
 810c1dc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 810c1e0:	f013 031f 	ands.w	r3, r3, #31
 810c1e4:	b087      	sub	sp, #28
 810c1e6:	bf18      	it	ne
 810c1e8:	3604      	addne	r6, #4
 810c1ea:	2500      	movs	r5, #0
 810c1ec:	1f37      	subs	r7, r6, #4
 810c1ee:	4690      	mov	r8, r2
 810c1f0:	6802      	ldr	r2, [r0, #0]
 810c1f2:	9301      	str	r3, [sp, #4]
 810c1f4:	4682      	mov	sl, r0
 810c1f6:	f846 5c04 	str.w	r5, [r6, #-4]
 810c1fa:	46b9      	mov	r9, r7
 810c1fc:	463c      	mov	r4, r7
 810c1fe:	9502      	str	r5, [sp, #8]
 810c200:	46ab      	mov	fp, r5
 810c202:	7851      	ldrb	r1, [r2, #1]
 810c204:	1c53      	adds	r3, r2, #1
 810c206:	9303      	str	r3, [sp, #12]
 810c208:	b341      	cbz	r1, 810c25c <__hexnan+0x88>
 810c20a:	4608      	mov	r0, r1
 810c20c:	9205      	str	r2, [sp, #20]
 810c20e:	9104      	str	r1, [sp, #16]
 810c210:	f7ff fd5f 	bl	810bcd2 <__hexdig_fun>
 810c214:	2800      	cmp	r0, #0
 810c216:	d14f      	bne.n	810c2b8 <__hexnan+0xe4>
 810c218:	9904      	ldr	r1, [sp, #16]
 810c21a:	9a05      	ldr	r2, [sp, #20]
 810c21c:	2920      	cmp	r1, #32
 810c21e:	d818      	bhi.n	810c252 <__hexnan+0x7e>
 810c220:	9b02      	ldr	r3, [sp, #8]
 810c222:	459b      	cmp	fp, r3
 810c224:	dd13      	ble.n	810c24e <__hexnan+0x7a>
 810c226:	454c      	cmp	r4, r9
 810c228:	d206      	bcs.n	810c238 <__hexnan+0x64>
 810c22a:	2d07      	cmp	r5, #7
 810c22c:	dc04      	bgt.n	810c238 <__hexnan+0x64>
 810c22e:	462a      	mov	r2, r5
 810c230:	4649      	mov	r1, r9
 810c232:	4620      	mov	r0, r4
 810c234:	f7ff ffa8 	bl	810c188 <L_shift>
 810c238:	4544      	cmp	r4, r8
 810c23a:	d950      	bls.n	810c2de <__hexnan+0x10a>
 810c23c:	2300      	movs	r3, #0
 810c23e:	f1a4 0904 	sub.w	r9, r4, #4
 810c242:	f844 3c04 	str.w	r3, [r4, #-4]
 810c246:	f8cd b008 	str.w	fp, [sp, #8]
 810c24a:	464c      	mov	r4, r9
 810c24c:	461d      	mov	r5, r3
 810c24e:	9a03      	ldr	r2, [sp, #12]
 810c250:	e7d7      	b.n	810c202 <__hexnan+0x2e>
 810c252:	2929      	cmp	r1, #41	; 0x29
 810c254:	d156      	bne.n	810c304 <__hexnan+0x130>
 810c256:	3202      	adds	r2, #2
 810c258:	f8ca 2000 	str.w	r2, [sl]
 810c25c:	f1bb 0f00 	cmp.w	fp, #0
 810c260:	d050      	beq.n	810c304 <__hexnan+0x130>
 810c262:	454c      	cmp	r4, r9
 810c264:	d206      	bcs.n	810c274 <__hexnan+0xa0>
 810c266:	2d07      	cmp	r5, #7
 810c268:	dc04      	bgt.n	810c274 <__hexnan+0xa0>
 810c26a:	462a      	mov	r2, r5
 810c26c:	4649      	mov	r1, r9
 810c26e:	4620      	mov	r0, r4
 810c270:	f7ff ff8a 	bl	810c188 <L_shift>
 810c274:	4544      	cmp	r4, r8
 810c276:	d934      	bls.n	810c2e2 <__hexnan+0x10e>
 810c278:	f1a8 0204 	sub.w	r2, r8, #4
 810c27c:	4623      	mov	r3, r4
 810c27e:	f853 1b04 	ldr.w	r1, [r3], #4
 810c282:	f842 1f04 	str.w	r1, [r2, #4]!
 810c286:	429f      	cmp	r7, r3
 810c288:	d2f9      	bcs.n	810c27e <__hexnan+0xaa>
 810c28a:	1b3b      	subs	r3, r7, r4
 810c28c:	f023 0303 	bic.w	r3, r3, #3
 810c290:	3304      	adds	r3, #4
 810c292:	3401      	adds	r4, #1
 810c294:	3e03      	subs	r6, #3
 810c296:	42b4      	cmp	r4, r6
 810c298:	bf88      	it	hi
 810c29a:	2304      	movhi	r3, #4
 810c29c:	4443      	add	r3, r8
 810c29e:	2200      	movs	r2, #0
 810c2a0:	f843 2b04 	str.w	r2, [r3], #4
 810c2a4:	429f      	cmp	r7, r3
 810c2a6:	d2fb      	bcs.n	810c2a0 <__hexnan+0xcc>
 810c2a8:	683b      	ldr	r3, [r7, #0]
 810c2aa:	b91b      	cbnz	r3, 810c2b4 <__hexnan+0xe0>
 810c2ac:	4547      	cmp	r7, r8
 810c2ae:	d127      	bne.n	810c300 <__hexnan+0x12c>
 810c2b0:	2301      	movs	r3, #1
 810c2b2:	603b      	str	r3, [r7, #0]
 810c2b4:	2005      	movs	r0, #5
 810c2b6:	e026      	b.n	810c306 <__hexnan+0x132>
 810c2b8:	3501      	adds	r5, #1
 810c2ba:	2d08      	cmp	r5, #8
 810c2bc:	f10b 0b01 	add.w	fp, fp, #1
 810c2c0:	dd06      	ble.n	810c2d0 <__hexnan+0xfc>
 810c2c2:	4544      	cmp	r4, r8
 810c2c4:	d9c3      	bls.n	810c24e <__hexnan+0x7a>
 810c2c6:	2300      	movs	r3, #0
 810c2c8:	f844 3c04 	str.w	r3, [r4, #-4]
 810c2cc:	2501      	movs	r5, #1
 810c2ce:	3c04      	subs	r4, #4
 810c2d0:	6822      	ldr	r2, [r4, #0]
 810c2d2:	f000 000f 	and.w	r0, r0, #15
 810c2d6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 810c2da:	6022      	str	r2, [r4, #0]
 810c2dc:	e7b7      	b.n	810c24e <__hexnan+0x7a>
 810c2de:	2508      	movs	r5, #8
 810c2e0:	e7b5      	b.n	810c24e <__hexnan+0x7a>
 810c2e2:	9b01      	ldr	r3, [sp, #4]
 810c2e4:	2b00      	cmp	r3, #0
 810c2e6:	d0df      	beq.n	810c2a8 <__hexnan+0xd4>
 810c2e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810c2ec:	f1c3 0320 	rsb	r3, r3, #32
 810c2f0:	fa22 f303 	lsr.w	r3, r2, r3
 810c2f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 810c2f8:	401a      	ands	r2, r3
 810c2fa:	f846 2c04 	str.w	r2, [r6, #-4]
 810c2fe:	e7d3      	b.n	810c2a8 <__hexnan+0xd4>
 810c300:	3f04      	subs	r7, #4
 810c302:	e7d1      	b.n	810c2a8 <__hexnan+0xd4>
 810c304:	2004      	movs	r0, #4
 810c306:	b007      	add	sp, #28
 810c308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810c30c <_localeconv_r>:
 810c30c:	4800      	ldr	r0, [pc, #0]	; (810c310 <_localeconv_r+0x4>)
 810c30e:	4770      	bx	lr
 810c310:	10000184 	.word	0x10000184

0810c314 <__retarget_lock_init_recursive>:
 810c314:	4770      	bx	lr

0810c316 <__retarget_lock_acquire_recursive>:
 810c316:	4770      	bx	lr

0810c318 <__retarget_lock_release_recursive>:
 810c318:	4770      	bx	lr
	...

0810c31c <malloc>:
 810c31c:	4b02      	ldr	r3, [pc, #8]	; (810c328 <malloc+0xc>)
 810c31e:	4601      	mov	r1, r0
 810c320:	6818      	ldr	r0, [r3, #0]
 810c322:	f000 bd67 	b.w	810cdf4 <_malloc_r>
 810c326:	bf00      	nop
 810c328:	1000002c 	.word	0x1000002c

0810c32c <__ascii_mbtowc>:
 810c32c:	b082      	sub	sp, #8
 810c32e:	b901      	cbnz	r1, 810c332 <__ascii_mbtowc+0x6>
 810c330:	a901      	add	r1, sp, #4
 810c332:	b142      	cbz	r2, 810c346 <__ascii_mbtowc+0x1a>
 810c334:	b14b      	cbz	r3, 810c34a <__ascii_mbtowc+0x1e>
 810c336:	7813      	ldrb	r3, [r2, #0]
 810c338:	600b      	str	r3, [r1, #0]
 810c33a:	7812      	ldrb	r2, [r2, #0]
 810c33c:	1e10      	subs	r0, r2, #0
 810c33e:	bf18      	it	ne
 810c340:	2001      	movne	r0, #1
 810c342:	b002      	add	sp, #8
 810c344:	4770      	bx	lr
 810c346:	4610      	mov	r0, r2
 810c348:	e7fb      	b.n	810c342 <__ascii_mbtowc+0x16>
 810c34a:	f06f 0001 	mvn.w	r0, #1
 810c34e:	e7f8      	b.n	810c342 <__ascii_mbtowc+0x16>

0810c350 <memcpy>:
 810c350:	440a      	add	r2, r1
 810c352:	4291      	cmp	r1, r2
 810c354:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 810c358:	d100      	bne.n	810c35c <memcpy+0xc>
 810c35a:	4770      	bx	lr
 810c35c:	b510      	push	{r4, lr}
 810c35e:	f811 4b01 	ldrb.w	r4, [r1], #1
 810c362:	f803 4f01 	strb.w	r4, [r3, #1]!
 810c366:	4291      	cmp	r1, r2
 810c368:	d1f9      	bne.n	810c35e <memcpy+0xe>
 810c36a:	bd10      	pop	{r4, pc}

0810c36c <_Balloc>:
 810c36c:	b570      	push	{r4, r5, r6, lr}
 810c36e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810c370:	4604      	mov	r4, r0
 810c372:	460d      	mov	r5, r1
 810c374:	b976      	cbnz	r6, 810c394 <_Balloc+0x28>
 810c376:	2010      	movs	r0, #16
 810c378:	f7ff ffd0 	bl	810c31c <malloc>
 810c37c:	4602      	mov	r2, r0
 810c37e:	6260      	str	r0, [r4, #36]	; 0x24
 810c380:	b920      	cbnz	r0, 810c38c <_Balloc+0x20>
 810c382:	4b18      	ldr	r3, [pc, #96]	; (810c3e4 <_Balloc+0x78>)
 810c384:	4818      	ldr	r0, [pc, #96]	; (810c3e8 <_Balloc+0x7c>)
 810c386:	2166      	movs	r1, #102	; 0x66
 810c388:	f001 f9ae 	bl	810d6e8 <__assert_func>
 810c38c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810c390:	6006      	str	r6, [r0, #0]
 810c392:	60c6      	str	r6, [r0, #12]
 810c394:	6a66      	ldr	r6, [r4, #36]	; 0x24
 810c396:	68f3      	ldr	r3, [r6, #12]
 810c398:	b183      	cbz	r3, 810c3bc <_Balloc+0x50>
 810c39a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810c39c:	68db      	ldr	r3, [r3, #12]
 810c39e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810c3a2:	b9b8      	cbnz	r0, 810c3d4 <_Balloc+0x68>
 810c3a4:	2101      	movs	r1, #1
 810c3a6:	fa01 f605 	lsl.w	r6, r1, r5
 810c3aa:	1d72      	adds	r2, r6, #5
 810c3ac:	0092      	lsls	r2, r2, #2
 810c3ae:	4620      	mov	r0, r4
 810c3b0:	f000 fc9d 	bl	810ccee <_calloc_r>
 810c3b4:	b160      	cbz	r0, 810c3d0 <_Balloc+0x64>
 810c3b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 810c3ba:	e00e      	b.n	810c3da <_Balloc+0x6e>
 810c3bc:	2221      	movs	r2, #33	; 0x21
 810c3be:	2104      	movs	r1, #4
 810c3c0:	4620      	mov	r0, r4
 810c3c2:	f000 fc94 	bl	810ccee <_calloc_r>
 810c3c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810c3c8:	60f0      	str	r0, [r6, #12]
 810c3ca:	68db      	ldr	r3, [r3, #12]
 810c3cc:	2b00      	cmp	r3, #0
 810c3ce:	d1e4      	bne.n	810c39a <_Balloc+0x2e>
 810c3d0:	2000      	movs	r0, #0
 810c3d2:	bd70      	pop	{r4, r5, r6, pc}
 810c3d4:	6802      	ldr	r2, [r0, #0]
 810c3d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 810c3da:	2300      	movs	r3, #0
 810c3dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810c3e0:	e7f7      	b.n	810c3d2 <_Balloc+0x66>
 810c3e2:	bf00      	nop
 810c3e4:	0810dd9e 	.word	0x0810dd9e
 810c3e8:	0810df00 	.word	0x0810df00

0810c3ec <_Bfree>:
 810c3ec:	b570      	push	{r4, r5, r6, lr}
 810c3ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810c3f0:	4605      	mov	r5, r0
 810c3f2:	460c      	mov	r4, r1
 810c3f4:	b976      	cbnz	r6, 810c414 <_Bfree+0x28>
 810c3f6:	2010      	movs	r0, #16
 810c3f8:	f7ff ff90 	bl	810c31c <malloc>
 810c3fc:	4602      	mov	r2, r0
 810c3fe:	6268      	str	r0, [r5, #36]	; 0x24
 810c400:	b920      	cbnz	r0, 810c40c <_Bfree+0x20>
 810c402:	4b09      	ldr	r3, [pc, #36]	; (810c428 <_Bfree+0x3c>)
 810c404:	4809      	ldr	r0, [pc, #36]	; (810c42c <_Bfree+0x40>)
 810c406:	218a      	movs	r1, #138	; 0x8a
 810c408:	f001 f96e 	bl	810d6e8 <__assert_func>
 810c40c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810c410:	6006      	str	r6, [r0, #0]
 810c412:	60c6      	str	r6, [r0, #12]
 810c414:	b13c      	cbz	r4, 810c426 <_Bfree+0x3a>
 810c416:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 810c418:	6862      	ldr	r2, [r4, #4]
 810c41a:	68db      	ldr	r3, [r3, #12]
 810c41c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810c420:	6021      	str	r1, [r4, #0]
 810c422:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810c426:	bd70      	pop	{r4, r5, r6, pc}
 810c428:	0810dd9e 	.word	0x0810dd9e
 810c42c:	0810df00 	.word	0x0810df00

0810c430 <__multadd>:
 810c430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810c434:	690d      	ldr	r5, [r1, #16]
 810c436:	4607      	mov	r7, r0
 810c438:	460c      	mov	r4, r1
 810c43a:	461e      	mov	r6, r3
 810c43c:	f101 0c14 	add.w	ip, r1, #20
 810c440:	2000      	movs	r0, #0
 810c442:	f8dc 3000 	ldr.w	r3, [ip]
 810c446:	b299      	uxth	r1, r3
 810c448:	fb02 6101 	mla	r1, r2, r1, r6
 810c44c:	0c1e      	lsrs	r6, r3, #16
 810c44e:	0c0b      	lsrs	r3, r1, #16
 810c450:	fb02 3306 	mla	r3, r2, r6, r3
 810c454:	b289      	uxth	r1, r1
 810c456:	3001      	adds	r0, #1
 810c458:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 810c45c:	4285      	cmp	r5, r0
 810c45e:	f84c 1b04 	str.w	r1, [ip], #4
 810c462:	ea4f 4613 	mov.w	r6, r3, lsr #16
 810c466:	dcec      	bgt.n	810c442 <__multadd+0x12>
 810c468:	b30e      	cbz	r6, 810c4ae <__multadd+0x7e>
 810c46a:	68a3      	ldr	r3, [r4, #8]
 810c46c:	42ab      	cmp	r3, r5
 810c46e:	dc19      	bgt.n	810c4a4 <__multadd+0x74>
 810c470:	6861      	ldr	r1, [r4, #4]
 810c472:	4638      	mov	r0, r7
 810c474:	3101      	adds	r1, #1
 810c476:	f7ff ff79 	bl	810c36c <_Balloc>
 810c47a:	4680      	mov	r8, r0
 810c47c:	b928      	cbnz	r0, 810c48a <__multadd+0x5a>
 810c47e:	4602      	mov	r2, r0
 810c480:	4b0c      	ldr	r3, [pc, #48]	; (810c4b4 <__multadd+0x84>)
 810c482:	480d      	ldr	r0, [pc, #52]	; (810c4b8 <__multadd+0x88>)
 810c484:	21b5      	movs	r1, #181	; 0xb5
 810c486:	f001 f92f 	bl	810d6e8 <__assert_func>
 810c48a:	6922      	ldr	r2, [r4, #16]
 810c48c:	3202      	adds	r2, #2
 810c48e:	f104 010c 	add.w	r1, r4, #12
 810c492:	0092      	lsls	r2, r2, #2
 810c494:	300c      	adds	r0, #12
 810c496:	f7ff ff5b 	bl	810c350 <memcpy>
 810c49a:	4621      	mov	r1, r4
 810c49c:	4638      	mov	r0, r7
 810c49e:	f7ff ffa5 	bl	810c3ec <_Bfree>
 810c4a2:	4644      	mov	r4, r8
 810c4a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 810c4a8:	3501      	adds	r5, #1
 810c4aa:	615e      	str	r6, [r3, #20]
 810c4ac:	6125      	str	r5, [r4, #16]
 810c4ae:	4620      	mov	r0, r4
 810c4b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810c4b4:	0810de10 	.word	0x0810de10
 810c4b8:	0810df00 	.word	0x0810df00

0810c4bc <__s2b>:
 810c4bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810c4c0:	460c      	mov	r4, r1
 810c4c2:	4615      	mov	r5, r2
 810c4c4:	461f      	mov	r7, r3
 810c4c6:	2209      	movs	r2, #9
 810c4c8:	3308      	adds	r3, #8
 810c4ca:	4606      	mov	r6, r0
 810c4cc:	fb93 f3f2 	sdiv	r3, r3, r2
 810c4d0:	2100      	movs	r1, #0
 810c4d2:	2201      	movs	r2, #1
 810c4d4:	429a      	cmp	r2, r3
 810c4d6:	db09      	blt.n	810c4ec <__s2b+0x30>
 810c4d8:	4630      	mov	r0, r6
 810c4da:	f7ff ff47 	bl	810c36c <_Balloc>
 810c4de:	b940      	cbnz	r0, 810c4f2 <__s2b+0x36>
 810c4e0:	4602      	mov	r2, r0
 810c4e2:	4b19      	ldr	r3, [pc, #100]	; (810c548 <__s2b+0x8c>)
 810c4e4:	4819      	ldr	r0, [pc, #100]	; (810c54c <__s2b+0x90>)
 810c4e6:	21ce      	movs	r1, #206	; 0xce
 810c4e8:	f001 f8fe 	bl	810d6e8 <__assert_func>
 810c4ec:	0052      	lsls	r2, r2, #1
 810c4ee:	3101      	adds	r1, #1
 810c4f0:	e7f0      	b.n	810c4d4 <__s2b+0x18>
 810c4f2:	9b08      	ldr	r3, [sp, #32]
 810c4f4:	6143      	str	r3, [r0, #20]
 810c4f6:	2d09      	cmp	r5, #9
 810c4f8:	f04f 0301 	mov.w	r3, #1
 810c4fc:	6103      	str	r3, [r0, #16]
 810c4fe:	dd16      	ble.n	810c52e <__s2b+0x72>
 810c500:	f104 0909 	add.w	r9, r4, #9
 810c504:	46c8      	mov	r8, r9
 810c506:	442c      	add	r4, r5
 810c508:	f818 3b01 	ldrb.w	r3, [r8], #1
 810c50c:	4601      	mov	r1, r0
 810c50e:	3b30      	subs	r3, #48	; 0x30
 810c510:	220a      	movs	r2, #10
 810c512:	4630      	mov	r0, r6
 810c514:	f7ff ff8c 	bl	810c430 <__multadd>
 810c518:	45a0      	cmp	r8, r4
 810c51a:	d1f5      	bne.n	810c508 <__s2b+0x4c>
 810c51c:	f1a5 0408 	sub.w	r4, r5, #8
 810c520:	444c      	add	r4, r9
 810c522:	1b2d      	subs	r5, r5, r4
 810c524:	1963      	adds	r3, r4, r5
 810c526:	42bb      	cmp	r3, r7
 810c528:	db04      	blt.n	810c534 <__s2b+0x78>
 810c52a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810c52e:	340a      	adds	r4, #10
 810c530:	2509      	movs	r5, #9
 810c532:	e7f6      	b.n	810c522 <__s2b+0x66>
 810c534:	f814 3b01 	ldrb.w	r3, [r4], #1
 810c538:	4601      	mov	r1, r0
 810c53a:	3b30      	subs	r3, #48	; 0x30
 810c53c:	220a      	movs	r2, #10
 810c53e:	4630      	mov	r0, r6
 810c540:	f7ff ff76 	bl	810c430 <__multadd>
 810c544:	e7ee      	b.n	810c524 <__s2b+0x68>
 810c546:	bf00      	nop
 810c548:	0810de10 	.word	0x0810de10
 810c54c:	0810df00 	.word	0x0810df00

0810c550 <__hi0bits>:
 810c550:	0c03      	lsrs	r3, r0, #16
 810c552:	041b      	lsls	r3, r3, #16
 810c554:	b9d3      	cbnz	r3, 810c58c <__hi0bits+0x3c>
 810c556:	0400      	lsls	r0, r0, #16
 810c558:	2310      	movs	r3, #16
 810c55a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 810c55e:	bf04      	itt	eq
 810c560:	0200      	lsleq	r0, r0, #8
 810c562:	3308      	addeq	r3, #8
 810c564:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 810c568:	bf04      	itt	eq
 810c56a:	0100      	lsleq	r0, r0, #4
 810c56c:	3304      	addeq	r3, #4
 810c56e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 810c572:	bf04      	itt	eq
 810c574:	0080      	lsleq	r0, r0, #2
 810c576:	3302      	addeq	r3, #2
 810c578:	2800      	cmp	r0, #0
 810c57a:	db05      	blt.n	810c588 <__hi0bits+0x38>
 810c57c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 810c580:	f103 0301 	add.w	r3, r3, #1
 810c584:	bf08      	it	eq
 810c586:	2320      	moveq	r3, #32
 810c588:	4618      	mov	r0, r3
 810c58a:	4770      	bx	lr
 810c58c:	2300      	movs	r3, #0
 810c58e:	e7e4      	b.n	810c55a <__hi0bits+0xa>

0810c590 <__lo0bits>:
 810c590:	6803      	ldr	r3, [r0, #0]
 810c592:	f013 0207 	ands.w	r2, r3, #7
 810c596:	4601      	mov	r1, r0
 810c598:	d00b      	beq.n	810c5b2 <__lo0bits+0x22>
 810c59a:	07da      	lsls	r2, r3, #31
 810c59c:	d423      	bmi.n	810c5e6 <__lo0bits+0x56>
 810c59e:	0798      	lsls	r0, r3, #30
 810c5a0:	bf49      	itett	mi
 810c5a2:	085b      	lsrmi	r3, r3, #1
 810c5a4:	089b      	lsrpl	r3, r3, #2
 810c5a6:	2001      	movmi	r0, #1
 810c5a8:	600b      	strmi	r3, [r1, #0]
 810c5aa:	bf5c      	itt	pl
 810c5ac:	600b      	strpl	r3, [r1, #0]
 810c5ae:	2002      	movpl	r0, #2
 810c5b0:	4770      	bx	lr
 810c5b2:	b298      	uxth	r0, r3
 810c5b4:	b9a8      	cbnz	r0, 810c5e2 <__lo0bits+0x52>
 810c5b6:	0c1b      	lsrs	r3, r3, #16
 810c5b8:	2010      	movs	r0, #16
 810c5ba:	b2da      	uxtb	r2, r3
 810c5bc:	b90a      	cbnz	r2, 810c5c2 <__lo0bits+0x32>
 810c5be:	3008      	adds	r0, #8
 810c5c0:	0a1b      	lsrs	r3, r3, #8
 810c5c2:	071a      	lsls	r2, r3, #28
 810c5c4:	bf04      	itt	eq
 810c5c6:	091b      	lsreq	r3, r3, #4
 810c5c8:	3004      	addeq	r0, #4
 810c5ca:	079a      	lsls	r2, r3, #30
 810c5cc:	bf04      	itt	eq
 810c5ce:	089b      	lsreq	r3, r3, #2
 810c5d0:	3002      	addeq	r0, #2
 810c5d2:	07da      	lsls	r2, r3, #31
 810c5d4:	d403      	bmi.n	810c5de <__lo0bits+0x4e>
 810c5d6:	085b      	lsrs	r3, r3, #1
 810c5d8:	f100 0001 	add.w	r0, r0, #1
 810c5dc:	d005      	beq.n	810c5ea <__lo0bits+0x5a>
 810c5de:	600b      	str	r3, [r1, #0]
 810c5e0:	4770      	bx	lr
 810c5e2:	4610      	mov	r0, r2
 810c5e4:	e7e9      	b.n	810c5ba <__lo0bits+0x2a>
 810c5e6:	2000      	movs	r0, #0
 810c5e8:	4770      	bx	lr
 810c5ea:	2020      	movs	r0, #32
 810c5ec:	4770      	bx	lr
	...

0810c5f0 <__i2b>:
 810c5f0:	b510      	push	{r4, lr}
 810c5f2:	460c      	mov	r4, r1
 810c5f4:	2101      	movs	r1, #1
 810c5f6:	f7ff feb9 	bl	810c36c <_Balloc>
 810c5fa:	4602      	mov	r2, r0
 810c5fc:	b928      	cbnz	r0, 810c60a <__i2b+0x1a>
 810c5fe:	4b05      	ldr	r3, [pc, #20]	; (810c614 <__i2b+0x24>)
 810c600:	4805      	ldr	r0, [pc, #20]	; (810c618 <__i2b+0x28>)
 810c602:	f44f 71a0 	mov.w	r1, #320	; 0x140
 810c606:	f001 f86f 	bl	810d6e8 <__assert_func>
 810c60a:	2301      	movs	r3, #1
 810c60c:	6144      	str	r4, [r0, #20]
 810c60e:	6103      	str	r3, [r0, #16]
 810c610:	bd10      	pop	{r4, pc}
 810c612:	bf00      	nop
 810c614:	0810de10 	.word	0x0810de10
 810c618:	0810df00 	.word	0x0810df00

0810c61c <__multiply>:
 810c61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c620:	4691      	mov	r9, r2
 810c622:	690a      	ldr	r2, [r1, #16]
 810c624:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810c628:	429a      	cmp	r2, r3
 810c62a:	bfb8      	it	lt
 810c62c:	460b      	movlt	r3, r1
 810c62e:	460c      	mov	r4, r1
 810c630:	bfbc      	itt	lt
 810c632:	464c      	movlt	r4, r9
 810c634:	4699      	movlt	r9, r3
 810c636:	6927      	ldr	r7, [r4, #16]
 810c638:	f8d9 a010 	ldr.w	sl, [r9, #16]
 810c63c:	68a3      	ldr	r3, [r4, #8]
 810c63e:	6861      	ldr	r1, [r4, #4]
 810c640:	eb07 060a 	add.w	r6, r7, sl
 810c644:	42b3      	cmp	r3, r6
 810c646:	b085      	sub	sp, #20
 810c648:	bfb8      	it	lt
 810c64a:	3101      	addlt	r1, #1
 810c64c:	f7ff fe8e 	bl	810c36c <_Balloc>
 810c650:	b930      	cbnz	r0, 810c660 <__multiply+0x44>
 810c652:	4602      	mov	r2, r0
 810c654:	4b44      	ldr	r3, [pc, #272]	; (810c768 <__multiply+0x14c>)
 810c656:	4845      	ldr	r0, [pc, #276]	; (810c76c <__multiply+0x150>)
 810c658:	f240 115d 	movw	r1, #349	; 0x15d
 810c65c:	f001 f844 	bl	810d6e8 <__assert_func>
 810c660:	f100 0514 	add.w	r5, r0, #20
 810c664:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 810c668:	462b      	mov	r3, r5
 810c66a:	2200      	movs	r2, #0
 810c66c:	4543      	cmp	r3, r8
 810c66e:	d321      	bcc.n	810c6b4 <__multiply+0x98>
 810c670:	f104 0314 	add.w	r3, r4, #20
 810c674:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 810c678:	f109 0314 	add.w	r3, r9, #20
 810c67c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 810c680:	9202      	str	r2, [sp, #8]
 810c682:	1b3a      	subs	r2, r7, r4
 810c684:	3a15      	subs	r2, #21
 810c686:	f022 0203 	bic.w	r2, r2, #3
 810c68a:	3204      	adds	r2, #4
 810c68c:	f104 0115 	add.w	r1, r4, #21
 810c690:	428f      	cmp	r7, r1
 810c692:	bf38      	it	cc
 810c694:	2204      	movcc	r2, #4
 810c696:	9201      	str	r2, [sp, #4]
 810c698:	9a02      	ldr	r2, [sp, #8]
 810c69a:	9303      	str	r3, [sp, #12]
 810c69c:	429a      	cmp	r2, r3
 810c69e:	d80c      	bhi.n	810c6ba <__multiply+0x9e>
 810c6a0:	2e00      	cmp	r6, #0
 810c6a2:	dd03      	ble.n	810c6ac <__multiply+0x90>
 810c6a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810c6a8:	2b00      	cmp	r3, #0
 810c6aa:	d05a      	beq.n	810c762 <__multiply+0x146>
 810c6ac:	6106      	str	r6, [r0, #16]
 810c6ae:	b005      	add	sp, #20
 810c6b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c6b4:	f843 2b04 	str.w	r2, [r3], #4
 810c6b8:	e7d8      	b.n	810c66c <__multiply+0x50>
 810c6ba:	f8b3 a000 	ldrh.w	sl, [r3]
 810c6be:	f1ba 0f00 	cmp.w	sl, #0
 810c6c2:	d024      	beq.n	810c70e <__multiply+0xf2>
 810c6c4:	f104 0e14 	add.w	lr, r4, #20
 810c6c8:	46a9      	mov	r9, r5
 810c6ca:	f04f 0c00 	mov.w	ip, #0
 810c6ce:	f85e 2b04 	ldr.w	r2, [lr], #4
 810c6d2:	f8d9 1000 	ldr.w	r1, [r9]
 810c6d6:	fa1f fb82 	uxth.w	fp, r2
 810c6da:	b289      	uxth	r1, r1
 810c6dc:	fb0a 110b 	mla	r1, sl, fp, r1
 810c6e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 810c6e4:	f8d9 2000 	ldr.w	r2, [r9]
 810c6e8:	4461      	add	r1, ip
 810c6ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810c6ee:	fb0a c20b 	mla	r2, sl, fp, ip
 810c6f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 810c6f6:	b289      	uxth	r1, r1
 810c6f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 810c6fc:	4577      	cmp	r7, lr
 810c6fe:	f849 1b04 	str.w	r1, [r9], #4
 810c702:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810c706:	d8e2      	bhi.n	810c6ce <__multiply+0xb2>
 810c708:	9a01      	ldr	r2, [sp, #4]
 810c70a:	f845 c002 	str.w	ip, [r5, r2]
 810c70e:	9a03      	ldr	r2, [sp, #12]
 810c710:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 810c714:	3304      	adds	r3, #4
 810c716:	f1b9 0f00 	cmp.w	r9, #0
 810c71a:	d020      	beq.n	810c75e <__multiply+0x142>
 810c71c:	6829      	ldr	r1, [r5, #0]
 810c71e:	f104 0c14 	add.w	ip, r4, #20
 810c722:	46ae      	mov	lr, r5
 810c724:	f04f 0a00 	mov.w	sl, #0
 810c728:	f8bc b000 	ldrh.w	fp, [ip]
 810c72c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 810c730:	fb09 220b 	mla	r2, r9, fp, r2
 810c734:	4492      	add	sl, r2
 810c736:	b289      	uxth	r1, r1
 810c738:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 810c73c:	f84e 1b04 	str.w	r1, [lr], #4
 810c740:	f85c 2b04 	ldr.w	r2, [ip], #4
 810c744:	f8be 1000 	ldrh.w	r1, [lr]
 810c748:	0c12      	lsrs	r2, r2, #16
 810c74a:	fb09 1102 	mla	r1, r9, r2, r1
 810c74e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 810c752:	4567      	cmp	r7, ip
 810c754:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 810c758:	d8e6      	bhi.n	810c728 <__multiply+0x10c>
 810c75a:	9a01      	ldr	r2, [sp, #4]
 810c75c:	50a9      	str	r1, [r5, r2]
 810c75e:	3504      	adds	r5, #4
 810c760:	e79a      	b.n	810c698 <__multiply+0x7c>
 810c762:	3e01      	subs	r6, #1
 810c764:	e79c      	b.n	810c6a0 <__multiply+0x84>
 810c766:	bf00      	nop
 810c768:	0810de10 	.word	0x0810de10
 810c76c:	0810df00 	.word	0x0810df00

0810c770 <__pow5mult>:
 810c770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810c774:	4615      	mov	r5, r2
 810c776:	f012 0203 	ands.w	r2, r2, #3
 810c77a:	4606      	mov	r6, r0
 810c77c:	460f      	mov	r7, r1
 810c77e:	d007      	beq.n	810c790 <__pow5mult+0x20>
 810c780:	4c25      	ldr	r4, [pc, #148]	; (810c818 <__pow5mult+0xa8>)
 810c782:	3a01      	subs	r2, #1
 810c784:	2300      	movs	r3, #0
 810c786:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810c78a:	f7ff fe51 	bl	810c430 <__multadd>
 810c78e:	4607      	mov	r7, r0
 810c790:	10ad      	asrs	r5, r5, #2
 810c792:	d03d      	beq.n	810c810 <__pow5mult+0xa0>
 810c794:	6a74      	ldr	r4, [r6, #36]	; 0x24
 810c796:	b97c      	cbnz	r4, 810c7b8 <__pow5mult+0x48>
 810c798:	2010      	movs	r0, #16
 810c79a:	f7ff fdbf 	bl	810c31c <malloc>
 810c79e:	4602      	mov	r2, r0
 810c7a0:	6270      	str	r0, [r6, #36]	; 0x24
 810c7a2:	b928      	cbnz	r0, 810c7b0 <__pow5mult+0x40>
 810c7a4:	4b1d      	ldr	r3, [pc, #116]	; (810c81c <__pow5mult+0xac>)
 810c7a6:	481e      	ldr	r0, [pc, #120]	; (810c820 <__pow5mult+0xb0>)
 810c7a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 810c7ac:	f000 ff9c 	bl	810d6e8 <__assert_func>
 810c7b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810c7b4:	6004      	str	r4, [r0, #0]
 810c7b6:	60c4      	str	r4, [r0, #12]
 810c7b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 810c7bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810c7c0:	b94c      	cbnz	r4, 810c7d6 <__pow5mult+0x66>
 810c7c2:	f240 2171 	movw	r1, #625	; 0x271
 810c7c6:	4630      	mov	r0, r6
 810c7c8:	f7ff ff12 	bl	810c5f0 <__i2b>
 810c7cc:	2300      	movs	r3, #0
 810c7ce:	f8c8 0008 	str.w	r0, [r8, #8]
 810c7d2:	4604      	mov	r4, r0
 810c7d4:	6003      	str	r3, [r0, #0]
 810c7d6:	f04f 0900 	mov.w	r9, #0
 810c7da:	07eb      	lsls	r3, r5, #31
 810c7dc:	d50a      	bpl.n	810c7f4 <__pow5mult+0x84>
 810c7de:	4639      	mov	r1, r7
 810c7e0:	4622      	mov	r2, r4
 810c7e2:	4630      	mov	r0, r6
 810c7e4:	f7ff ff1a 	bl	810c61c <__multiply>
 810c7e8:	4639      	mov	r1, r7
 810c7ea:	4680      	mov	r8, r0
 810c7ec:	4630      	mov	r0, r6
 810c7ee:	f7ff fdfd 	bl	810c3ec <_Bfree>
 810c7f2:	4647      	mov	r7, r8
 810c7f4:	106d      	asrs	r5, r5, #1
 810c7f6:	d00b      	beq.n	810c810 <__pow5mult+0xa0>
 810c7f8:	6820      	ldr	r0, [r4, #0]
 810c7fa:	b938      	cbnz	r0, 810c80c <__pow5mult+0x9c>
 810c7fc:	4622      	mov	r2, r4
 810c7fe:	4621      	mov	r1, r4
 810c800:	4630      	mov	r0, r6
 810c802:	f7ff ff0b 	bl	810c61c <__multiply>
 810c806:	6020      	str	r0, [r4, #0]
 810c808:	f8c0 9000 	str.w	r9, [r0]
 810c80c:	4604      	mov	r4, r0
 810c80e:	e7e4      	b.n	810c7da <__pow5mult+0x6a>
 810c810:	4638      	mov	r0, r7
 810c812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810c816:	bf00      	nop
 810c818:	0810e050 	.word	0x0810e050
 810c81c:	0810dd9e 	.word	0x0810dd9e
 810c820:	0810df00 	.word	0x0810df00

0810c824 <__lshift>:
 810c824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810c828:	460c      	mov	r4, r1
 810c82a:	6849      	ldr	r1, [r1, #4]
 810c82c:	6923      	ldr	r3, [r4, #16]
 810c82e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810c832:	68a3      	ldr	r3, [r4, #8]
 810c834:	4607      	mov	r7, r0
 810c836:	4691      	mov	r9, r2
 810c838:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810c83c:	f108 0601 	add.w	r6, r8, #1
 810c840:	42b3      	cmp	r3, r6
 810c842:	db0b      	blt.n	810c85c <__lshift+0x38>
 810c844:	4638      	mov	r0, r7
 810c846:	f7ff fd91 	bl	810c36c <_Balloc>
 810c84a:	4605      	mov	r5, r0
 810c84c:	b948      	cbnz	r0, 810c862 <__lshift+0x3e>
 810c84e:	4602      	mov	r2, r0
 810c850:	4b2a      	ldr	r3, [pc, #168]	; (810c8fc <__lshift+0xd8>)
 810c852:	482b      	ldr	r0, [pc, #172]	; (810c900 <__lshift+0xdc>)
 810c854:	f240 11d9 	movw	r1, #473	; 0x1d9
 810c858:	f000 ff46 	bl	810d6e8 <__assert_func>
 810c85c:	3101      	adds	r1, #1
 810c85e:	005b      	lsls	r3, r3, #1
 810c860:	e7ee      	b.n	810c840 <__lshift+0x1c>
 810c862:	2300      	movs	r3, #0
 810c864:	f100 0114 	add.w	r1, r0, #20
 810c868:	f100 0210 	add.w	r2, r0, #16
 810c86c:	4618      	mov	r0, r3
 810c86e:	4553      	cmp	r3, sl
 810c870:	db37      	blt.n	810c8e2 <__lshift+0xbe>
 810c872:	6920      	ldr	r0, [r4, #16]
 810c874:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810c878:	f104 0314 	add.w	r3, r4, #20
 810c87c:	f019 091f 	ands.w	r9, r9, #31
 810c880:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810c884:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 810c888:	d02f      	beq.n	810c8ea <__lshift+0xc6>
 810c88a:	f1c9 0e20 	rsb	lr, r9, #32
 810c88e:	468a      	mov	sl, r1
 810c890:	f04f 0c00 	mov.w	ip, #0
 810c894:	681a      	ldr	r2, [r3, #0]
 810c896:	fa02 f209 	lsl.w	r2, r2, r9
 810c89a:	ea42 020c 	orr.w	r2, r2, ip
 810c89e:	f84a 2b04 	str.w	r2, [sl], #4
 810c8a2:	f853 2b04 	ldr.w	r2, [r3], #4
 810c8a6:	4298      	cmp	r0, r3
 810c8a8:	fa22 fc0e 	lsr.w	ip, r2, lr
 810c8ac:	d8f2      	bhi.n	810c894 <__lshift+0x70>
 810c8ae:	1b03      	subs	r3, r0, r4
 810c8b0:	3b15      	subs	r3, #21
 810c8b2:	f023 0303 	bic.w	r3, r3, #3
 810c8b6:	3304      	adds	r3, #4
 810c8b8:	f104 0215 	add.w	r2, r4, #21
 810c8bc:	4290      	cmp	r0, r2
 810c8be:	bf38      	it	cc
 810c8c0:	2304      	movcc	r3, #4
 810c8c2:	f841 c003 	str.w	ip, [r1, r3]
 810c8c6:	f1bc 0f00 	cmp.w	ip, #0
 810c8ca:	d001      	beq.n	810c8d0 <__lshift+0xac>
 810c8cc:	f108 0602 	add.w	r6, r8, #2
 810c8d0:	3e01      	subs	r6, #1
 810c8d2:	4638      	mov	r0, r7
 810c8d4:	612e      	str	r6, [r5, #16]
 810c8d6:	4621      	mov	r1, r4
 810c8d8:	f7ff fd88 	bl	810c3ec <_Bfree>
 810c8dc:	4628      	mov	r0, r5
 810c8de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810c8e2:	f842 0f04 	str.w	r0, [r2, #4]!
 810c8e6:	3301      	adds	r3, #1
 810c8e8:	e7c1      	b.n	810c86e <__lshift+0x4a>
 810c8ea:	3904      	subs	r1, #4
 810c8ec:	f853 2b04 	ldr.w	r2, [r3], #4
 810c8f0:	f841 2f04 	str.w	r2, [r1, #4]!
 810c8f4:	4298      	cmp	r0, r3
 810c8f6:	d8f9      	bhi.n	810c8ec <__lshift+0xc8>
 810c8f8:	e7ea      	b.n	810c8d0 <__lshift+0xac>
 810c8fa:	bf00      	nop
 810c8fc:	0810de10 	.word	0x0810de10
 810c900:	0810df00 	.word	0x0810df00

0810c904 <__mcmp>:
 810c904:	b530      	push	{r4, r5, lr}
 810c906:	6902      	ldr	r2, [r0, #16]
 810c908:	690c      	ldr	r4, [r1, #16]
 810c90a:	1b12      	subs	r2, r2, r4
 810c90c:	d10e      	bne.n	810c92c <__mcmp+0x28>
 810c90e:	f100 0314 	add.w	r3, r0, #20
 810c912:	3114      	adds	r1, #20
 810c914:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 810c918:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 810c91c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 810c920:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 810c924:	42a5      	cmp	r5, r4
 810c926:	d003      	beq.n	810c930 <__mcmp+0x2c>
 810c928:	d305      	bcc.n	810c936 <__mcmp+0x32>
 810c92a:	2201      	movs	r2, #1
 810c92c:	4610      	mov	r0, r2
 810c92e:	bd30      	pop	{r4, r5, pc}
 810c930:	4283      	cmp	r3, r0
 810c932:	d3f3      	bcc.n	810c91c <__mcmp+0x18>
 810c934:	e7fa      	b.n	810c92c <__mcmp+0x28>
 810c936:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810c93a:	e7f7      	b.n	810c92c <__mcmp+0x28>

0810c93c <__mdiff>:
 810c93c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c940:	460c      	mov	r4, r1
 810c942:	4606      	mov	r6, r0
 810c944:	4611      	mov	r1, r2
 810c946:	4620      	mov	r0, r4
 810c948:	4690      	mov	r8, r2
 810c94a:	f7ff ffdb 	bl	810c904 <__mcmp>
 810c94e:	1e05      	subs	r5, r0, #0
 810c950:	d110      	bne.n	810c974 <__mdiff+0x38>
 810c952:	4629      	mov	r1, r5
 810c954:	4630      	mov	r0, r6
 810c956:	f7ff fd09 	bl	810c36c <_Balloc>
 810c95a:	b930      	cbnz	r0, 810c96a <__mdiff+0x2e>
 810c95c:	4b3a      	ldr	r3, [pc, #232]	; (810ca48 <__mdiff+0x10c>)
 810c95e:	4602      	mov	r2, r0
 810c960:	f240 2132 	movw	r1, #562	; 0x232
 810c964:	4839      	ldr	r0, [pc, #228]	; (810ca4c <__mdiff+0x110>)
 810c966:	f000 febf 	bl	810d6e8 <__assert_func>
 810c96a:	2301      	movs	r3, #1
 810c96c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810c970:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c974:	bfa4      	itt	ge
 810c976:	4643      	movge	r3, r8
 810c978:	46a0      	movge	r8, r4
 810c97a:	4630      	mov	r0, r6
 810c97c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 810c980:	bfa6      	itte	ge
 810c982:	461c      	movge	r4, r3
 810c984:	2500      	movge	r5, #0
 810c986:	2501      	movlt	r5, #1
 810c988:	f7ff fcf0 	bl	810c36c <_Balloc>
 810c98c:	b920      	cbnz	r0, 810c998 <__mdiff+0x5c>
 810c98e:	4b2e      	ldr	r3, [pc, #184]	; (810ca48 <__mdiff+0x10c>)
 810c990:	4602      	mov	r2, r0
 810c992:	f44f 7110 	mov.w	r1, #576	; 0x240
 810c996:	e7e5      	b.n	810c964 <__mdiff+0x28>
 810c998:	f8d8 7010 	ldr.w	r7, [r8, #16]
 810c99c:	6926      	ldr	r6, [r4, #16]
 810c99e:	60c5      	str	r5, [r0, #12]
 810c9a0:	f104 0914 	add.w	r9, r4, #20
 810c9a4:	f108 0514 	add.w	r5, r8, #20
 810c9a8:	f100 0e14 	add.w	lr, r0, #20
 810c9ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 810c9b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 810c9b4:	f108 0210 	add.w	r2, r8, #16
 810c9b8:	46f2      	mov	sl, lr
 810c9ba:	2100      	movs	r1, #0
 810c9bc:	f859 3b04 	ldr.w	r3, [r9], #4
 810c9c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 810c9c4:	fa1f f883 	uxth.w	r8, r3
 810c9c8:	fa11 f18b 	uxtah	r1, r1, fp
 810c9cc:	0c1b      	lsrs	r3, r3, #16
 810c9ce:	eba1 0808 	sub.w	r8, r1, r8
 810c9d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 810c9d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 810c9da:	fa1f f888 	uxth.w	r8, r8
 810c9de:	1419      	asrs	r1, r3, #16
 810c9e0:	454e      	cmp	r6, r9
 810c9e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 810c9e6:	f84a 3b04 	str.w	r3, [sl], #4
 810c9ea:	d8e7      	bhi.n	810c9bc <__mdiff+0x80>
 810c9ec:	1b33      	subs	r3, r6, r4
 810c9ee:	3b15      	subs	r3, #21
 810c9f0:	f023 0303 	bic.w	r3, r3, #3
 810c9f4:	3304      	adds	r3, #4
 810c9f6:	3415      	adds	r4, #21
 810c9f8:	42a6      	cmp	r6, r4
 810c9fa:	bf38      	it	cc
 810c9fc:	2304      	movcc	r3, #4
 810c9fe:	441d      	add	r5, r3
 810ca00:	4473      	add	r3, lr
 810ca02:	469e      	mov	lr, r3
 810ca04:	462e      	mov	r6, r5
 810ca06:	4566      	cmp	r6, ip
 810ca08:	d30e      	bcc.n	810ca28 <__mdiff+0xec>
 810ca0a:	f10c 0203 	add.w	r2, ip, #3
 810ca0e:	1b52      	subs	r2, r2, r5
 810ca10:	f022 0203 	bic.w	r2, r2, #3
 810ca14:	3d03      	subs	r5, #3
 810ca16:	45ac      	cmp	ip, r5
 810ca18:	bf38      	it	cc
 810ca1a:	2200      	movcc	r2, #0
 810ca1c:	441a      	add	r2, r3
 810ca1e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 810ca22:	b17b      	cbz	r3, 810ca44 <__mdiff+0x108>
 810ca24:	6107      	str	r7, [r0, #16]
 810ca26:	e7a3      	b.n	810c970 <__mdiff+0x34>
 810ca28:	f856 8b04 	ldr.w	r8, [r6], #4
 810ca2c:	fa11 f288 	uxtah	r2, r1, r8
 810ca30:	1414      	asrs	r4, r2, #16
 810ca32:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 810ca36:	b292      	uxth	r2, r2
 810ca38:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 810ca3c:	f84e 2b04 	str.w	r2, [lr], #4
 810ca40:	1421      	asrs	r1, r4, #16
 810ca42:	e7e0      	b.n	810ca06 <__mdiff+0xca>
 810ca44:	3f01      	subs	r7, #1
 810ca46:	e7ea      	b.n	810ca1e <__mdiff+0xe2>
 810ca48:	0810de10 	.word	0x0810de10
 810ca4c:	0810df00 	.word	0x0810df00

0810ca50 <__ulp>:
 810ca50:	b082      	sub	sp, #8
 810ca52:	ed8d 0b00 	vstr	d0, [sp]
 810ca56:	9b01      	ldr	r3, [sp, #4]
 810ca58:	4912      	ldr	r1, [pc, #72]	; (810caa4 <__ulp+0x54>)
 810ca5a:	4019      	ands	r1, r3
 810ca5c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 810ca60:	2900      	cmp	r1, #0
 810ca62:	dd05      	ble.n	810ca70 <__ulp+0x20>
 810ca64:	2200      	movs	r2, #0
 810ca66:	460b      	mov	r3, r1
 810ca68:	ec43 2b10 	vmov	d0, r2, r3
 810ca6c:	b002      	add	sp, #8
 810ca6e:	4770      	bx	lr
 810ca70:	4249      	negs	r1, r1
 810ca72:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 810ca76:	ea4f 5021 	mov.w	r0, r1, asr #20
 810ca7a:	f04f 0200 	mov.w	r2, #0
 810ca7e:	f04f 0300 	mov.w	r3, #0
 810ca82:	da04      	bge.n	810ca8e <__ulp+0x3e>
 810ca84:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 810ca88:	fa41 f300 	asr.w	r3, r1, r0
 810ca8c:	e7ec      	b.n	810ca68 <__ulp+0x18>
 810ca8e:	f1a0 0114 	sub.w	r1, r0, #20
 810ca92:	291e      	cmp	r1, #30
 810ca94:	bfda      	itte	le
 810ca96:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 810ca9a:	fa20 f101 	lsrle.w	r1, r0, r1
 810ca9e:	2101      	movgt	r1, #1
 810caa0:	460a      	mov	r2, r1
 810caa2:	e7e1      	b.n	810ca68 <__ulp+0x18>
 810caa4:	7ff00000 	.word	0x7ff00000

0810caa8 <__b2d>:
 810caa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810caaa:	6905      	ldr	r5, [r0, #16]
 810caac:	f100 0714 	add.w	r7, r0, #20
 810cab0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 810cab4:	1f2e      	subs	r6, r5, #4
 810cab6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 810caba:	4620      	mov	r0, r4
 810cabc:	f7ff fd48 	bl	810c550 <__hi0bits>
 810cac0:	f1c0 0320 	rsb	r3, r0, #32
 810cac4:	280a      	cmp	r0, #10
 810cac6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 810cb44 <__b2d+0x9c>
 810caca:	600b      	str	r3, [r1, #0]
 810cacc:	dc14      	bgt.n	810caf8 <__b2d+0x50>
 810cace:	f1c0 0e0b 	rsb	lr, r0, #11
 810cad2:	fa24 f10e 	lsr.w	r1, r4, lr
 810cad6:	42b7      	cmp	r7, r6
 810cad8:	ea41 030c 	orr.w	r3, r1, ip
 810cadc:	bf34      	ite	cc
 810cade:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810cae2:	2100      	movcs	r1, #0
 810cae4:	3015      	adds	r0, #21
 810cae6:	fa04 f000 	lsl.w	r0, r4, r0
 810caea:	fa21 f10e 	lsr.w	r1, r1, lr
 810caee:	ea40 0201 	orr.w	r2, r0, r1
 810caf2:	ec43 2b10 	vmov	d0, r2, r3
 810caf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810caf8:	42b7      	cmp	r7, r6
 810cafa:	bf3a      	itte	cc
 810cafc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810cb00:	f1a5 0608 	subcc.w	r6, r5, #8
 810cb04:	2100      	movcs	r1, #0
 810cb06:	380b      	subs	r0, #11
 810cb08:	d017      	beq.n	810cb3a <__b2d+0x92>
 810cb0a:	f1c0 0c20 	rsb	ip, r0, #32
 810cb0e:	fa04 f500 	lsl.w	r5, r4, r0
 810cb12:	42be      	cmp	r6, r7
 810cb14:	fa21 f40c 	lsr.w	r4, r1, ip
 810cb18:	ea45 0504 	orr.w	r5, r5, r4
 810cb1c:	bf8c      	ite	hi
 810cb1e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 810cb22:	2400      	movls	r4, #0
 810cb24:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 810cb28:	fa01 f000 	lsl.w	r0, r1, r0
 810cb2c:	fa24 f40c 	lsr.w	r4, r4, ip
 810cb30:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 810cb34:	ea40 0204 	orr.w	r2, r0, r4
 810cb38:	e7db      	b.n	810caf2 <__b2d+0x4a>
 810cb3a:	ea44 030c 	orr.w	r3, r4, ip
 810cb3e:	460a      	mov	r2, r1
 810cb40:	e7d7      	b.n	810caf2 <__b2d+0x4a>
 810cb42:	bf00      	nop
 810cb44:	3ff00000 	.word	0x3ff00000

0810cb48 <__d2b>:
 810cb48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810cb4c:	4689      	mov	r9, r1
 810cb4e:	2101      	movs	r1, #1
 810cb50:	ec57 6b10 	vmov	r6, r7, d0
 810cb54:	4690      	mov	r8, r2
 810cb56:	f7ff fc09 	bl	810c36c <_Balloc>
 810cb5a:	4604      	mov	r4, r0
 810cb5c:	b930      	cbnz	r0, 810cb6c <__d2b+0x24>
 810cb5e:	4602      	mov	r2, r0
 810cb60:	4b25      	ldr	r3, [pc, #148]	; (810cbf8 <__d2b+0xb0>)
 810cb62:	4826      	ldr	r0, [pc, #152]	; (810cbfc <__d2b+0xb4>)
 810cb64:	f240 310a 	movw	r1, #778	; 0x30a
 810cb68:	f000 fdbe 	bl	810d6e8 <__assert_func>
 810cb6c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 810cb70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 810cb74:	bb35      	cbnz	r5, 810cbc4 <__d2b+0x7c>
 810cb76:	2e00      	cmp	r6, #0
 810cb78:	9301      	str	r3, [sp, #4]
 810cb7a:	d028      	beq.n	810cbce <__d2b+0x86>
 810cb7c:	4668      	mov	r0, sp
 810cb7e:	9600      	str	r6, [sp, #0]
 810cb80:	f7ff fd06 	bl	810c590 <__lo0bits>
 810cb84:	9900      	ldr	r1, [sp, #0]
 810cb86:	b300      	cbz	r0, 810cbca <__d2b+0x82>
 810cb88:	9a01      	ldr	r2, [sp, #4]
 810cb8a:	f1c0 0320 	rsb	r3, r0, #32
 810cb8e:	fa02 f303 	lsl.w	r3, r2, r3
 810cb92:	430b      	orrs	r3, r1
 810cb94:	40c2      	lsrs	r2, r0
 810cb96:	6163      	str	r3, [r4, #20]
 810cb98:	9201      	str	r2, [sp, #4]
 810cb9a:	9b01      	ldr	r3, [sp, #4]
 810cb9c:	61a3      	str	r3, [r4, #24]
 810cb9e:	2b00      	cmp	r3, #0
 810cba0:	bf14      	ite	ne
 810cba2:	2202      	movne	r2, #2
 810cba4:	2201      	moveq	r2, #1
 810cba6:	6122      	str	r2, [r4, #16]
 810cba8:	b1d5      	cbz	r5, 810cbe0 <__d2b+0x98>
 810cbaa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 810cbae:	4405      	add	r5, r0
 810cbb0:	f8c9 5000 	str.w	r5, [r9]
 810cbb4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 810cbb8:	f8c8 0000 	str.w	r0, [r8]
 810cbbc:	4620      	mov	r0, r4
 810cbbe:	b003      	add	sp, #12
 810cbc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810cbc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810cbc8:	e7d5      	b.n	810cb76 <__d2b+0x2e>
 810cbca:	6161      	str	r1, [r4, #20]
 810cbcc:	e7e5      	b.n	810cb9a <__d2b+0x52>
 810cbce:	a801      	add	r0, sp, #4
 810cbd0:	f7ff fcde 	bl	810c590 <__lo0bits>
 810cbd4:	9b01      	ldr	r3, [sp, #4]
 810cbd6:	6163      	str	r3, [r4, #20]
 810cbd8:	2201      	movs	r2, #1
 810cbda:	6122      	str	r2, [r4, #16]
 810cbdc:	3020      	adds	r0, #32
 810cbde:	e7e3      	b.n	810cba8 <__d2b+0x60>
 810cbe0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 810cbe4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 810cbe8:	f8c9 0000 	str.w	r0, [r9]
 810cbec:	6918      	ldr	r0, [r3, #16]
 810cbee:	f7ff fcaf 	bl	810c550 <__hi0bits>
 810cbf2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810cbf6:	e7df      	b.n	810cbb8 <__d2b+0x70>
 810cbf8:	0810de10 	.word	0x0810de10
 810cbfc:	0810df00 	.word	0x0810df00

0810cc00 <__ratio>:
 810cc00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810cc04:	4688      	mov	r8, r1
 810cc06:	4669      	mov	r1, sp
 810cc08:	4681      	mov	r9, r0
 810cc0a:	f7ff ff4d 	bl	810caa8 <__b2d>
 810cc0e:	a901      	add	r1, sp, #4
 810cc10:	4640      	mov	r0, r8
 810cc12:	ec55 4b10 	vmov	r4, r5, d0
 810cc16:	f7ff ff47 	bl	810caa8 <__b2d>
 810cc1a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810cc1e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 810cc22:	eba3 0c02 	sub.w	ip, r3, r2
 810cc26:	e9dd 3200 	ldrd	r3, r2, [sp]
 810cc2a:	1a9b      	subs	r3, r3, r2
 810cc2c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 810cc30:	ec51 0b10 	vmov	r0, r1, d0
 810cc34:	2b00      	cmp	r3, #0
 810cc36:	bfd6      	itet	le
 810cc38:	460a      	movle	r2, r1
 810cc3a:	462a      	movgt	r2, r5
 810cc3c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 810cc40:	468b      	mov	fp, r1
 810cc42:	462f      	mov	r7, r5
 810cc44:	bfd4      	ite	le
 810cc46:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 810cc4a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 810cc4e:	4620      	mov	r0, r4
 810cc50:	ee10 2a10 	vmov	r2, s0
 810cc54:	465b      	mov	r3, fp
 810cc56:	4639      	mov	r1, r7
 810cc58:	f7f3 fe80 	bl	810095c <__aeabi_ddiv>
 810cc5c:	ec41 0b10 	vmov	d0, r0, r1
 810cc60:	b003      	add	sp, #12
 810cc62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810cc66 <__copybits>:
 810cc66:	3901      	subs	r1, #1
 810cc68:	b570      	push	{r4, r5, r6, lr}
 810cc6a:	1149      	asrs	r1, r1, #5
 810cc6c:	6914      	ldr	r4, [r2, #16]
 810cc6e:	3101      	adds	r1, #1
 810cc70:	f102 0314 	add.w	r3, r2, #20
 810cc74:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 810cc78:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 810cc7c:	1f05      	subs	r5, r0, #4
 810cc7e:	42a3      	cmp	r3, r4
 810cc80:	d30c      	bcc.n	810cc9c <__copybits+0x36>
 810cc82:	1aa3      	subs	r3, r4, r2
 810cc84:	3b11      	subs	r3, #17
 810cc86:	f023 0303 	bic.w	r3, r3, #3
 810cc8a:	3211      	adds	r2, #17
 810cc8c:	42a2      	cmp	r2, r4
 810cc8e:	bf88      	it	hi
 810cc90:	2300      	movhi	r3, #0
 810cc92:	4418      	add	r0, r3
 810cc94:	2300      	movs	r3, #0
 810cc96:	4288      	cmp	r0, r1
 810cc98:	d305      	bcc.n	810cca6 <__copybits+0x40>
 810cc9a:	bd70      	pop	{r4, r5, r6, pc}
 810cc9c:	f853 6b04 	ldr.w	r6, [r3], #4
 810cca0:	f845 6f04 	str.w	r6, [r5, #4]!
 810cca4:	e7eb      	b.n	810cc7e <__copybits+0x18>
 810cca6:	f840 3b04 	str.w	r3, [r0], #4
 810ccaa:	e7f4      	b.n	810cc96 <__copybits+0x30>

0810ccac <__any_on>:
 810ccac:	f100 0214 	add.w	r2, r0, #20
 810ccb0:	6900      	ldr	r0, [r0, #16]
 810ccb2:	114b      	asrs	r3, r1, #5
 810ccb4:	4298      	cmp	r0, r3
 810ccb6:	b510      	push	{r4, lr}
 810ccb8:	db11      	blt.n	810ccde <__any_on+0x32>
 810ccba:	dd0a      	ble.n	810ccd2 <__any_on+0x26>
 810ccbc:	f011 011f 	ands.w	r1, r1, #31
 810ccc0:	d007      	beq.n	810ccd2 <__any_on+0x26>
 810ccc2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 810ccc6:	fa24 f001 	lsr.w	r0, r4, r1
 810ccca:	fa00 f101 	lsl.w	r1, r0, r1
 810ccce:	428c      	cmp	r4, r1
 810ccd0:	d10b      	bne.n	810ccea <__any_on+0x3e>
 810ccd2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810ccd6:	4293      	cmp	r3, r2
 810ccd8:	d803      	bhi.n	810cce2 <__any_on+0x36>
 810ccda:	2000      	movs	r0, #0
 810ccdc:	bd10      	pop	{r4, pc}
 810ccde:	4603      	mov	r3, r0
 810cce0:	e7f7      	b.n	810ccd2 <__any_on+0x26>
 810cce2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810cce6:	2900      	cmp	r1, #0
 810cce8:	d0f5      	beq.n	810ccd6 <__any_on+0x2a>
 810ccea:	2001      	movs	r0, #1
 810ccec:	e7f6      	b.n	810ccdc <__any_on+0x30>

0810ccee <_calloc_r>:
 810ccee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810ccf0:	fba1 2402 	umull	r2, r4, r1, r2
 810ccf4:	b94c      	cbnz	r4, 810cd0a <_calloc_r+0x1c>
 810ccf6:	4611      	mov	r1, r2
 810ccf8:	9201      	str	r2, [sp, #4]
 810ccfa:	f000 f87b 	bl	810cdf4 <_malloc_r>
 810ccfe:	9a01      	ldr	r2, [sp, #4]
 810cd00:	4605      	mov	r5, r0
 810cd02:	b930      	cbnz	r0, 810cd12 <_calloc_r+0x24>
 810cd04:	4628      	mov	r0, r5
 810cd06:	b003      	add	sp, #12
 810cd08:	bd30      	pop	{r4, r5, pc}
 810cd0a:	220c      	movs	r2, #12
 810cd0c:	6002      	str	r2, [r0, #0]
 810cd0e:	2500      	movs	r5, #0
 810cd10:	e7f8      	b.n	810cd04 <_calloc_r+0x16>
 810cd12:	4621      	mov	r1, r4
 810cd14:	f7fc faae 	bl	8109274 <memset>
 810cd18:	e7f4      	b.n	810cd04 <_calloc_r+0x16>
	...

0810cd1c <_free_r>:
 810cd1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810cd1e:	2900      	cmp	r1, #0
 810cd20:	d044      	beq.n	810cdac <_free_r+0x90>
 810cd22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810cd26:	9001      	str	r0, [sp, #4]
 810cd28:	2b00      	cmp	r3, #0
 810cd2a:	f1a1 0404 	sub.w	r4, r1, #4
 810cd2e:	bfb8      	it	lt
 810cd30:	18e4      	addlt	r4, r4, r3
 810cd32:	f000 fe6d 	bl	810da10 <__malloc_lock>
 810cd36:	4a1e      	ldr	r2, [pc, #120]	; (810cdb0 <_free_r+0x94>)
 810cd38:	9801      	ldr	r0, [sp, #4]
 810cd3a:	6813      	ldr	r3, [r2, #0]
 810cd3c:	b933      	cbnz	r3, 810cd4c <_free_r+0x30>
 810cd3e:	6063      	str	r3, [r4, #4]
 810cd40:	6014      	str	r4, [r2, #0]
 810cd42:	b003      	add	sp, #12
 810cd44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810cd48:	f000 be68 	b.w	810da1c <__malloc_unlock>
 810cd4c:	42a3      	cmp	r3, r4
 810cd4e:	d908      	bls.n	810cd62 <_free_r+0x46>
 810cd50:	6825      	ldr	r5, [r4, #0]
 810cd52:	1961      	adds	r1, r4, r5
 810cd54:	428b      	cmp	r3, r1
 810cd56:	bf01      	itttt	eq
 810cd58:	6819      	ldreq	r1, [r3, #0]
 810cd5a:	685b      	ldreq	r3, [r3, #4]
 810cd5c:	1949      	addeq	r1, r1, r5
 810cd5e:	6021      	streq	r1, [r4, #0]
 810cd60:	e7ed      	b.n	810cd3e <_free_r+0x22>
 810cd62:	461a      	mov	r2, r3
 810cd64:	685b      	ldr	r3, [r3, #4]
 810cd66:	b10b      	cbz	r3, 810cd6c <_free_r+0x50>
 810cd68:	42a3      	cmp	r3, r4
 810cd6a:	d9fa      	bls.n	810cd62 <_free_r+0x46>
 810cd6c:	6811      	ldr	r1, [r2, #0]
 810cd6e:	1855      	adds	r5, r2, r1
 810cd70:	42a5      	cmp	r5, r4
 810cd72:	d10b      	bne.n	810cd8c <_free_r+0x70>
 810cd74:	6824      	ldr	r4, [r4, #0]
 810cd76:	4421      	add	r1, r4
 810cd78:	1854      	adds	r4, r2, r1
 810cd7a:	42a3      	cmp	r3, r4
 810cd7c:	6011      	str	r1, [r2, #0]
 810cd7e:	d1e0      	bne.n	810cd42 <_free_r+0x26>
 810cd80:	681c      	ldr	r4, [r3, #0]
 810cd82:	685b      	ldr	r3, [r3, #4]
 810cd84:	6053      	str	r3, [r2, #4]
 810cd86:	4421      	add	r1, r4
 810cd88:	6011      	str	r1, [r2, #0]
 810cd8a:	e7da      	b.n	810cd42 <_free_r+0x26>
 810cd8c:	d902      	bls.n	810cd94 <_free_r+0x78>
 810cd8e:	230c      	movs	r3, #12
 810cd90:	6003      	str	r3, [r0, #0]
 810cd92:	e7d6      	b.n	810cd42 <_free_r+0x26>
 810cd94:	6825      	ldr	r5, [r4, #0]
 810cd96:	1961      	adds	r1, r4, r5
 810cd98:	428b      	cmp	r3, r1
 810cd9a:	bf04      	itt	eq
 810cd9c:	6819      	ldreq	r1, [r3, #0]
 810cd9e:	685b      	ldreq	r3, [r3, #4]
 810cda0:	6063      	str	r3, [r4, #4]
 810cda2:	bf04      	itt	eq
 810cda4:	1949      	addeq	r1, r1, r5
 810cda6:	6021      	streq	r1, [r4, #0]
 810cda8:	6054      	str	r4, [r2, #4]
 810cdaa:	e7ca      	b.n	810cd42 <_free_r+0x26>
 810cdac:	b003      	add	sp, #12
 810cdae:	bd30      	pop	{r4, r5, pc}
 810cdb0:	10000438 	.word	0x10000438

0810cdb4 <sbrk_aligned>:
 810cdb4:	b570      	push	{r4, r5, r6, lr}
 810cdb6:	4e0e      	ldr	r6, [pc, #56]	; (810cdf0 <sbrk_aligned+0x3c>)
 810cdb8:	460c      	mov	r4, r1
 810cdba:	6831      	ldr	r1, [r6, #0]
 810cdbc:	4605      	mov	r5, r0
 810cdbe:	b911      	cbnz	r1, 810cdc6 <sbrk_aligned+0x12>
 810cdc0:	f000 fb4a 	bl	810d458 <_sbrk_r>
 810cdc4:	6030      	str	r0, [r6, #0]
 810cdc6:	4621      	mov	r1, r4
 810cdc8:	4628      	mov	r0, r5
 810cdca:	f000 fb45 	bl	810d458 <_sbrk_r>
 810cdce:	1c43      	adds	r3, r0, #1
 810cdd0:	d00a      	beq.n	810cde8 <sbrk_aligned+0x34>
 810cdd2:	1cc4      	adds	r4, r0, #3
 810cdd4:	f024 0403 	bic.w	r4, r4, #3
 810cdd8:	42a0      	cmp	r0, r4
 810cdda:	d007      	beq.n	810cdec <sbrk_aligned+0x38>
 810cddc:	1a21      	subs	r1, r4, r0
 810cdde:	4628      	mov	r0, r5
 810cde0:	f000 fb3a 	bl	810d458 <_sbrk_r>
 810cde4:	3001      	adds	r0, #1
 810cde6:	d101      	bne.n	810cdec <sbrk_aligned+0x38>
 810cde8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 810cdec:	4620      	mov	r0, r4
 810cdee:	bd70      	pop	{r4, r5, r6, pc}
 810cdf0:	1000043c 	.word	0x1000043c

0810cdf4 <_malloc_r>:
 810cdf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810cdf8:	1ccd      	adds	r5, r1, #3
 810cdfa:	f025 0503 	bic.w	r5, r5, #3
 810cdfe:	3508      	adds	r5, #8
 810ce00:	2d0c      	cmp	r5, #12
 810ce02:	bf38      	it	cc
 810ce04:	250c      	movcc	r5, #12
 810ce06:	2d00      	cmp	r5, #0
 810ce08:	4607      	mov	r7, r0
 810ce0a:	db01      	blt.n	810ce10 <_malloc_r+0x1c>
 810ce0c:	42a9      	cmp	r1, r5
 810ce0e:	d905      	bls.n	810ce1c <_malloc_r+0x28>
 810ce10:	230c      	movs	r3, #12
 810ce12:	603b      	str	r3, [r7, #0]
 810ce14:	2600      	movs	r6, #0
 810ce16:	4630      	mov	r0, r6
 810ce18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810ce1c:	4e2e      	ldr	r6, [pc, #184]	; (810ced8 <_malloc_r+0xe4>)
 810ce1e:	f000 fdf7 	bl	810da10 <__malloc_lock>
 810ce22:	6833      	ldr	r3, [r6, #0]
 810ce24:	461c      	mov	r4, r3
 810ce26:	bb34      	cbnz	r4, 810ce76 <_malloc_r+0x82>
 810ce28:	4629      	mov	r1, r5
 810ce2a:	4638      	mov	r0, r7
 810ce2c:	f7ff ffc2 	bl	810cdb4 <sbrk_aligned>
 810ce30:	1c43      	adds	r3, r0, #1
 810ce32:	4604      	mov	r4, r0
 810ce34:	d14d      	bne.n	810ced2 <_malloc_r+0xde>
 810ce36:	6834      	ldr	r4, [r6, #0]
 810ce38:	4626      	mov	r6, r4
 810ce3a:	2e00      	cmp	r6, #0
 810ce3c:	d140      	bne.n	810cec0 <_malloc_r+0xcc>
 810ce3e:	6823      	ldr	r3, [r4, #0]
 810ce40:	4631      	mov	r1, r6
 810ce42:	4638      	mov	r0, r7
 810ce44:	eb04 0803 	add.w	r8, r4, r3
 810ce48:	f000 fb06 	bl	810d458 <_sbrk_r>
 810ce4c:	4580      	cmp	r8, r0
 810ce4e:	d13a      	bne.n	810cec6 <_malloc_r+0xd2>
 810ce50:	6821      	ldr	r1, [r4, #0]
 810ce52:	3503      	adds	r5, #3
 810ce54:	1a6d      	subs	r5, r5, r1
 810ce56:	f025 0503 	bic.w	r5, r5, #3
 810ce5a:	3508      	adds	r5, #8
 810ce5c:	2d0c      	cmp	r5, #12
 810ce5e:	bf38      	it	cc
 810ce60:	250c      	movcc	r5, #12
 810ce62:	4629      	mov	r1, r5
 810ce64:	4638      	mov	r0, r7
 810ce66:	f7ff ffa5 	bl	810cdb4 <sbrk_aligned>
 810ce6a:	3001      	adds	r0, #1
 810ce6c:	d02b      	beq.n	810cec6 <_malloc_r+0xd2>
 810ce6e:	6823      	ldr	r3, [r4, #0]
 810ce70:	442b      	add	r3, r5
 810ce72:	6023      	str	r3, [r4, #0]
 810ce74:	e00e      	b.n	810ce94 <_malloc_r+0xa0>
 810ce76:	6822      	ldr	r2, [r4, #0]
 810ce78:	1b52      	subs	r2, r2, r5
 810ce7a:	d41e      	bmi.n	810ceba <_malloc_r+0xc6>
 810ce7c:	2a0b      	cmp	r2, #11
 810ce7e:	d916      	bls.n	810ceae <_malloc_r+0xba>
 810ce80:	1961      	adds	r1, r4, r5
 810ce82:	42a3      	cmp	r3, r4
 810ce84:	6025      	str	r5, [r4, #0]
 810ce86:	bf18      	it	ne
 810ce88:	6059      	strne	r1, [r3, #4]
 810ce8a:	6863      	ldr	r3, [r4, #4]
 810ce8c:	bf08      	it	eq
 810ce8e:	6031      	streq	r1, [r6, #0]
 810ce90:	5162      	str	r2, [r4, r5]
 810ce92:	604b      	str	r3, [r1, #4]
 810ce94:	4638      	mov	r0, r7
 810ce96:	f104 060b 	add.w	r6, r4, #11
 810ce9a:	f000 fdbf 	bl	810da1c <__malloc_unlock>
 810ce9e:	f026 0607 	bic.w	r6, r6, #7
 810cea2:	1d23      	adds	r3, r4, #4
 810cea4:	1af2      	subs	r2, r6, r3
 810cea6:	d0b6      	beq.n	810ce16 <_malloc_r+0x22>
 810cea8:	1b9b      	subs	r3, r3, r6
 810ceaa:	50a3      	str	r3, [r4, r2]
 810ceac:	e7b3      	b.n	810ce16 <_malloc_r+0x22>
 810ceae:	6862      	ldr	r2, [r4, #4]
 810ceb0:	42a3      	cmp	r3, r4
 810ceb2:	bf0c      	ite	eq
 810ceb4:	6032      	streq	r2, [r6, #0]
 810ceb6:	605a      	strne	r2, [r3, #4]
 810ceb8:	e7ec      	b.n	810ce94 <_malloc_r+0xa0>
 810ceba:	4623      	mov	r3, r4
 810cebc:	6864      	ldr	r4, [r4, #4]
 810cebe:	e7b2      	b.n	810ce26 <_malloc_r+0x32>
 810cec0:	4634      	mov	r4, r6
 810cec2:	6876      	ldr	r6, [r6, #4]
 810cec4:	e7b9      	b.n	810ce3a <_malloc_r+0x46>
 810cec6:	230c      	movs	r3, #12
 810cec8:	603b      	str	r3, [r7, #0]
 810ceca:	4638      	mov	r0, r7
 810cecc:	f000 fda6 	bl	810da1c <__malloc_unlock>
 810ced0:	e7a1      	b.n	810ce16 <_malloc_r+0x22>
 810ced2:	6025      	str	r5, [r4, #0]
 810ced4:	e7de      	b.n	810ce94 <_malloc_r+0xa0>
 810ced6:	bf00      	nop
 810ced8:	10000438 	.word	0x10000438

0810cedc <__ssputs_r>:
 810cedc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810cee0:	688e      	ldr	r6, [r1, #8]
 810cee2:	429e      	cmp	r6, r3
 810cee4:	4682      	mov	sl, r0
 810cee6:	460c      	mov	r4, r1
 810cee8:	4690      	mov	r8, r2
 810ceea:	461f      	mov	r7, r3
 810ceec:	d838      	bhi.n	810cf60 <__ssputs_r+0x84>
 810ceee:	898a      	ldrh	r2, [r1, #12]
 810cef0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810cef4:	d032      	beq.n	810cf5c <__ssputs_r+0x80>
 810cef6:	6825      	ldr	r5, [r4, #0]
 810cef8:	6909      	ldr	r1, [r1, #16]
 810cefa:	eba5 0901 	sub.w	r9, r5, r1
 810cefe:	6965      	ldr	r5, [r4, #20]
 810cf00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810cf04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810cf08:	3301      	adds	r3, #1
 810cf0a:	444b      	add	r3, r9
 810cf0c:	106d      	asrs	r5, r5, #1
 810cf0e:	429d      	cmp	r5, r3
 810cf10:	bf38      	it	cc
 810cf12:	461d      	movcc	r5, r3
 810cf14:	0553      	lsls	r3, r2, #21
 810cf16:	d531      	bpl.n	810cf7c <__ssputs_r+0xa0>
 810cf18:	4629      	mov	r1, r5
 810cf1a:	f7ff ff6b 	bl	810cdf4 <_malloc_r>
 810cf1e:	4606      	mov	r6, r0
 810cf20:	b950      	cbnz	r0, 810cf38 <__ssputs_r+0x5c>
 810cf22:	230c      	movs	r3, #12
 810cf24:	f8ca 3000 	str.w	r3, [sl]
 810cf28:	89a3      	ldrh	r3, [r4, #12]
 810cf2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810cf2e:	81a3      	strh	r3, [r4, #12]
 810cf30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810cf34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810cf38:	6921      	ldr	r1, [r4, #16]
 810cf3a:	464a      	mov	r2, r9
 810cf3c:	f7ff fa08 	bl	810c350 <memcpy>
 810cf40:	89a3      	ldrh	r3, [r4, #12]
 810cf42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 810cf46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810cf4a:	81a3      	strh	r3, [r4, #12]
 810cf4c:	6126      	str	r6, [r4, #16]
 810cf4e:	6165      	str	r5, [r4, #20]
 810cf50:	444e      	add	r6, r9
 810cf52:	eba5 0509 	sub.w	r5, r5, r9
 810cf56:	6026      	str	r6, [r4, #0]
 810cf58:	60a5      	str	r5, [r4, #8]
 810cf5a:	463e      	mov	r6, r7
 810cf5c:	42be      	cmp	r6, r7
 810cf5e:	d900      	bls.n	810cf62 <__ssputs_r+0x86>
 810cf60:	463e      	mov	r6, r7
 810cf62:	6820      	ldr	r0, [r4, #0]
 810cf64:	4632      	mov	r2, r6
 810cf66:	4641      	mov	r1, r8
 810cf68:	f000 fd38 	bl	810d9dc <memmove>
 810cf6c:	68a3      	ldr	r3, [r4, #8]
 810cf6e:	1b9b      	subs	r3, r3, r6
 810cf70:	60a3      	str	r3, [r4, #8]
 810cf72:	6823      	ldr	r3, [r4, #0]
 810cf74:	4433      	add	r3, r6
 810cf76:	6023      	str	r3, [r4, #0]
 810cf78:	2000      	movs	r0, #0
 810cf7a:	e7db      	b.n	810cf34 <__ssputs_r+0x58>
 810cf7c:	462a      	mov	r2, r5
 810cf7e:	f000 fd53 	bl	810da28 <_realloc_r>
 810cf82:	4606      	mov	r6, r0
 810cf84:	2800      	cmp	r0, #0
 810cf86:	d1e1      	bne.n	810cf4c <__ssputs_r+0x70>
 810cf88:	6921      	ldr	r1, [r4, #16]
 810cf8a:	4650      	mov	r0, sl
 810cf8c:	f7ff fec6 	bl	810cd1c <_free_r>
 810cf90:	e7c7      	b.n	810cf22 <__ssputs_r+0x46>
	...

0810cf94 <_svfiprintf_r>:
 810cf94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810cf98:	4698      	mov	r8, r3
 810cf9a:	898b      	ldrh	r3, [r1, #12]
 810cf9c:	061b      	lsls	r3, r3, #24
 810cf9e:	b09d      	sub	sp, #116	; 0x74
 810cfa0:	4607      	mov	r7, r0
 810cfa2:	460d      	mov	r5, r1
 810cfa4:	4614      	mov	r4, r2
 810cfa6:	d50e      	bpl.n	810cfc6 <_svfiprintf_r+0x32>
 810cfa8:	690b      	ldr	r3, [r1, #16]
 810cfaa:	b963      	cbnz	r3, 810cfc6 <_svfiprintf_r+0x32>
 810cfac:	2140      	movs	r1, #64	; 0x40
 810cfae:	f7ff ff21 	bl	810cdf4 <_malloc_r>
 810cfb2:	6028      	str	r0, [r5, #0]
 810cfb4:	6128      	str	r0, [r5, #16]
 810cfb6:	b920      	cbnz	r0, 810cfc2 <_svfiprintf_r+0x2e>
 810cfb8:	230c      	movs	r3, #12
 810cfba:	603b      	str	r3, [r7, #0]
 810cfbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810cfc0:	e0d1      	b.n	810d166 <_svfiprintf_r+0x1d2>
 810cfc2:	2340      	movs	r3, #64	; 0x40
 810cfc4:	616b      	str	r3, [r5, #20]
 810cfc6:	2300      	movs	r3, #0
 810cfc8:	9309      	str	r3, [sp, #36]	; 0x24
 810cfca:	2320      	movs	r3, #32
 810cfcc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810cfd0:	f8cd 800c 	str.w	r8, [sp, #12]
 810cfd4:	2330      	movs	r3, #48	; 0x30
 810cfd6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 810d180 <_svfiprintf_r+0x1ec>
 810cfda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810cfde:	f04f 0901 	mov.w	r9, #1
 810cfe2:	4623      	mov	r3, r4
 810cfe4:	469a      	mov	sl, r3
 810cfe6:	f813 2b01 	ldrb.w	r2, [r3], #1
 810cfea:	b10a      	cbz	r2, 810cff0 <_svfiprintf_r+0x5c>
 810cfec:	2a25      	cmp	r2, #37	; 0x25
 810cfee:	d1f9      	bne.n	810cfe4 <_svfiprintf_r+0x50>
 810cff0:	ebba 0b04 	subs.w	fp, sl, r4
 810cff4:	d00b      	beq.n	810d00e <_svfiprintf_r+0x7a>
 810cff6:	465b      	mov	r3, fp
 810cff8:	4622      	mov	r2, r4
 810cffa:	4629      	mov	r1, r5
 810cffc:	4638      	mov	r0, r7
 810cffe:	f7ff ff6d 	bl	810cedc <__ssputs_r>
 810d002:	3001      	adds	r0, #1
 810d004:	f000 80aa 	beq.w	810d15c <_svfiprintf_r+0x1c8>
 810d008:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810d00a:	445a      	add	r2, fp
 810d00c:	9209      	str	r2, [sp, #36]	; 0x24
 810d00e:	f89a 3000 	ldrb.w	r3, [sl]
 810d012:	2b00      	cmp	r3, #0
 810d014:	f000 80a2 	beq.w	810d15c <_svfiprintf_r+0x1c8>
 810d018:	2300      	movs	r3, #0
 810d01a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810d01e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810d022:	f10a 0a01 	add.w	sl, sl, #1
 810d026:	9304      	str	r3, [sp, #16]
 810d028:	9307      	str	r3, [sp, #28]
 810d02a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810d02e:	931a      	str	r3, [sp, #104]	; 0x68
 810d030:	4654      	mov	r4, sl
 810d032:	2205      	movs	r2, #5
 810d034:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d038:	4851      	ldr	r0, [pc, #324]	; (810d180 <_svfiprintf_r+0x1ec>)
 810d03a:	f7f3 f959 	bl	81002f0 <memchr>
 810d03e:	9a04      	ldr	r2, [sp, #16]
 810d040:	b9d8      	cbnz	r0, 810d07a <_svfiprintf_r+0xe6>
 810d042:	06d0      	lsls	r0, r2, #27
 810d044:	bf44      	itt	mi
 810d046:	2320      	movmi	r3, #32
 810d048:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810d04c:	0711      	lsls	r1, r2, #28
 810d04e:	bf44      	itt	mi
 810d050:	232b      	movmi	r3, #43	; 0x2b
 810d052:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810d056:	f89a 3000 	ldrb.w	r3, [sl]
 810d05a:	2b2a      	cmp	r3, #42	; 0x2a
 810d05c:	d015      	beq.n	810d08a <_svfiprintf_r+0xf6>
 810d05e:	9a07      	ldr	r2, [sp, #28]
 810d060:	4654      	mov	r4, sl
 810d062:	2000      	movs	r0, #0
 810d064:	f04f 0c0a 	mov.w	ip, #10
 810d068:	4621      	mov	r1, r4
 810d06a:	f811 3b01 	ldrb.w	r3, [r1], #1
 810d06e:	3b30      	subs	r3, #48	; 0x30
 810d070:	2b09      	cmp	r3, #9
 810d072:	d94e      	bls.n	810d112 <_svfiprintf_r+0x17e>
 810d074:	b1b0      	cbz	r0, 810d0a4 <_svfiprintf_r+0x110>
 810d076:	9207      	str	r2, [sp, #28]
 810d078:	e014      	b.n	810d0a4 <_svfiprintf_r+0x110>
 810d07a:	eba0 0308 	sub.w	r3, r0, r8
 810d07e:	fa09 f303 	lsl.w	r3, r9, r3
 810d082:	4313      	orrs	r3, r2
 810d084:	9304      	str	r3, [sp, #16]
 810d086:	46a2      	mov	sl, r4
 810d088:	e7d2      	b.n	810d030 <_svfiprintf_r+0x9c>
 810d08a:	9b03      	ldr	r3, [sp, #12]
 810d08c:	1d19      	adds	r1, r3, #4
 810d08e:	681b      	ldr	r3, [r3, #0]
 810d090:	9103      	str	r1, [sp, #12]
 810d092:	2b00      	cmp	r3, #0
 810d094:	bfbb      	ittet	lt
 810d096:	425b      	neglt	r3, r3
 810d098:	f042 0202 	orrlt.w	r2, r2, #2
 810d09c:	9307      	strge	r3, [sp, #28]
 810d09e:	9307      	strlt	r3, [sp, #28]
 810d0a0:	bfb8      	it	lt
 810d0a2:	9204      	strlt	r2, [sp, #16]
 810d0a4:	7823      	ldrb	r3, [r4, #0]
 810d0a6:	2b2e      	cmp	r3, #46	; 0x2e
 810d0a8:	d10c      	bne.n	810d0c4 <_svfiprintf_r+0x130>
 810d0aa:	7863      	ldrb	r3, [r4, #1]
 810d0ac:	2b2a      	cmp	r3, #42	; 0x2a
 810d0ae:	d135      	bne.n	810d11c <_svfiprintf_r+0x188>
 810d0b0:	9b03      	ldr	r3, [sp, #12]
 810d0b2:	1d1a      	adds	r2, r3, #4
 810d0b4:	681b      	ldr	r3, [r3, #0]
 810d0b6:	9203      	str	r2, [sp, #12]
 810d0b8:	2b00      	cmp	r3, #0
 810d0ba:	bfb8      	it	lt
 810d0bc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 810d0c0:	3402      	adds	r4, #2
 810d0c2:	9305      	str	r3, [sp, #20]
 810d0c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 810d190 <_svfiprintf_r+0x1fc>
 810d0c8:	7821      	ldrb	r1, [r4, #0]
 810d0ca:	2203      	movs	r2, #3
 810d0cc:	4650      	mov	r0, sl
 810d0ce:	f7f3 f90f 	bl	81002f0 <memchr>
 810d0d2:	b140      	cbz	r0, 810d0e6 <_svfiprintf_r+0x152>
 810d0d4:	2340      	movs	r3, #64	; 0x40
 810d0d6:	eba0 000a 	sub.w	r0, r0, sl
 810d0da:	fa03 f000 	lsl.w	r0, r3, r0
 810d0de:	9b04      	ldr	r3, [sp, #16]
 810d0e0:	4303      	orrs	r3, r0
 810d0e2:	3401      	adds	r4, #1
 810d0e4:	9304      	str	r3, [sp, #16]
 810d0e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d0ea:	4826      	ldr	r0, [pc, #152]	; (810d184 <_svfiprintf_r+0x1f0>)
 810d0ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810d0f0:	2206      	movs	r2, #6
 810d0f2:	f7f3 f8fd 	bl	81002f0 <memchr>
 810d0f6:	2800      	cmp	r0, #0
 810d0f8:	d038      	beq.n	810d16c <_svfiprintf_r+0x1d8>
 810d0fa:	4b23      	ldr	r3, [pc, #140]	; (810d188 <_svfiprintf_r+0x1f4>)
 810d0fc:	bb1b      	cbnz	r3, 810d146 <_svfiprintf_r+0x1b2>
 810d0fe:	9b03      	ldr	r3, [sp, #12]
 810d100:	3307      	adds	r3, #7
 810d102:	f023 0307 	bic.w	r3, r3, #7
 810d106:	3308      	adds	r3, #8
 810d108:	9303      	str	r3, [sp, #12]
 810d10a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810d10c:	4433      	add	r3, r6
 810d10e:	9309      	str	r3, [sp, #36]	; 0x24
 810d110:	e767      	b.n	810cfe2 <_svfiprintf_r+0x4e>
 810d112:	fb0c 3202 	mla	r2, ip, r2, r3
 810d116:	460c      	mov	r4, r1
 810d118:	2001      	movs	r0, #1
 810d11a:	e7a5      	b.n	810d068 <_svfiprintf_r+0xd4>
 810d11c:	2300      	movs	r3, #0
 810d11e:	3401      	adds	r4, #1
 810d120:	9305      	str	r3, [sp, #20]
 810d122:	4619      	mov	r1, r3
 810d124:	f04f 0c0a 	mov.w	ip, #10
 810d128:	4620      	mov	r0, r4
 810d12a:	f810 2b01 	ldrb.w	r2, [r0], #1
 810d12e:	3a30      	subs	r2, #48	; 0x30
 810d130:	2a09      	cmp	r2, #9
 810d132:	d903      	bls.n	810d13c <_svfiprintf_r+0x1a8>
 810d134:	2b00      	cmp	r3, #0
 810d136:	d0c5      	beq.n	810d0c4 <_svfiprintf_r+0x130>
 810d138:	9105      	str	r1, [sp, #20]
 810d13a:	e7c3      	b.n	810d0c4 <_svfiprintf_r+0x130>
 810d13c:	fb0c 2101 	mla	r1, ip, r1, r2
 810d140:	4604      	mov	r4, r0
 810d142:	2301      	movs	r3, #1
 810d144:	e7f0      	b.n	810d128 <_svfiprintf_r+0x194>
 810d146:	ab03      	add	r3, sp, #12
 810d148:	9300      	str	r3, [sp, #0]
 810d14a:	462a      	mov	r2, r5
 810d14c:	4b0f      	ldr	r3, [pc, #60]	; (810d18c <_svfiprintf_r+0x1f8>)
 810d14e:	a904      	add	r1, sp, #16
 810d150:	4638      	mov	r0, r7
 810d152:	f7fc f937 	bl	81093c4 <_printf_float>
 810d156:	1c42      	adds	r2, r0, #1
 810d158:	4606      	mov	r6, r0
 810d15a:	d1d6      	bne.n	810d10a <_svfiprintf_r+0x176>
 810d15c:	89ab      	ldrh	r3, [r5, #12]
 810d15e:	065b      	lsls	r3, r3, #25
 810d160:	f53f af2c 	bmi.w	810cfbc <_svfiprintf_r+0x28>
 810d164:	9809      	ldr	r0, [sp, #36]	; 0x24
 810d166:	b01d      	add	sp, #116	; 0x74
 810d168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d16c:	ab03      	add	r3, sp, #12
 810d16e:	9300      	str	r3, [sp, #0]
 810d170:	462a      	mov	r2, r5
 810d172:	4b06      	ldr	r3, [pc, #24]	; (810d18c <_svfiprintf_r+0x1f8>)
 810d174:	a904      	add	r1, sp, #16
 810d176:	4638      	mov	r0, r7
 810d178:	f7fc fbc8 	bl	810990c <_printf_i>
 810d17c:	e7eb      	b.n	810d156 <_svfiprintf_r+0x1c2>
 810d17e:	bf00      	nop
 810d180:	0810e05c 	.word	0x0810e05c
 810d184:	0810e066 	.word	0x0810e066
 810d188:	081093c5 	.word	0x081093c5
 810d18c:	0810cedd 	.word	0x0810cedd
 810d190:	0810e062 	.word	0x0810e062

0810d194 <__sfputc_r>:
 810d194:	6893      	ldr	r3, [r2, #8]
 810d196:	3b01      	subs	r3, #1
 810d198:	2b00      	cmp	r3, #0
 810d19a:	b410      	push	{r4}
 810d19c:	6093      	str	r3, [r2, #8]
 810d19e:	da08      	bge.n	810d1b2 <__sfputc_r+0x1e>
 810d1a0:	6994      	ldr	r4, [r2, #24]
 810d1a2:	42a3      	cmp	r3, r4
 810d1a4:	db01      	blt.n	810d1aa <__sfputc_r+0x16>
 810d1a6:	290a      	cmp	r1, #10
 810d1a8:	d103      	bne.n	810d1b2 <__sfputc_r+0x1e>
 810d1aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 810d1ae:	f000 b9bb 	b.w	810d528 <__swbuf_r>
 810d1b2:	6813      	ldr	r3, [r2, #0]
 810d1b4:	1c58      	adds	r0, r3, #1
 810d1b6:	6010      	str	r0, [r2, #0]
 810d1b8:	7019      	strb	r1, [r3, #0]
 810d1ba:	4608      	mov	r0, r1
 810d1bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 810d1c0:	4770      	bx	lr

0810d1c2 <__sfputs_r>:
 810d1c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d1c4:	4606      	mov	r6, r0
 810d1c6:	460f      	mov	r7, r1
 810d1c8:	4614      	mov	r4, r2
 810d1ca:	18d5      	adds	r5, r2, r3
 810d1cc:	42ac      	cmp	r4, r5
 810d1ce:	d101      	bne.n	810d1d4 <__sfputs_r+0x12>
 810d1d0:	2000      	movs	r0, #0
 810d1d2:	e007      	b.n	810d1e4 <__sfputs_r+0x22>
 810d1d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d1d8:	463a      	mov	r2, r7
 810d1da:	4630      	mov	r0, r6
 810d1dc:	f7ff ffda 	bl	810d194 <__sfputc_r>
 810d1e0:	1c43      	adds	r3, r0, #1
 810d1e2:	d1f3      	bne.n	810d1cc <__sfputs_r+0xa>
 810d1e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810d1e8 <_vfiprintf_r>:
 810d1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d1ec:	460d      	mov	r5, r1
 810d1ee:	b09d      	sub	sp, #116	; 0x74
 810d1f0:	4614      	mov	r4, r2
 810d1f2:	4698      	mov	r8, r3
 810d1f4:	4606      	mov	r6, r0
 810d1f6:	b118      	cbz	r0, 810d200 <_vfiprintf_r+0x18>
 810d1f8:	6983      	ldr	r3, [r0, #24]
 810d1fa:	b90b      	cbnz	r3, 810d200 <_vfiprintf_r+0x18>
 810d1fc:	f7fe fc7a 	bl	810baf4 <__sinit>
 810d200:	4b89      	ldr	r3, [pc, #548]	; (810d428 <_vfiprintf_r+0x240>)
 810d202:	429d      	cmp	r5, r3
 810d204:	d11b      	bne.n	810d23e <_vfiprintf_r+0x56>
 810d206:	6875      	ldr	r5, [r6, #4]
 810d208:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810d20a:	07d9      	lsls	r1, r3, #31
 810d20c:	d405      	bmi.n	810d21a <_vfiprintf_r+0x32>
 810d20e:	89ab      	ldrh	r3, [r5, #12]
 810d210:	059a      	lsls	r2, r3, #22
 810d212:	d402      	bmi.n	810d21a <_vfiprintf_r+0x32>
 810d214:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810d216:	f7ff f87e 	bl	810c316 <__retarget_lock_acquire_recursive>
 810d21a:	89ab      	ldrh	r3, [r5, #12]
 810d21c:	071b      	lsls	r3, r3, #28
 810d21e:	d501      	bpl.n	810d224 <_vfiprintf_r+0x3c>
 810d220:	692b      	ldr	r3, [r5, #16]
 810d222:	b9eb      	cbnz	r3, 810d260 <_vfiprintf_r+0x78>
 810d224:	4629      	mov	r1, r5
 810d226:	4630      	mov	r0, r6
 810d228:	f000 f9f0 	bl	810d60c <__swsetup_r>
 810d22c:	b1c0      	cbz	r0, 810d260 <_vfiprintf_r+0x78>
 810d22e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810d230:	07dc      	lsls	r4, r3, #31
 810d232:	d50e      	bpl.n	810d252 <_vfiprintf_r+0x6a>
 810d234:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810d238:	b01d      	add	sp, #116	; 0x74
 810d23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d23e:	4b7b      	ldr	r3, [pc, #492]	; (810d42c <_vfiprintf_r+0x244>)
 810d240:	429d      	cmp	r5, r3
 810d242:	d101      	bne.n	810d248 <_vfiprintf_r+0x60>
 810d244:	68b5      	ldr	r5, [r6, #8]
 810d246:	e7df      	b.n	810d208 <_vfiprintf_r+0x20>
 810d248:	4b79      	ldr	r3, [pc, #484]	; (810d430 <_vfiprintf_r+0x248>)
 810d24a:	429d      	cmp	r5, r3
 810d24c:	bf08      	it	eq
 810d24e:	68f5      	ldreq	r5, [r6, #12]
 810d250:	e7da      	b.n	810d208 <_vfiprintf_r+0x20>
 810d252:	89ab      	ldrh	r3, [r5, #12]
 810d254:	0598      	lsls	r0, r3, #22
 810d256:	d4ed      	bmi.n	810d234 <_vfiprintf_r+0x4c>
 810d258:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810d25a:	f7ff f85d 	bl	810c318 <__retarget_lock_release_recursive>
 810d25e:	e7e9      	b.n	810d234 <_vfiprintf_r+0x4c>
 810d260:	2300      	movs	r3, #0
 810d262:	9309      	str	r3, [sp, #36]	; 0x24
 810d264:	2320      	movs	r3, #32
 810d266:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810d26a:	f8cd 800c 	str.w	r8, [sp, #12]
 810d26e:	2330      	movs	r3, #48	; 0x30
 810d270:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 810d434 <_vfiprintf_r+0x24c>
 810d274:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810d278:	f04f 0901 	mov.w	r9, #1
 810d27c:	4623      	mov	r3, r4
 810d27e:	469a      	mov	sl, r3
 810d280:	f813 2b01 	ldrb.w	r2, [r3], #1
 810d284:	b10a      	cbz	r2, 810d28a <_vfiprintf_r+0xa2>
 810d286:	2a25      	cmp	r2, #37	; 0x25
 810d288:	d1f9      	bne.n	810d27e <_vfiprintf_r+0x96>
 810d28a:	ebba 0b04 	subs.w	fp, sl, r4
 810d28e:	d00b      	beq.n	810d2a8 <_vfiprintf_r+0xc0>
 810d290:	465b      	mov	r3, fp
 810d292:	4622      	mov	r2, r4
 810d294:	4629      	mov	r1, r5
 810d296:	4630      	mov	r0, r6
 810d298:	f7ff ff93 	bl	810d1c2 <__sfputs_r>
 810d29c:	3001      	adds	r0, #1
 810d29e:	f000 80aa 	beq.w	810d3f6 <_vfiprintf_r+0x20e>
 810d2a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810d2a4:	445a      	add	r2, fp
 810d2a6:	9209      	str	r2, [sp, #36]	; 0x24
 810d2a8:	f89a 3000 	ldrb.w	r3, [sl]
 810d2ac:	2b00      	cmp	r3, #0
 810d2ae:	f000 80a2 	beq.w	810d3f6 <_vfiprintf_r+0x20e>
 810d2b2:	2300      	movs	r3, #0
 810d2b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810d2b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810d2bc:	f10a 0a01 	add.w	sl, sl, #1
 810d2c0:	9304      	str	r3, [sp, #16]
 810d2c2:	9307      	str	r3, [sp, #28]
 810d2c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810d2c8:	931a      	str	r3, [sp, #104]	; 0x68
 810d2ca:	4654      	mov	r4, sl
 810d2cc:	2205      	movs	r2, #5
 810d2ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d2d2:	4858      	ldr	r0, [pc, #352]	; (810d434 <_vfiprintf_r+0x24c>)
 810d2d4:	f7f3 f80c 	bl	81002f0 <memchr>
 810d2d8:	9a04      	ldr	r2, [sp, #16]
 810d2da:	b9d8      	cbnz	r0, 810d314 <_vfiprintf_r+0x12c>
 810d2dc:	06d1      	lsls	r1, r2, #27
 810d2de:	bf44      	itt	mi
 810d2e0:	2320      	movmi	r3, #32
 810d2e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810d2e6:	0713      	lsls	r3, r2, #28
 810d2e8:	bf44      	itt	mi
 810d2ea:	232b      	movmi	r3, #43	; 0x2b
 810d2ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810d2f0:	f89a 3000 	ldrb.w	r3, [sl]
 810d2f4:	2b2a      	cmp	r3, #42	; 0x2a
 810d2f6:	d015      	beq.n	810d324 <_vfiprintf_r+0x13c>
 810d2f8:	9a07      	ldr	r2, [sp, #28]
 810d2fa:	4654      	mov	r4, sl
 810d2fc:	2000      	movs	r0, #0
 810d2fe:	f04f 0c0a 	mov.w	ip, #10
 810d302:	4621      	mov	r1, r4
 810d304:	f811 3b01 	ldrb.w	r3, [r1], #1
 810d308:	3b30      	subs	r3, #48	; 0x30
 810d30a:	2b09      	cmp	r3, #9
 810d30c:	d94e      	bls.n	810d3ac <_vfiprintf_r+0x1c4>
 810d30e:	b1b0      	cbz	r0, 810d33e <_vfiprintf_r+0x156>
 810d310:	9207      	str	r2, [sp, #28]
 810d312:	e014      	b.n	810d33e <_vfiprintf_r+0x156>
 810d314:	eba0 0308 	sub.w	r3, r0, r8
 810d318:	fa09 f303 	lsl.w	r3, r9, r3
 810d31c:	4313      	orrs	r3, r2
 810d31e:	9304      	str	r3, [sp, #16]
 810d320:	46a2      	mov	sl, r4
 810d322:	e7d2      	b.n	810d2ca <_vfiprintf_r+0xe2>
 810d324:	9b03      	ldr	r3, [sp, #12]
 810d326:	1d19      	adds	r1, r3, #4
 810d328:	681b      	ldr	r3, [r3, #0]
 810d32a:	9103      	str	r1, [sp, #12]
 810d32c:	2b00      	cmp	r3, #0
 810d32e:	bfbb      	ittet	lt
 810d330:	425b      	neglt	r3, r3
 810d332:	f042 0202 	orrlt.w	r2, r2, #2
 810d336:	9307      	strge	r3, [sp, #28]
 810d338:	9307      	strlt	r3, [sp, #28]
 810d33a:	bfb8      	it	lt
 810d33c:	9204      	strlt	r2, [sp, #16]
 810d33e:	7823      	ldrb	r3, [r4, #0]
 810d340:	2b2e      	cmp	r3, #46	; 0x2e
 810d342:	d10c      	bne.n	810d35e <_vfiprintf_r+0x176>
 810d344:	7863      	ldrb	r3, [r4, #1]
 810d346:	2b2a      	cmp	r3, #42	; 0x2a
 810d348:	d135      	bne.n	810d3b6 <_vfiprintf_r+0x1ce>
 810d34a:	9b03      	ldr	r3, [sp, #12]
 810d34c:	1d1a      	adds	r2, r3, #4
 810d34e:	681b      	ldr	r3, [r3, #0]
 810d350:	9203      	str	r2, [sp, #12]
 810d352:	2b00      	cmp	r3, #0
 810d354:	bfb8      	it	lt
 810d356:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 810d35a:	3402      	adds	r4, #2
 810d35c:	9305      	str	r3, [sp, #20]
 810d35e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 810d444 <_vfiprintf_r+0x25c>
 810d362:	7821      	ldrb	r1, [r4, #0]
 810d364:	2203      	movs	r2, #3
 810d366:	4650      	mov	r0, sl
 810d368:	f7f2 ffc2 	bl	81002f0 <memchr>
 810d36c:	b140      	cbz	r0, 810d380 <_vfiprintf_r+0x198>
 810d36e:	2340      	movs	r3, #64	; 0x40
 810d370:	eba0 000a 	sub.w	r0, r0, sl
 810d374:	fa03 f000 	lsl.w	r0, r3, r0
 810d378:	9b04      	ldr	r3, [sp, #16]
 810d37a:	4303      	orrs	r3, r0
 810d37c:	3401      	adds	r4, #1
 810d37e:	9304      	str	r3, [sp, #16]
 810d380:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d384:	482c      	ldr	r0, [pc, #176]	; (810d438 <_vfiprintf_r+0x250>)
 810d386:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810d38a:	2206      	movs	r2, #6
 810d38c:	f7f2 ffb0 	bl	81002f0 <memchr>
 810d390:	2800      	cmp	r0, #0
 810d392:	d03f      	beq.n	810d414 <_vfiprintf_r+0x22c>
 810d394:	4b29      	ldr	r3, [pc, #164]	; (810d43c <_vfiprintf_r+0x254>)
 810d396:	bb1b      	cbnz	r3, 810d3e0 <_vfiprintf_r+0x1f8>
 810d398:	9b03      	ldr	r3, [sp, #12]
 810d39a:	3307      	adds	r3, #7
 810d39c:	f023 0307 	bic.w	r3, r3, #7
 810d3a0:	3308      	adds	r3, #8
 810d3a2:	9303      	str	r3, [sp, #12]
 810d3a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810d3a6:	443b      	add	r3, r7
 810d3a8:	9309      	str	r3, [sp, #36]	; 0x24
 810d3aa:	e767      	b.n	810d27c <_vfiprintf_r+0x94>
 810d3ac:	fb0c 3202 	mla	r2, ip, r2, r3
 810d3b0:	460c      	mov	r4, r1
 810d3b2:	2001      	movs	r0, #1
 810d3b4:	e7a5      	b.n	810d302 <_vfiprintf_r+0x11a>
 810d3b6:	2300      	movs	r3, #0
 810d3b8:	3401      	adds	r4, #1
 810d3ba:	9305      	str	r3, [sp, #20]
 810d3bc:	4619      	mov	r1, r3
 810d3be:	f04f 0c0a 	mov.w	ip, #10
 810d3c2:	4620      	mov	r0, r4
 810d3c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 810d3c8:	3a30      	subs	r2, #48	; 0x30
 810d3ca:	2a09      	cmp	r2, #9
 810d3cc:	d903      	bls.n	810d3d6 <_vfiprintf_r+0x1ee>
 810d3ce:	2b00      	cmp	r3, #0
 810d3d0:	d0c5      	beq.n	810d35e <_vfiprintf_r+0x176>
 810d3d2:	9105      	str	r1, [sp, #20]
 810d3d4:	e7c3      	b.n	810d35e <_vfiprintf_r+0x176>
 810d3d6:	fb0c 2101 	mla	r1, ip, r1, r2
 810d3da:	4604      	mov	r4, r0
 810d3dc:	2301      	movs	r3, #1
 810d3de:	e7f0      	b.n	810d3c2 <_vfiprintf_r+0x1da>
 810d3e0:	ab03      	add	r3, sp, #12
 810d3e2:	9300      	str	r3, [sp, #0]
 810d3e4:	462a      	mov	r2, r5
 810d3e6:	4b16      	ldr	r3, [pc, #88]	; (810d440 <_vfiprintf_r+0x258>)
 810d3e8:	a904      	add	r1, sp, #16
 810d3ea:	4630      	mov	r0, r6
 810d3ec:	f7fb ffea 	bl	81093c4 <_printf_float>
 810d3f0:	4607      	mov	r7, r0
 810d3f2:	1c78      	adds	r0, r7, #1
 810d3f4:	d1d6      	bne.n	810d3a4 <_vfiprintf_r+0x1bc>
 810d3f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810d3f8:	07d9      	lsls	r1, r3, #31
 810d3fa:	d405      	bmi.n	810d408 <_vfiprintf_r+0x220>
 810d3fc:	89ab      	ldrh	r3, [r5, #12]
 810d3fe:	059a      	lsls	r2, r3, #22
 810d400:	d402      	bmi.n	810d408 <_vfiprintf_r+0x220>
 810d402:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810d404:	f7fe ff88 	bl	810c318 <__retarget_lock_release_recursive>
 810d408:	89ab      	ldrh	r3, [r5, #12]
 810d40a:	065b      	lsls	r3, r3, #25
 810d40c:	f53f af12 	bmi.w	810d234 <_vfiprintf_r+0x4c>
 810d410:	9809      	ldr	r0, [sp, #36]	; 0x24
 810d412:	e711      	b.n	810d238 <_vfiprintf_r+0x50>
 810d414:	ab03      	add	r3, sp, #12
 810d416:	9300      	str	r3, [sp, #0]
 810d418:	462a      	mov	r2, r5
 810d41a:	4b09      	ldr	r3, [pc, #36]	; (810d440 <_vfiprintf_r+0x258>)
 810d41c:	a904      	add	r1, sp, #16
 810d41e:	4630      	mov	r0, r6
 810d420:	f7fc fa74 	bl	810990c <_printf_i>
 810d424:	e7e4      	b.n	810d3f0 <_vfiprintf_r+0x208>
 810d426:	bf00      	nop
 810d428:	0810de44 	.word	0x0810de44
 810d42c:	0810de64 	.word	0x0810de64
 810d430:	0810de24 	.word	0x0810de24
 810d434:	0810e05c 	.word	0x0810e05c
 810d438:	0810e066 	.word	0x0810e066
 810d43c:	081093c5 	.word	0x081093c5
 810d440:	0810d1c3 	.word	0x0810d1c3
 810d444:	0810e062 	.word	0x0810e062

0810d448 <nan>:
 810d448:	ed9f 0b01 	vldr	d0, [pc, #4]	; 810d450 <nan+0x8>
 810d44c:	4770      	bx	lr
 810d44e:	bf00      	nop
 810d450:	00000000 	.word	0x00000000
 810d454:	7ff80000 	.word	0x7ff80000

0810d458 <_sbrk_r>:
 810d458:	b538      	push	{r3, r4, r5, lr}
 810d45a:	4d06      	ldr	r5, [pc, #24]	; (810d474 <_sbrk_r+0x1c>)
 810d45c:	2300      	movs	r3, #0
 810d45e:	4604      	mov	r4, r0
 810d460:	4608      	mov	r0, r1
 810d462:	602b      	str	r3, [r5, #0]
 810d464:	f7f4 fd7c 	bl	8101f60 <_sbrk>
 810d468:	1c43      	adds	r3, r0, #1
 810d46a:	d102      	bne.n	810d472 <_sbrk_r+0x1a>
 810d46c:	682b      	ldr	r3, [r5, #0]
 810d46e:	b103      	cbz	r3, 810d472 <_sbrk_r+0x1a>
 810d470:	6023      	str	r3, [r4, #0]
 810d472:	bd38      	pop	{r3, r4, r5, pc}
 810d474:	10000440 	.word	0x10000440

0810d478 <__sread>:
 810d478:	b510      	push	{r4, lr}
 810d47a:	460c      	mov	r4, r1
 810d47c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810d480:	f000 fb02 	bl	810da88 <_read_r>
 810d484:	2800      	cmp	r0, #0
 810d486:	bfab      	itete	ge
 810d488:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 810d48a:	89a3      	ldrhlt	r3, [r4, #12]
 810d48c:	181b      	addge	r3, r3, r0
 810d48e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 810d492:	bfac      	ite	ge
 810d494:	6563      	strge	r3, [r4, #84]	; 0x54
 810d496:	81a3      	strhlt	r3, [r4, #12]
 810d498:	bd10      	pop	{r4, pc}

0810d49a <__swrite>:
 810d49a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810d49e:	461f      	mov	r7, r3
 810d4a0:	898b      	ldrh	r3, [r1, #12]
 810d4a2:	05db      	lsls	r3, r3, #23
 810d4a4:	4605      	mov	r5, r0
 810d4a6:	460c      	mov	r4, r1
 810d4a8:	4616      	mov	r6, r2
 810d4aa:	d505      	bpl.n	810d4b8 <__swrite+0x1e>
 810d4ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810d4b0:	2302      	movs	r3, #2
 810d4b2:	2200      	movs	r2, #0
 810d4b4:	f000 fa1a 	bl	810d8ec <_lseek_r>
 810d4b8:	89a3      	ldrh	r3, [r4, #12]
 810d4ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810d4be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810d4c2:	81a3      	strh	r3, [r4, #12]
 810d4c4:	4632      	mov	r2, r6
 810d4c6:	463b      	mov	r3, r7
 810d4c8:	4628      	mov	r0, r5
 810d4ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810d4ce:	f000 b88b 	b.w	810d5e8 <_write_r>

0810d4d2 <__sseek>:
 810d4d2:	b510      	push	{r4, lr}
 810d4d4:	460c      	mov	r4, r1
 810d4d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810d4da:	f000 fa07 	bl	810d8ec <_lseek_r>
 810d4de:	1c43      	adds	r3, r0, #1
 810d4e0:	89a3      	ldrh	r3, [r4, #12]
 810d4e2:	bf15      	itete	ne
 810d4e4:	6560      	strne	r0, [r4, #84]	; 0x54
 810d4e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 810d4ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 810d4ee:	81a3      	strheq	r3, [r4, #12]
 810d4f0:	bf18      	it	ne
 810d4f2:	81a3      	strhne	r3, [r4, #12]
 810d4f4:	bd10      	pop	{r4, pc}

0810d4f6 <__sclose>:
 810d4f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810d4fa:	f000 b913 	b.w	810d724 <_close_r>

0810d4fe <strncmp>:
 810d4fe:	b510      	push	{r4, lr}
 810d500:	b17a      	cbz	r2, 810d522 <strncmp+0x24>
 810d502:	4603      	mov	r3, r0
 810d504:	3901      	subs	r1, #1
 810d506:	1884      	adds	r4, r0, r2
 810d508:	f813 0b01 	ldrb.w	r0, [r3], #1
 810d50c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 810d510:	4290      	cmp	r0, r2
 810d512:	d101      	bne.n	810d518 <strncmp+0x1a>
 810d514:	42a3      	cmp	r3, r4
 810d516:	d101      	bne.n	810d51c <strncmp+0x1e>
 810d518:	1a80      	subs	r0, r0, r2
 810d51a:	bd10      	pop	{r4, pc}
 810d51c:	2800      	cmp	r0, #0
 810d51e:	d1f3      	bne.n	810d508 <strncmp+0xa>
 810d520:	e7fa      	b.n	810d518 <strncmp+0x1a>
 810d522:	4610      	mov	r0, r2
 810d524:	e7f9      	b.n	810d51a <strncmp+0x1c>
	...

0810d528 <__swbuf_r>:
 810d528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d52a:	460e      	mov	r6, r1
 810d52c:	4614      	mov	r4, r2
 810d52e:	4605      	mov	r5, r0
 810d530:	b118      	cbz	r0, 810d53a <__swbuf_r+0x12>
 810d532:	6983      	ldr	r3, [r0, #24]
 810d534:	b90b      	cbnz	r3, 810d53a <__swbuf_r+0x12>
 810d536:	f7fe fadd 	bl	810baf4 <__sinit>
 810d53a:	4b21      	ldr	r3, [pc, #132]	; (810d5c0 <__swbuf_r+0x98>)
 810d53c:	429c      	cmp	r4, r3
 810d53e:	d12b      	bne.n	810d598 <__swbuf_r+0x70>
 810d540:	686c      	ldr	r4, [r5, #4]
 810d542:	69a3      	ldr	r3, [r4, #24]
 810d544:	60a3      	str	r3, [r4, #8]
 810d546:	89a3      	ldrh	r3, [r4, #12]
 810d548:	071a      	lsls	r2, r3, #28
 810d54a:	d52f      	bpl.n	810d5ac <__swbuf_r+0x84>
 810d54c:	6923      	ldr	r3, [r4, #16]
 810d54e:	b36b      	cbz	r3, 810d5ac <__swbuf_r+0x84>
 810d550:	6923      	ldr	r3, [r4, #16]
 810d552:	6820      	ldr	r0, [r4, #0]
 810d554:	1ac0      	subs	r0, r0, r3
 810d556:	6963      	ldr	r3, [r4, #20]
 810d558:	b2f6      	uxtb	r6, r6
 810d55a:	4283      	cmp	r3, r0
 810d55c:	4637      	mov	r7, r6
 810d55e:	dc04      	bgt.n	810d56a <__swbuf_r+0x42>
 810d560:	4621      	mov	r1, r4
 810d562:	4628      	mov	r0, r5
 810d564:	f000 f974 	bl	810d850 <_fflush_r>
 810d568:	bb30      	cbnz	r0, 810d5b8 <__swbuf_r+0x90>
 810d56a:	68a3      	ldr	r3, [r4, #8]
 810d56c:	3b01      	subs	r3, #1
 810d56e:	60a3      	str	r3, [r4, #8]
 810d570:	6823      	ldr	r3, [r4, #0]
 810d572:	1c5a      	adds	r2, r3, #1
 810d574:	6022      	str	r2, [r4, #0]
 810d576:	701e      	strb	r6, [r3, #0]
 810d578:	6963      	ldr	r3, [r4, #20]
 810d57a:	3001      	adds	r0, #1
 810d57c:	4283      	cmp	r3, r0
 810d57e:	d004      	beq.n	810d58a <__swbuf_r+0x62>
 810d580:	89a3      	ldrh	r3, [r4, #12]
 810d582:	07db      	lsls	r3, r3, #31
 810d584:	d506      	bpl.n	810d594 <__swbuf_r+0x6c>
 810d586:	2e0a      	cmp	r6, #10
 810d588:	d104      	bne.n	810d594 <__swbuf_r+0x6c>
 810d58a:	4621      	mov	r1, r4
 810d58c:	4628      	mov	r0, r5
 810d58e:	f000 f95f 	bl	810d850 <_fflush_r>
 810d592:	b988      	cbnz	r0, 810d5b8 <__swbuf_r+0x90>
 810d594:	4638      	mov	r0, r7
 810d596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810d598:	4b0a      	ldr	r3, [pc, #40]	; (810d5c4 <__swbuf_r+0x9c>)
 810d59a:	429c      	cmp	r4, r3
 810d59c:	d101      	bne.n	810d5a2 <__swbuf_r+0x7a>
 810d59e:	68ac      	ldr	r4, [r5, #8]
 810d5a0:	e7cf      	b.n	810d542 <__swbuf_r+0x1a>
 810d5a2:	4b09      	ldr	r3, [pc, #36]	; (810d5c8 <__swbuf_r+0xa0>)
 810d5a4:	429c      	cmp	r4, r3
 810d5a6:	bf08      	it	eq
 810d5a8:	68ec      	ldreq	r4, [r5, #12]
 810d5aa:	e7ca      	b.n	810d542 <__swbuf_r+0x1a>
 810d5ac:	4621      	mov	r1, r4
 810d5ae:	4628      	mov	r0, r5
 810d5b0:	f000 f82c 	bl	810d60c <__swsetup_r>
 810d5b4:	2800      	cmp	r0, #0
 810d5b6:	d0cb      	beq.n	810d550 <__swbuf_r+0x28>
 810d5b8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 810d5bc:	e7ea      	b.n	810d594 <__swbuf_r+0x6c>
 810d5be:	bf00      	nop
 810d5c0:	0810de44 	.word	0x0810de44
 810d5c4:	0810de64 	.word	0x0810de64
 810d5c8:	0810de24 	.word	0x0810de24

0810d5cc <__ascii_wctomb>:
 810d5cc:	b149      	cbz	r1, 810d5e2 <__ascii_wctomb+0x16>
 810d5ce:	2aff      	cmp	r2, #255	; 0xff
 810d5d0:	bf85      	ittet	hi
 810d5d2:	238a      	movhi	r3, #138	; 0x8a
 810d5d4:	6003      	strhi	r3, [r0, #0]
 810d5d6:	700a      	strbls	r2, [r1, #0]
 810d5d8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 810d5dc:	bf98      	it	ls
 810d5de:	2001      	movls	r0, #1
 810d5e0:	4770      	bx	lr
 810d5e2:	4608      	mov	r0, r1
 810d5e4:	4770      	bx	lr
	...

0810d5e8 <_write_r>:
 810d5e8:	b538      	push	{r3, r4, r5, lr}
 810d5ea:	4d07      	ldr	r5, [pc, #28]	; (810d608 <_write_r+0x20>)
 810d5ec:	4604      	mov	r4, r0
 810d5ee:	4608      	mov	r0, r1
 810d5f0:	4611      	mov	r1, r2
 810d5f2:	2200      	movs	r2, #0
 810d5f4:	602a      	str	r2, [r5, #0]
 810d5f6:	461a      	mov	r2, r3
 810d5f8:	f7f4 fc61 	bl	8101ebe <_write>
 810d5fc:	1c43      	adds	r3, r0, #1
 810d5fe:	d102      	bne.n	810d606 <_write_r+0x1e>
 810d600:	682b      	ldr	r3, [r5, #0]
 810d602:	b103      	cbz	r3, 810d606 <_write_r+0x1e>
 810d604:	6023      	str	r3, [r4, #0]
 810d606:	bd38      	pop	{r3, r4, r5, pc}
 810d608:	10000440 	.word	0x10000440

0810d60c <__swsetup_r>:
 810d60c:	4b32      	ldr	r3, [pc, #200]	; (810d6d8 <__swsetup_r+0xcc>)
 810d60e:	b570      	push	{r4, r5, r6, lr}
 810d610:	681d      	ldr	r5, [r3, #0]
 810d612:	4606      	mov	r6, r0
 810d614:	460c      	mov	r4, r1
 810d616:	b125      	cbz	r5, 810d622 <__swsetup_r+0x16>
 810d618:	69ab      	ldr	r3, [r5, #24]
 810d61a:	b913      	cbnz	r3, 810d622 <__swsetup_r+0x16>
 810d61c:	4628      	mov	r0, r5
 810d61e:	f7fe fa69 	bl	810baf4 <__sinit>
 810d622:	4b2e      	ldr	r3, [pc, #184]	; (810d6dc <__swsetup_r+0xd0>)
 810d624:	429c      	cmp	r4, r3
 810d626:	d10f      	bne.n	810d648 <__swsetup_r+0x3c>
 810d628:	686c      	ldr	r4, [r5, #4]
 810d62a:	89a3      	ldrh	r3, [r4, #12]
 810d62c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810d630:	0719      	lsls	r1, r3, #28
 810d632:	d42c      	bmi.n	810d68e <__swsetup_r+0x82>
 810d634:	06dd      	lsls	r5, r3, #27
 810d636:	d411      	bmi.n	810d65c <__swsetup_r+0x50>
 810d638:	2309      	movs	r3, #9
 810d63a:	6033      	str	r3, [r6, #0]
 810d63c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 810d640:	81a3      	strh	r3, [r4, #12]
 810d642:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810d646:	e03e      	b.n	810d6c6 <__swsetup_r+0xba>
 810d648:	4b25      	ldr	r3, [pc, #148]	; (810d6e0 <__swsetup_r+0xd4>)
 810d64a:	429c      	cmp	r4, r3
 810d64c:	d101      	bne.n	810d652 <__swsetup_r+0x46>
 810d64e:	68ac      	ldr	r4, [r5, #8]
 810d650:	e7eb      	b.n	810d62a <__swsetup_r+0x1e>
 810d652:	4b24      	ldr	r3, [pc, #144]	; (810d6e4 <__swsetup_r+0xd8>)
 810d654:	429c      	cmp	r4, r3
 810d656:	bf08      	it	eq
 810d658:	68ec      	ldreq	r4, [r5, #12]
 810d65a:	e7e6      	b.n	810d62a <__swsetup_r+0x1e>
 810d65c:	0758      	lsls	r0, r3, #29
 810d65e:	d512      	bpl.n	810d686 <__swsetup_r+0x7a>
 810d660:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810d662:	b141      	cbz	r1, 810d676 <__swsetup_r+0x6a>
 810d664:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810d668:	4299      	cmp	r1, r3
 810d66a:	d002      	beq.n	810d672 <__swsetup_r+0x66>
 810d66c:	4630      	mov	r0, r6
 810d66e:	f7ff fb55 	bl	810cd1c <_free_r>
 810d672:	2300      	movs	r3, #0
 810d674:	6363      	str	r3, [r4, #52]	; 0x34
 810d676:	89a3      	ldrh	r3, [r4, #12]
 810d678:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 810d67c:	81a3      	strh	r3, [r4, #12]
 810d67e:	2300      	movs	r3, #0
 810d680:	6063      	str	r3, [r4, #4]
 810d682:	6923      	ldr	r3, [r4, #16]
 810d684:	6023      	str	r3, [r4, #0]
 810d686:	89a3      	ldrh	r3, [r4, #12]
 810d688:	f043 0308 	orr.w	r3, r3, #8
 810d68c:	81a3      	strh	r3, [r4, #12]
 810d68e:	6923      	ldr	r3, [r4, #16]
 810d690:	b94b      	cbnz	r3, 810d6a6 <__swsetup_r+0x9a>
 810d692:	89a3      	ldrh	r3, [r4, #12]
 810d694:	f403 7320 	and.w	r3, r3, #640	; 0x280
 810d698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810d69c:	d003      	beq.n	810d6a6 <__swsetup_r+0x9a>
 810d69e:	4621      	mov	r1, r4
 810d6a0:	4630      	mov	r0, r6
 810d6a2:	f000 f95b 	bl	810d95c <__smakebuf_r>
 810d6a6:	89a0      	ldrh	r0, [r4, #12]
 810d6a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810d6ac:	f010 0301 	ands.w	r3, r0, #1
 810d6b0:	d00a      	beq.n	810d6c8 <__swsetup_r+0xbc>
 810d6b2:	2300      	movs	r3, #0
 810d6b4:	60a3      	str	r3, [r4, #8]
 810d6b6:	6963      	ldr	r3, [r4, #20]
 810d6b8:	425b      	negs	r3, r3
 810d6ba:	61a3      	str	r3, [r4, #24]
 810d6bc:	6923      	ldr	r3, [r4, #16]
 810d6be:	b943      	cbnz	r3, 810d6d2 <__swsetup_r+0xc6>
 810d6c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 810d6c4:	d1ba      	bne.n	810d63c <__swsetup_r+0x30>
 810d6c6:	bd70      	pop	{r4, r5, r6, pc}
 810d6c8:	0781      	lsls	r1, r0, #30
 810d6ca:	bf58      	it	pl
 810d6cc:	6963      	ldrpl	r3, [r4, #20]
 810d6ce:	60a3      	str	r3, [r4, #8]
 810d6d0:	e7f4      	b.n	810d6bc <__swsetup_r+0xb0>
 810d6d2:	2000      	movs	r0, #0
 810d6d4:	e7f7      	b.n	810d6c6 <__swsetup_r+0xba>
 810d6d6:	bf00      	nop
 810d6d8:	1000002c 	.word	0x1000002c
 810d6dc:	0810de44 	.word	0x0810de44
 810d6e0:	0810de64 	.word	0x0810de64
 810d6e4:	0810de24 	.word	0x0810de24

0810d6e8 <__assert_func>:
 810d6e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810d6ea:	4614      	mov	r4, r2
 810d6ec:	461a      	mov	r2, r3
 810d6ee:	4b09      	ldr	r3, [pc, #36]	; (810d714 <__assert_func+0x2c>)
 810d6f0:	681b      	ldr	r3, [r3, #0]
 810d6f2:	4605      	mov	r5, r0
 810d6f4:	68d8      	ldr	r0, [r3, #12]
 810d6f6:	b14c      	cbz	r4, 810d70c <__assert_func+0x24>
 810d6f8:	4b07      	ldr	r3, [pc, #28]	; (810d718 <__assert_func+0x30>)
 810d6fa:	9100      	str	r1, [sp, #0]
 810d6fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810d700:	4906      	ldr	r1, [pc, #24]	; (810d71c <__assert_func+0x34>)
 810d702:	462b      	mov	r3, r5
 810d704:	f000 f8e0 	bl	810d8c8 <fiprintf>
 810d708:	f000 f9d0 	bl	810daac <abort>
 810d70c:	4b04      	ldr	r3, [pc, #16]	; (810d720 <__assert_func+0x38>)
 810d70e:	461c      	mov	r4, r3
 810d710:	e7f3      	b.n	810d6fa <__assert_func+0x12>
 810d712:	bf00      	nop
 810d714:	1000002c 	.word	0x1000002c
 810d718:	0810e06d 	.word	0x0810e06d
 810d71c:	0810e07a 	.word	0x0810e07a
 810d720:	0810e0a8 	.word	0x0810e0a8

0810d724 <_close_r>:
 810d724:	b538      	push	{r3, r4, r5, lr}
 810d726:	4d06      	ldr	r5, [pc, #24]	; (810d740 <_close_r+0x1c>)
 810d728:	2300      	movs	r3, #0
 810d72a:	4604      	mov	r4, r0
 810d72c:	4608      	mov	r0, r1
 810d72e:	602b      	str	r3, [r5, #0]
 810d730:	f7f4 fbe1 	bl	8101ef6 <_close>
 810d734:	1c43      	adds	r3, r0, #1
 810d736:	d102      	bne.n	810d73e <_close_r+0x1a>
 810d738:	682b      	ldr	r3, [r5, #0]
 810d73a:	b103      	cbz	r3, 810d73e <_close_r+0x1a>
 810d73c:	6023      	str	r3, [r4, #0]
 810d73e:	bd38      	pop	{r3, r4, r5, pc}
 810d740:	10000440 	.word	0x10000440

0810d744 <__sflush_r>:
 810d744:	898a      	ldrh	r2, [r1, #12]
 810d746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810d74a:	4605      	mov	r5, r0
 810d74c:	0710      	lsls	r0, r2, #28
 810d74e:	460c      	mov	r4, r1
 810d750:	d458      	bmi.n	810d804 <__sflush_r+0xc0>
 810d752:	684b      	ldr	r3, [r1, #4]
 810d754:	2b00      	cmp	r3, #0
 810d756:	dc05      	bgt.n	810d764 <__sflush_r+0x20>
 810d758:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 810d75a:	2b00      	cmp	r3, #0
 810d75c:	dc02      	bgt.n	810d764 <__sflush_r+0x20>
 810d75e:	2000      	movs	r0, #0
 810d760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810d764:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810d766:	2e00      	cmp	r6, #0
 810d768:	d0f9      	beq.n	810d75e <__sflush_r+0x1a>
 810d76a:	2300      	movs	r3, #0
 810d76c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 810d770:	682f      	ldr	r7, [r5, #0]
 810d772:	602b      	str	r3, [r5, #0]
 810d774:	d032      	beq.n	810d7dc <__sflush_r+0x98>
 810d776:	6d60      	ldr	r0, [r4, #84]	; 0x54
 810d778:	89a3      	ldrh	r3, [r4, #12]
 810d77a:	075a      	lsls	r2, r3, #29
 810d77c:	d505      	bpl.n	810d78a <__sflush_r+0x46>
 810d77e:	6863      	ldr	r3, [r4, #4]
 810d780:	1ac0      	subs	r0, r0, r3
 810d782:	6b63      	ldr	r3, [r4, #52]	; 0x34
 810d784:	b10b      	cbz	r3, 810d78a <__sflush_r+0x46>
 810d786:	6c23      	ldr	r3, [r4, #64]	; 0x40
 810d788:	1ac0      	subs	r0, r0, r3
 810d78a:	2300      	movs	r3, #0
 810d78c:	4602      	mov	r2, r0
 810d78e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810d790:	6a21      	ldr	r1, [r4, #32]
 810d792:	4628      	mov	r0, r5
 810d794:	47b0      	blx	r6
 810d796:	1c43      	adds	r3, r0, #1
 810d798:	89a3      	ldrh	r3, [r4, #12]
 810d79a:	d106      	bne.n	810d7aa <__sflush_r+0x66>
 810d79c:	6829      	ldr	r1, [r5, #0]
 810d79e:	291d      	cmp	r1, #29
 810d7a0:	d82c      	bhi.n	810d7fc <__sflush_r+0xb8>
 810d7a2:	4a2a      	ldr	r2, [pc, #168]	; (810d84c <__sflush_r+0x108>)
 810d7a4:	40ca      	lsrs	r2, r1
 810d7a6:	07d6      	lsls	r6, r2, #31
 810d7a8:	d528      	bpl.n	810d7fc <__sflush_r+0xb8>
 810d7aa:	2200      	movs	r2, #0
 810d7ac:	6062      	str	r2, [r4, #4]
 810d7ae:	04d9      	lsls	r1, r3, #19
 810d7b0:	6922      	ldr	r2, [r4, #16]
 810d7b2:	6022      	str	r2, [r4, #0]
 810d7b4:	d504      	bpl.n	810d7c0 <__sflush_r+0x7c>
 810d7b6:	1c42      	adds	r2, r0, #1
 810d7b8:	d101      	bne.n	810d7be <__sflush_r+0x7a>
 810d7ba:	682b      	ldr	r3, [r5, #0]
 810d7bc:	b903      	cbnz	r3, 810d7c0 <__sflush_r+0x7c>
 810d7be:	6560      	str	r0, [r4, #84]	; 0x54
 810d7c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810d7c2:	602f      	str	r7, [r5, #0]
 810d7c4:	2900      	cmp	r1, #0
 810d7c6:	d0ca      	beq.n	810d75e <__sflush_r+0x1a>
 810d7c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810d7cc:	4299      	cmp	r1, r3
 810d7ce:	d002      	beq.n	810d7d6 <__sflush_r+0x92>
 810d7d0:	4628      	mov	r0, r5
 810d7d2:	f7ff faa3 	bl	810cd1c <_free_r>
 810d7d6:	2000      	movs	r0, #0
 810d7d8:	6360      	str	r0, [r4, #52]	; 0x34
 810d7da:	e7c1      	b.n	810d760 <__sflush_r+0x1c>
 810d7dc:	6a21      	ldr	r1, [r4, #32]
 810d7de:	2301      	movs	r3, #1
 810d7e0:	4628      	mov	r0, r5
 810d7e2:	47b0      	blx	r6
 810d7e4:	1c41      	adds	r1, r0, #1
 810d7e6:	d1c7      	bne.n	810d778 <__sflush_r+0x34>
 810d7e8:	682b      	ldr	r3, [r5, #0]
 810d7ea:	2b00      	cmp	r3, #0
 810d7ec:	d0c4      	beq.n	810d778 <__sflush_r+0x34>
 810d7ee:	2b1d      	cmp	r3, #29
 810d7f0:	d001      	beq.n	810d7f6 <__sflush_r+0xb2>
 810d7f2:	2b16      	cmp	r3, #22
 810d7f4:	d101      	bne.n	810d7fa <__sflush_r+0xb6>
 810d7f6:	602f      	str	r7, [r5, #0]
 810d7f8:	e7b1      	b.n	810d75e <__sflush_r+0x1a>
 810d7fa:	89a3      	ldrh	r3, [r4, #12]
 810d7fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810d800:	81a3      	strh	r3, [r4, #12]
 810d802:	e7ad      	b.n	810d760 <__sflush_r+0x1c>
 810d804:	690f      	ldr	r7, [r1, #16]
 810d806:	2f00      	cmp	r7, #0
 810d808:	d0a9      	beq.n	810d75e <__sflush_r+0x1a>
 810d80a:	0793      	lsls	r3, r2, #30
 810d80c:	680e      	ldr	r6, [r1, #0]
 810d80e:	bf08      	it	eq
 810d810:	694b      	ldreq	r3, [r1, #20]
 810d812:	600f      	str	r7, [r1, #0]
 810d814:	bf18      	it	ne
 810d816:	2300      	movne	r3, #0
 810d818:	eba6 0807 	sub.w	r8, r6, r7
 810d81c:	608b      	str	r3, [r1, #8]
 810d81e:	f1b8 0f00 	cmp.w	r8, #0
 810d822:	dd9c      	ble.n	810d75e <__sflush_r+0x1a>
 810d824:	6a21      	ldr	r1, [r4, #32]
 810d826:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 810d828:	4643      	mov	r3, r8
 810d82a:	463a      	mov	r2, r7
 810d82c:	4628      	mov	r0, r5
 810d82e:	47b0      	blx	r6
 810d830:	2800      	cmp	r0, #0
 810d832:	dc06      	bgt.n	810d842 <__sflush_r+0xfe>
 810d834:	89a3      	ldrh	r3, [r4, #12]
 810d836:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810d83a:	81a3      	strh	r3, [r4, #12]
 810d83c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810d840:	e78e      	b.n	810d760 <__sflush_r+0x1c>
 810d842:	4407      	add	r7, r0
 810d844:	eba8 0800 	sub.w	r8, r8, r0
 810d848:	e7e9      	b.n	810d81e <__sflush_r+0xda>
 810d84a:	bf00      	nop
 810d84c:	20400001 	.word	0x20400001

0810d850 <_fflush_r>:
 810d850:	b538      	push	{r3, r4, r5, lr}
 810d852:	690b      	ldr	r3, [r1, #16]
 810d854:	4605      	mov	r5, r0
 810d856:	460c      	mov	r4, r1
 810d858:	b913      	cbnz	r3, 810d860 <_fflush_r+0x10>
 810d85a:	2500      	movs	r5, #0
 810d85c:	4628      	mov	r0, r5
 810d85e:	bd38      	pop	{r3, r4, r5, pc}
 810d860:	b118      	cbz	r0, 810d86a <_fflush_r+0x1a>
 810d862:	6983      	ldr	r3, [r0, #24]
 810d864:	b90b      	cbnz	r3, 810d86a <_fflush_r+0x1a>
 810d866:	f7fe f945 	bl	810baf4 <__sinit>
 810d86a:	4b14      	ldr	r3, [pc, #80]	; (810d8bc <_fflush_r+0x6c>)
 810d86c:	429c      	cmp	r4, r3
 810d86e:	d11b      	bne.n	810d8a8 <_fflush_r+0x58>
 810d870:	686c      	ldr	r4, [r5, #4]
 810d872:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810d876:	2b00      	cmp	r3, #0
 810d878:	d0ef      	beq.n	810d85a <_fflush_r+0xa>
 810d87a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 810d87c:	07d0      	lsls	r0, r2, #31
 810d87e:	d404      	bmi.n	810d88a <_fflush_r+0x3a>
 810d880:	0599      	lsls	r1, r3, #22
 810d882:	d402      	bmi.n	810d88a <_fflush_r+0x3a>
 810d884:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810d886:	f7fe fd46 	bl	810c316 <__retarget_lock_acquire_recursive>
 810d88a:	4628      	mov	r0, r5
 810d88c:	4621      	mov	r1, r4
 810d88e:	f7ff ff59 	bl	810d744 <__sflush_r>
 810d892:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810d894:	07da      	lsls	r2, r3, #31
 810d896:	4605      	mov	r5, r0
 810d898:	d4e0      	bmi.n	810d85c <_fflush_r+0xc>
 810d89a:	89a3      	ldrh	r3, [r4, #12]
 810d89c:	059b      	lsls	r3, r3, #22
 810d89e:	d4dd      	bmi.n	810d85c <_fflush_r+0xc>
 810d8a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810d8a2:	f7fe fd39 	bl	810c318 <__retarget_lock_release_recursive>
 810d8a6:	e7d9      	b.n	810d85c <_fflush_r+0xc>
 810d8a8:	4b05      	ldr	r3, [pc, #20]	; (810d8c0 <_fflush_r+0x70>)
 810d8aa:	429c      	cmp	r4, r3
 810d8ac:	d101      	bne.n	810d8b2 <_fflush_r+0x62>
 810d8ae:	68ac      	ldr	r4, [r5, #8]
 810d8b0:	e7df      	b.n	810d872 <_fflush_r+0x22>
 810d8b2:	4b04      	ldr	r3, [pc, #16]	; (810d8c4 <_fflush_r+0x74>)
 810d8b4:	429c      	cmp	r4, r3
 810d8b6:	bf08      	it	eq
 810d8b8:	68ec      	ldreq	r4, [r5, #12]
 810d8ba:	e7da      	b.n	810d872 <_fflush_r+0x22>
 810d8bc:	0810de44 	.word	0x0810de44
 810d8c0:	0810de64 	.word	0x0810de64
 810d8c4:	0810de24 	.word	0x0810de24

0810d8c8 <fiprintf>:
 810d8c8:	b40e      	push	{r1, r2, r3}
 810d8ca:	b503      	push	{r0, r1, lr}
 810d8cc:	4601      	mov	r1, r0
 810d8ce:	ab03      	add	r3, sp, #12
 810d8d0:	4805      	ldr	r0, [pc, #20]	; (810d8e8 <fiprintf+0x20>)
 810d8d2:	f853 2b04 	ldr.w	r2, [r3], #4
 810d8d6:	6800      	ldr	r0, [r0, #0]
 810d8d8:	9301      	str	r3, [sp, #4]
 810d8da:	f7ff fc85 	bl	810d1e8 <_vfiprintf_r>
 810d8de:	b002      	add	sp, #8
 810d8e0:	f85d eb04 	ldr.w	lr, [sp], #4
 810d8e4:	b003      	add	sp, #12
 810d8e6:	4770      	bx	lr
 810d8e8:	1000002c 	.word	0x1000002c

0810d8ec <_lseek_r>:
 810d8ec:	b538      	push	{r3, r4, r5, lr}
 810d8ee:	4d07      	ldr	r5, [pc, #28]	; (810d90c <_lseek_r+0x20>)
 810d8f0:	4604      	mov	r4, r0
 810d8f2:	4608      	mov	r0, r1
 810d8f4:	4611      	mov	r1, r2
 810d8f6:	2200      	movs	r2, #0
 810d8f8:	602a      	str	r2, [r5, #0]
 810d8fa:	461a      	mov	r2, r3
 810d8fc:	f7f4 fb22 	bl	8101f44 <_lseek>
 810d900:	1c43      	adds	r3, r0, #1
 810d902:	d102      	bne.n	810d90a <_lseek_r+0x1e>
 810d904:	682b      	ldr	r3, [r5, #0]
 810d906:	b103      	cbz	r3, 810d90a <_lseek_r+0x1e>
 810d908:	6023      	str	r3, [r4, #0]
 810d90a:	bd38      	pop	{r3, r4, r5, pc}
 810d90c:	10000440 	.word	0x10000440

0810d910 <__swhatbuf_r>:
 810d910:	b570      	push	{r4, r5, r6, lr}
 810d912:	460e      	mov	r6, r1
 810d914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810d918:	2900      	cmp	r1, #0
 810d91a:	b096      	sub	sp, #88	; 0x58
 810d91c:	4614      	mov	r4, r2
 810d91e:	461d      	mov	r5, r3
 810d920:	da08      	bge.n	810d934 <__swhatbuf_r+0x24>
 810d922:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 810d926:	2200      	movs	r2, #0
 810d928:	602a      	str	r2, [r5, #0]
 810d92a:	061a      	lsls	r2, r3, #24
 810d92c:	d410      	bmi.n	810d950 <__swhatbuf_r+0x40>
 810d92e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810d932:	e00e      	b.n	810d952 <__swhatbuf_r+0x42>
 810d934:	466a      	mov	r2, sp
 810d936:	f000 f8c1 	bl	810dabc <_fstat_r>
 810d93a:	2800      	cmp	r0, #0
 810d93c:	dbf1      	blt.n	810d922 <__swhatbuf_r+0x12>
 810d93e:	9a01      	ldr	r2, [sp, #4]
 810d940:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 810d944:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 810d948:	425a      	negs	r2, r3
 810d94a:	415a      	adcs	r2, r3
 810d94c:	602a      	str	r2, [r5, #0]
 810d94e:	e7ee      	b.n	810d92e <__swhatbuf_r+0x1e>
 810d950:	2340      	movs	r3, #64	; 0x40
 810d952:	2000      	movs	r0, #0
 810d954:	6023      	str	r3, [r4, #0]
 810d956:	b016      	add	sp, #88	; 0x58
 810d958:	bd70      	pop	{r4, r5, r6, pc}
	...

0810d95c <__smakebuf_r>:
 810d95c:	898b      	ldrh	r3, [r1, #12]
 810d95e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810d960:	079d      	lsls	r5, r3, #30
 810d962:	4606      	mov	r6, r0
 810d964:	460c      	mov	r4, r1
 810d966:	d507      	bpl.n	810d978 <__smakebuf_r+0x1c>
 810d968:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810d96c:	6023      	str	r3, [r4, #0]
 810d96e:	6123      	str	r3, [r4, #16]
 810d970:	2301      	movs	r3, #1
 810d972:	6163      	str	r3, [r4, #20]
 810d974:	b002      	add	sp, #8
 810d976:	bd70      	pop	{r4, r5, r6, pc}
 810d978:	ab01      	add	r3, sp, #4
 810d97a:	466a      	mov	r2, sp
 810d97c:	f7ff ffc8 	bl	810d910 <__swhatbuf_r>
 810d980:	9900      	ldr	r1, [sp, #0]
 810d982:	4605      	mov	r5, r0
 810d984:	4630      	mov	r0, r6
 810d986:	f7ff fa35 	bl	810cdf4 <_malloc_r>
 810d98a:	b948      	cbnz	r0, 810d9a0 <__smakebuf_r+0x44>
 810d98c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810d990:	059a      	lsls	r2, r3, #22
 810d992:	d4ef      	bmi.n	810d974 <__smakebuf_r+0x18>
 810d994:	f023 0303 	bic.w	r3, r3, #3
 810d998:	f043 0302 	orr.w	r3, r3, #2
 810d99c:	81a3      	strh	r3, [r4, #12]
 810d99e:	e7e3      	b.n	810d968 <__smakebuf_r+0xc>
 810d9a0:	4b0d      	ldr	r3, [pc, #52]	; (810d9d8 <__smakebuf_r+0x7c>)
 810d9a2:	62b3      	str	r3, [r6, #40]	; 0x28
 810d9a4:	89a3      	ldrh	r3, [r4, #12]
 810d9a6:	6020      	str	r0, [r4, #0]
 810d9a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810d9ac:	81a3      	strh	r3, [r4, #12]
 810d9ae:	9b00      	ldr	r3, [sp, #0]
 810d9b0:	6163      	str	r3, [r4, #20]
 810d9b2:	9b01      	ldr	r3, [sp, #4]
 810d9b4:	6120      	str	r0, [r4, #16]
 810d9b6:	b15b      	cbz	r3, 810d9d0 <__smakebuf_r+0x74>
 810d9b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810d9bc:	4630      	mov	r0, r6
 810d9be:	f000 f88f 	bl	810dae0 <_isatty_r>
 810d9c2:	b128      	cbz	r0, 810d9d0 <__smakebuf_r+0x74>
 810d9c4:	89a3      	ldrh	r3, [r4, #12]
 810d9c6:	f023 0303 	bic.w	r3, r3, #3
 810d9ca:	f043 0301 	orr.w	r3, r3, #1
 810d9ce:	81a3      	strh	r3, [r4, #12]
 810d9d0:	89a0      	ldrh	r0, [r4, #12]
 810d9d2:	4305      	orrs	r5, r0
 810d9d4:	81a5      	strh	r5, [r4, #12]
 810d9d6:	e7cd      	b.n	810d974 <__smakebuf_r+0x18>
 810d9d8:	0810ba8d 	.word	0x0810ba8d

0810d9dc <memmove>:
 810d9dc:	4288      	cmp	r0, r1
 810d9de:	b510      	push	{r4, lr}
 810d9e0:	eb01 0402 	add.w	r4, r1, r2
 810d9e4:	d902      	bls.n	810d9ec <memmove+0x10>
 810d9e6:	4284      	cmp	r4, r0
 810d9e8:	4623      	mov	r3, r4
 810d9ea:	d807      	bhi.n	810d9fc <memmove+0x20>
 810d9ec:	1e43      	subs	r3, r0, #1
 810d9ee:	42a1      	cmp	r1, r4
 810d9f0:	d008      	beq.n	810da04 <memmove+0x28>
 810d9f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 810d9f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 810d9fa:	e7f8      	b.n	810d9ee <memmove+0x12>
 810d9fc:	4402      	add	r2, r0
 810d9fe:	4601      	mov	r1, r0
 810da00:	428a      	cmp	r2, r1
 810da02:	d100      	bne.n	810da06 <memmove+0x2a>
 810da04:	bd10      	pop	{r4, pc}
 810da06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810da0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810da0e:	e7f7      	b.n	810da00 <memmove+0x24>

0810da10 <__malloc_lock>:
 810da10:	4801      	ldr	r0, [pc, #4]	; (810da18 <__malloc_lock+0x8>)
 810da12:	f7fe bc80 	b.w	810c316 <__retarget_lock_acquire_recursive>
 810da16:	bf00      	nop
 810da18:	10000434 	.word	0x10000434

0810da1c <__malloc_unlock>:
 810da1c:	4801      	ldr	r0, [pc, #4]	; (810da24 <__malloc_unlock+0x8>)
 810da1e:	f7fe bc7b 	b.w	810c318 <__retarget_lock_release_recursive>
 810da22:	bf00      	nop
 810da24:	10000434 	.word	0x10000434

0810da28 <_realloc_r>:
 810da28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810da2c:	4680      	mov	r8, r0
 810da2e:	4614      	mov	r4, r2
 810da30:	460e      	mov	r6, r1
 810da32:	b921      	cbnz	r1, 810da3e <_realloc_r+0x16>
 810da34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810da38:	4611      	mov	r1, r2
 810da3a:	f7ff b9db 	b.w	810cdf4 <_malloc_r>
 810da3e:	b92a      	cbnz	r2, 810da4c <_realloc_r+0x24>
 810da40:	f7ff f96c 	bl	810cd1c <_free_r>
 810da44:	4625      	mov	r5, r4
 810da46:	4628      	mov	r0, r5
 810da48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810da4c:	f000 f858 	bl	810db00 <_malloc_usable_size_r>
 810da50:	4284      	cmp	r4, r0
 810da52:	4607      	mov	r7, r0
 810da54:	d802      	bhi.n	810da5c <_realloc_r+0x34>
 810da56:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 810da5a:	d812      	bhi.n	810da82 <_realloc_r+0x5a>
 810da5c:	4621      	mov	r1, r4
 810da5e:	4640      	mov	r0, r8
 810da60:	f7ff f9c8 	bl	810cdf4 <_malloc_r>
 810da64:	4605      	mov	r5, r0
 810da66:	2800      	cmp	r0, #0
 810da68:	d0ed      	beq.n	810da46 <_realloc_r+0x1e>
 810da6a:	42bc      	cmp	r4, r7
 810da6c:	4622      	mov	r2, r4
 810da6e:	4631      	mov	r1, r6
 810da70:	bf28      	it	cs
 810da72:	463a      	movcs	r2, r7
 810da74:	f7fe fc6c 	bl	810c350 <memcpy>
 810da78:	4631      	mov	r1, r6
 810da7a:	4640      	mov	r0, r8
 810da7c:	f7ff f94e 	bl	810cd1c <_free_r>
 810da80:	e7e1      	b.n	810da46 <_realloc_r+0x1e>
 810da82:	4635      	mov	r5, r6
 810da84:	e7df      	b.n	810da46 <_realloc_r+0x1e>
	...

0810da88 <_read_r>:
 810da88:	b538      	push	{r3, r4, r5, lr}
 810da8a:	4d07      	ldr	r5, [pc, #28]	; (810daa8 <_read_r+0x20>)
 810da8c:	4604      	mov	r4, r0
 810da8e:	4608      	mov	r0, r1
 810da90:	4611      	mov	r1, r2
 810da92:	2200      	movs	r2, #0
 810da94:	602a      	str	r2, [r5, #0]
 810da96:	461a      	mov	r2, r3
 810da98:	f7f4 f9f4 	bl	8101e84 <_read>
 810da9c:	1c43      	adds	r3, r0, #1
 810da9e:	d102      	bne.n	810daa6 <_read_r+0x1e>
 810daa0:	682b      	ldr	r3, [r5, #0]
 810daa2:	b103      	cbz	r3, 810daa6 <_read_r+0x1e>
 810daa4:	6023      	str	r3, [r4, #0]
 810daa6:	bd38      	pop	{r3, r4, r5, pc}
 810daa8:	10000440 	.word	0x10000440

0810daac <abort>:
 810daac:	b508      	push	{r3, lr}
 810daae:	2006      	movs	r0, #6
 810dab0:	f000 f856 	bl	810db60 <raise>
 810dab4:	2001      	movs	r0, #1
 810dab6:	f7f4 f9db 	bl	8101e70 <_exit>
	...

0810dabc <_fstat_r>:
 810dabc:	b538      	push	{r3, r4, r5, lr}
 810dabe:	4d07      	ldr	r5, [pc, #28]	; (810dadc <_fstat_r+0x20>)
 810dac0:	2300      	movs	r3, #0
 810dac2:	4604      	mov	r4, r0
 810dac4:	4608      	mov	r0, r1
 810dac6:	4611      	mov	r1, r2
 810dac8:	602b      	str	r3, [r5, #0]
 810daca:	f7f4 fa20 	bl	8101f0e <_fstat>
 810dace:	1c43      	adds	r3, r0, #1
 810dad0:	d102      	bne.n	810dad8 <_fstat_r+0x1c>
 810dad2:	682b      	ldr	r3, [r5, #0]
 810dad4:	b103      	cbz	r3, 810dad8 <_fstat_r+0x1c>
 810dad6:	6023      	str	r3, [r4, #0]
 810dad8:	bd38      	pop	{r3, r4, r5, pc}
 810dada:	bf00      	nop
 810dadc:	10000440 	.word	0x10000440

0810dae0 <_isatty_r>:
 810dae0:	b538      	push	{r3, r4, r5, lr}
 810dae2:	4d06      	ldr	r5, [pc, #24]	; (810dafc <_isatty_r+0x1c>)
 810dae4:	2300      	movs	r3, #0
 810dae6:	4604      	mov	r4, r0
 810dae8:	4608      	mov	r0, r1
 810daea:	602b      	str	r3, [r5, #0]
 810daec:	f7f4 fa1f 	bl	8101f2e <_isatty>
 810daf0:	1c43      	adds	r3, r0, #1
 810daf2:	d102      	bne.n	810dafa <_isatty_r+0x1a>
 810daf4:	682b      	ldr	r3, [r5, #0]
 810daf6:	b103      	cbz	r3, 810dafa <_isatty_r+0x1a>
 810daf8:	6023      	str	r3, [r4, #0]
 810dafa:	bd38      	pop	{r3, r4, r5, pc}
 810dafc:	10000440 	.word	0x10000440

0810db00 <_malloc_usable_size_r>:
 810db00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810db04:	1f18      	subs	r0, r3, #4
 810db06:	2b00      	cmp	r3, #0
 810db08:	bfbc      	itt	lt
 810db0a:	580b      	ldrlt	r3, [r1, r0]
 810db0c:	18c0      	addlt	r0, r0, r3
 810db0e:	4770      	bx	lr

0810db10 <_raise_r>:
 810db10:	291f      	cmp	r1, #31
 810db12:	b538      	push	{r3, r4, r5, lr}
 810db14:	4604      	mov	r4, r0
 810db16:	460d      	mov	r5, r1
 810db18:	d904      	bls.n	810db24 <_raise_r+0x14>
 810db1a:	2316      	movs	r3, #22
 810db1c:	6003      	str	r3, [r0, #0]
 810db1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810db22:	bd38      	pop	{r3, r4, r5, pc}
 810db24:	6c42      	ldr	r2, [r0, #68]	; 0x44
 810db26:	b112      	cbz	r2, 810db2e <_raise_r+0x1e>
 810db28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810db2c:	b94b      	cbnz	r3, 810db42 <_raise_r+0x32>
 810db2e:	4620      	mov	r0, r4
 810db30:	f000 f830 	bl	810db94 <_getpid_r>
 810db34:	462a      	mov	r2, r5
 810db36:	4601      	mov	r1, r0
 810db38:	4620      	mov	r0, r4
 810db3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810db3e:	f000 b817 	b.w	810db70 <_kill_r>
 810db42:	2b01      	cmp	r3, #1
 810db44:	d00a      	beq.n	810db5c <_raise_r+0x4c>
 810db46:	1c59      	adds	r1, r3, #1
 810db48:	d103      	bne.n	810db52 <_raise_r+0x42>
 810db4a:	2316      	movs	r3, #22
 810db4c:	6003      	str	r3, [r0, #0]
 810db4e:	2001      	movs	r0, #1
 810db50:	e7e7      	b.n	810db22 <_raise_r+0x12>
 810db52:	2400      	movs	r4, #0
 810db54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810db58:	4628      	mov	r0, r5
 810db5a:	4798      	blx	r3
 810db5c:	2000      	movs	r0, #0
 810db5e:	e7e0      	b.n	810db22 <_raise_r+0x12>

0810db60 <raise>:
 810db60:	4b02      	ldr	r3, [pc, #8]	; (810db6c <raise+0xc>)
 810db62:	4601      	mov	r1, r0
 810db64:	6818      	ldr	r0, [r3, #0]
 810db66:	f7ff bfd3 	b.w	810db10 <_raise_r>
 810db6a:	bf00      	nop
 810db6c:	1000002c 	.word	0x1000002c

0810db70 <_kill_r>:
 810db70:	b538      	push	{r3, r4, r5, lr}
 810db72:	4d07      	ldr	r5, [pc, #28]	; (810db90 <_kill_r+0x20>)
 810db74:	2300      	movs	r3, #0
 810db76:	4604      	mov	r4, r0
 810db78:	4608      	mov	r0, r1
 810db7a:	4611      	mov	r1, r2
 810db7c:	602b      	str	r3, [r5, #0]
 810db7e:	f7f4 f967 	bl	8101e50 <_kill>
 810db82:	1c43      	adds	r3, r0, #1
 810db84:	d102      	bne.n	810db8c <_kill_r+0x1c>
 810db86:	682b      	ldr	r3, [r5, #0]
 810db88:	b103      	cbz	r3, 810db8c <_kill_r+0x1c>
 810db8a:	6023      	str	r3, [r4, #0]
 810db8c:	bd38      	pop	{r3, r4, r5, pc}
 810db8e:	bf00      	nop
 810db90:	10000440 	.word	0x10000440

0810db94 <_getpid_r>:
 810db94:	f7f4 b954 	b.w	8101e40 <_getpid>

0810db98 <_init>:
 810db98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810db9a:	bf00      	nop
 810db9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810db9e:	bc08      	pop	{r3}
 810dba0:	469e      	mov	lr, r3
 810dba2:	4770      	bx	lr

0810dba4 <_fini>:
 810dba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810dba6:	bf00      	nop
 810dba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810dbaa:	bc08      	pop	{r3}
 810dbac:	469e      	mov	lr, r3
 810dbae:	4770      	bx	lr
